---
title: "Hands-on Exercise 07"
author: "Andrea Yeo"
date-modified: "last-modified"
execute:
  echo: true
  eval: true
  warning: false
  freeze: true
---

[With the assistance of ChatGPT]{style="font-size: 14px;"}

## 7. Visualising and Analysing Time-oriented Data

### 7.1 Learning Outcome

In this hands-on exercise, we will use R packages to create several visualizations:

-   Create a calendar heatmap using [ggplot2](https://www.rdocumentation.org/packages/ggplot2/versions/3.5.0)

-   Create a cycle plot using [ggplot2](https://www.rdocumentation.org/packages/ggplot2/versions/3.5.0)

-   Create a slopegraph

-   Create a horizon chart

### 7.2 Installing and launching R packages

```{r}
pacman::p_load(scales, viridis, lubridate, ggthemes,
               gridExtra, readxl, knitr, data.table, 
               tidyverse, CGPfunctions)
```

### 7.3 Importing data and data preparation

The following code imports the *eventlog.csv* file into our R environment.

```{r}
attacks <- read_csv("data/eventlog.csv")
```

#### 7.3.1 Installing and launching R packages

We will use `kable()` to review the structure of the imported data frame.

```{r}
kable(head(attacks))
```

The dataset includes three columns: **timestamp, source_country, and tz.**

-   **timestamp**: Contains date-time values in POSIXct format.

-   **source_country**: Represents the attack source using ISO 3166-1 alpha-2 country codes.

-   **tz**: Stores the time zone of the source IP address.

#### 7.3.2 Data preparation

Before creating the calendar heatmap, we will write a function to derive two new fields:

1.  **wkday (weekday)** and

2.  **hour**

from the timestamp.

**Step 1**: Deriving weekday and hour of day fields

```{r}
make_hr_wkday <- function(ts, sc, tz) {
  real_times <- ymd_hms(ts, 
                        tz = tz[1], 
                        quiet = TRUE)
  dt <- data.table(source_country = sc,
                   wkday = weekdays(real_times),
                   hour = hour(real_times))
  return(dt)
  }
```

::: callout-note
-   [ymd_hms()](https://lubridate.tidyverse.org/reference/ymd_hms.html) and [hour()](https://lubridate.tidyverse.org/reference/hour.html) are from [**lubridate**](https://lubridate.tidyverse.org/) package, and

-   [weekdays()](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/weekdays) is a **base** R function.
:::

**Step 2**: Deriving the attacks tibble data frame

```{r}
wkday_levels <- c('Saturday', 'Friday', 
                  'Thursday', 'Wednesday', 
                  'Tuesday', 'Monday', 
                  'Sunday')

attacks <- attacks %>%
  group_by(tz) %>%
  do(make_hr_wkday(.$timestamp, 
                   .$source_country, 
                   .$tz)) %>% 
  ungroup() %>% 
  mutate(wkday = factor(
    wkday, levels = wkday_levels),
    hour  = factor(
      hour, levels = 0:23))
```

Table below shows the tidy tibble table after processing.

```{r}
kable(head(attacks))
```

### 7.4 Building the calendar heatmaps

```{r}
grouped <- attacks %>% 
  count(wkday, hour) %>% 
  ungroup() %>%
  na.omit()

ggplot(grouped, 
       aes(hour, 
           wkday, 
           fill = n)) + 
geom_tile(color = "white", 
          size = 0.1) + 
theme_tufte(base_family = "Helvetica") + 
coord_equal() +
scale_fill_gradient(name = "# of attacks",
                    low = "sky blue", 
                    high = "dark blue") +
labs(x = NULL, 
     y = NULL, 
     title = "Attacks by weekday and time of day") +
theme(axis.ticks = element_blank(),
      plot.title = element_text(hjust = 0.5),
      legend.title = element_text(size = 8),
      legend.text = element_text(size = 6) )
```

::: callout-note
## Things to learn from the code

-   A **tibble** data table (*`grouped`*) is created by aggregating attack data based on the `wkday` and `hour` fields.
-   A new field, **n**, is added by using the `group_by()` and `count()` functions.
-   `na.omit()` is used to remove missing values.
-   `geom_tile()` plots tiles (grids) at each (x, y) position, with `color` and `size` specifying the border color and line thickness.
-   `theme_tufte()` from the [`ggthemes`](https://www.rdocumentation.org/packages/ggthemes/versions/3.4.2/topics/ggthemes_data) package is used to eliminate unnecessary chart elements.
-   `coord_equal()` ensures the plot maintains a 1:1 aspect ratio.
-   `scale_fill_gradient()` applies a two-color gradient (low to high).
:::

#### 7.4.1 Building multiple calendar heatmaps

**Tasks assigned**: Building multiple heat maps for the top four countries with the highest number of attacks

**Step 1**: Deriving attack by country object

To determine the top four countries with the highest number of attacks, the data needs to be processed by

-   Count Attacks: Aggregate the number of attacks per country
-   Calculate Percentage: Compute the proportion of attacks for each country
-   Store Results: Save the output as a tibble data frame

```{r}
attacks_by_country <- count(
  attacks, source_country) %>%
  mutate(percent = percent(n/sum(n))) %>%
  arrange(desc(n))
```

**Step 2**: Preparing the tidy data frame Next, we will extract the attack records of the top 4 countries from *attacks* data frame and save the data in a new tibble data frame (i.e. *top4_attacks*).

```{r}
top4 <- attacks_by_country$source_country[1:4]
top4_attacks <- attacks %>%
  filter(source_country %in% top4) %>%
  count(source_country, wkday, hour) %>%
  ungroup() %>%
  mutate(source_country = factor(
    source_country, levels = top4)) %>%
  na.omit()
```

#### 7.4.2 Plotting multiple calendar heatmaps

**Step 3**: Plotting the Multiple Calender Heat map by using [ggplot2](https://www.rdocumentation.org/packages/ggplot2/versions/3.5.0) package.

```{r}
ggplot(top4_attacks, 
       aes(hour, 
           wkday, 
           fill = n)) + 
  geom_tile(color = "white", 
          size = 0.1) + 
  theme_tufte(base_family = "Helvetica") + 
  coord_equal() +
  scale_fill_gradient(name = "# of attacks",
                    low = "sky blue", 
                    high = "dark blue") +
  facet_wrap(~source_country, ncol = 2) +
  labs(x = NULL, y = NULL, 
     title = "Attacks on top 4 countries by weekday and time of day") +
  theme(axis.ticks = element_blank(),
        axis.text.x = element_text(size = 7),
        plot.title = element_text(hjust = 0.5),
        legend.title = element_text(size = 8),
        legend.text = element_text(size = 6) )
```

### 7.5 Plotting cycle plot

The below section will covers how to create a cycle plot using ggplot2 to visualize time-series patterns and trends in visitor arrivals from Vietnam programmatically.

#### 7.5.1 Importing data

In this exercise, *arrivals_by_air.xlsx* is imported using `read_excel()` from the **readxl** package and stored as a tibble data frame named air.

```{r}
air <- read_excel("data/arrivals_by_air.xlsx")
```

#### 7.5.2 Deriving month and year fields

Two new fields called *month* and *year* will be derived from *Month-Year* field

```{r}
air$month <- factor(month(air$`Month-Year`), 
                    levels=1:12, 
                    labels=month.abb, 
                    ordered=TRUE) 
air$year <- year(ymd(air$`Month-Year`))
```

#### 7.5.3 Extracting the target country

The code below is used to extract data for the target country (i.e. Vietnam).

```{r}
Vietnam <- air %>% 
  select(`Vietnam`, 
         month, 
         year) %>%
  filter(year >= 2010)
```

#### 7.5.4 Computing year average arrivals by month

The code uses `group_by()` and `summarise()` of **dplyr** to compute year average arrivals by month.

```{r}
hline.data <- Vietnam %>% 
  group_by(month) %>%
  summarise(avgvalue = mean(`Vietnam`))
```

#### 7.5.5 Plotting the cycle plot

The code below is used to plot the cycle plot.

```{r}
ggplot() + 
  geom_line(data=Vietnam,
            aes(x=year, 
                y=`Vietnam`, 
                group=month), 
            colour="pink") +
  geom_hline(aes(yintercept=avgvalue), 
             data=hline.data, 
             linetype=6, 
             colour="blue", 
             size=0.5) + 
  facet_grid(~month) +
  labs(axis.text.x = element_blank(),
       title = "Visitor arrivals from Vietnam by air, Jan 2010-Dec 2019") +
  xlab("") +
  ylab("No. of Visitors") +
  theme_tufte(base_family = "Helvetica")
```

### 7.6 Plotting slopegraph

In this section we will learn how to plot a [slopegraph](https://www.storytellingwithdata.com/blog/2020/7/27/what-is-a-slopegraph) by using R.

Before getting start, make sure that [**CGPfunctions**](https://www.rdocumentation.org/packages/CGPfunctions/versions/0.6.3/topics/CGPfunctions) has been installed and loaded onto R environment.

To learn more about the function, we can refer to [Using newggslopegraph](https://cran.r-project.org/web/packages/CGPfunctions/vignettes/Using-newggslopegraph.html)

`newggslopegraph()` and its arguments can be referenced at this [link](https://www.rdocumentation.org/packages/CGPfunctions/versions/0.6.3/topics/newggslopegraph).

#### 7.6.1 Importing the data

We will use the code below to import the rice data set into R environment.

```{r}
rice <- read_csv("data/rice.csv")
```

We will check the dataset using below

-   `glimpse()`: provides a transposed overview of a dataset, showing variables and their types in a concise format.
-   `head()`: displays the first few rows of a dataset (default is 6 rows) to give a quick preview of the data.
-   `summary()`: generates a statistical summary of each variable, including measures like mean, median, and range for numeric data.
-   `duplicated()`:returns a logical vector indicating which elements or rows in a vector or data frame are duplicates.
-   `Sum(is.na())`: counts the number of missing values (NA) in each column of the data frame.
-   `spec()`: use `spec()` to quickly inspect the column

::: panel-tabset
## glimpse()

```{r}
glimpse(rice)
```

## head()

```{r}
head(rice)
```

## summary()

```{r}
summary(rice)
```

## duplicated()

```{r}
rice[duplicated(rice),]
```

## sum(is.na())

```{r}
sum(is.na(rice))  
```

## spec()

```{r}
spec(rice)
```
:::

The rice tibble contains 3 attributes, as shown above:

-   **Categorical attributes:** Country

-   **Continuous attributes:** Year Yield Production

#### 7.6.2 Plotting the slopegraph

The code below will be used to plot a basic slopegraph

```{r}
rice %>% 
  mutate(Year = factor(Year)) %>%
  filter(Year %in% c(1961, 1980)) %>%
  newggslopegraph(Year, Yield, Country,
                Title = "Rice Yield of Top 11 Asian Counties",
                SubTitle = "1961-1980",
                Caption = NULL)
```

::: callout-note
-   For effective data visualisation design, `factor()` is used convert the value type of *Year* field from numeric to factor.
:::

### 8.0 References

-   Kam, T.S(2024). [Visual Statistical Analysis.](https://r4va.netlify.app/chap17)

### 9.0 Takeaway

::: callout-tip
## Key takeaways

-   Learn how to plot a calendar heatmap,
-   Learn how to create a cycle plot (time-series analysis)
-   Learn how to plot slopegraph which is use to compare trends over time - using `newggslopegraph()` from CGPfunctions
-   Key R packages used - `ggplot2`, `lubridate`, `dplyr & tidyr`, `ggthemes`, and `CGPfunctions`
:::

### 9.1 Further exploration

1.  Using `rice` dataset - To explore how *Yield (or produdction)* changes over time for China

Observations:

-   Rice yield in China steadily rises from the 1960s to the 2010s.
-   By the 1980s, it surpasses the overall average.
-   Growth continues despite some minor dips.
-   Yield levels now are multiple times higher than in the early 1960s.
-   Post-2000, growth appears to slow slightly, as China is moving away from agricultural production.

```{r}
# Filter for China only
rice_china <- rice %>%
  filter(Country == "China")

# Calculate the overall average Yield
avg_yield <- mean(rice_china$Yield, na.rm = TRUE)

# Plot a simple line chart with average line
ggplot(rice_china, aes(x = Year, y = Yield)) +
  geom_line(color = "black") +
  geom_hline(yintercept = avg_yield, color = "red", linetype = "dashed") +
  labs(title = "Annual Rice Yield in China",
       x = "Year",
       y = "Yield") +
  theme_tufte()

```

2.  Using `AVERP` dataset - To use slopegraph to explore consumer items over time

Observations:

-   **Significant Price Increase for Certain Items**: Cod Fish (Per Kilogram) saw a substantial increase from 48.6 in 2014 to 66.0 in 2022. Threadfin (Kurau) (Per Kilogram) also experienced a sharp rise from 51.2 to 58.5.
-   **Moderate Price Increases Across Several Items**: Items like Pork Rib Bones, Streaky Pork, and Squids show steady increases
-   **Diverging Trends Between Items**: While many items show a gradual increase, seafood and meat products show the highest price surges.Plant-based or non-perishable goods seem to have less extreme price fluctuations.

```{r}
# Load necessary libraries
library(tidyverse)
library(CGPfunctions)

# Import dataset
df <- read_csv("data/AVERP.csv")

# Convert Date column to Date format
df$Date <- as.Date(df$Date, format="%m/%d/%Y")

# Extract the year
df$Year <- format(df$Date, "%Y")

# Select two significant years (earliest and latest)
year_min <- min(df$Year)
year_max <- max(df$Year)

# Filter dataset for the two selected years
df_filtered <- df %>%
  filter(Year %in% c(year_min, year_max)) %>%
  group_by(`Consumer Items`, Year) %>%
  summarise(Avg_Value = round(mean(Values, na.rm = TRUE), 1)) %>%  # Round to 1 decimal place
  ungroup()

# Convert Year to factor for better visualization
df_filtered$Year <- as.factor(df_filtered$Year)

# Plot the slopegraph
newggslopegraph(df_filtered, Year, Avg_Value, `Consumer Items`,
                Title = "Slopegraph of Consumer Items Over Time",
                SubTitle = paste(year_min, "-", year_max),
                Caption = "Prepared using R")

```


