---
title: "Hands-on Exercise 10"
author: "Andrea Yeo"
date-modified: "last-modified"
execute:
  echo: true
  eval: true
  warning: false
  freeze: true
---

[With the assistance of ChatGPT]{style="font-size: 14px;"}

## 10 Information Dashboard Design: R methods

### 10.1 Overview

This hands-on session will equip us with the skills to

-   create bullet charts using ggplot2

-   create sparklines using ggplot2, and

-   to develop professional, industry-grade dashboards with R Shiny.

### 10.2 Getting started

The following R packages will be used:

```{r}
pacman::p_load(lubridate, ggthemes, reactable,
reactablefmtr, gt, gtExtras, tidyverse, RODBC)
```

-   [tidyverse](https://www.rdocumentation.org/packages/tidyverse/versions/2.0.0): A collection of R packages for data import, cleaning, manipulation, and visualization (e.g., readr, dplyr, ggplot2, etc.).

-   [lubridate](https://www.rdocumentation.org/packages/lubridate/versions/1.9.4): Simplifies working with dates and times in R.

-   [ggthemes](https://www.rdocumentation.org/packages/ggthemes/versions/5.1.0): Provides additional themes to enhance ggplot2 visualizations.

-   [gtExtras](https://www.rdocumentation.org/packages/gtExtras/versions/0.4.1): Offers helper functions to create attractive tables using the gt package.

-   [reactable](https://www.rdocumentation.org/packages/reactable/versions/0.4.4/topics/reactable): Enables creation of interactive data tables in R using the React Table library.

-   [reactablefmtr](https://www.rdocumentation.org/packages/reactablefmtr/versions/2.0.0): Enhances reactable tables with customizable formatting and styling functions.

-   [RODBC](https://www.rdocumentation.org/packages/RODBC/versions/0.8-3/topics/RODBC): Enhances reactable tables with customizable formatting and styling functions.

### 10.3 Importing Microsoft Access database

#### 10.3.1 The data set

For this study, the *Coffee Chain* personal database in Microsoft Access (.mdb) format will be used.

#### 10.3.2 Importing database into R

The code below uses the `odbcConnectAccess()` function from the RODBC package to import a query table from a database into R.

```{r}
#| eval: FALSE #Display code but not run it

library(RODBC)
con <- odbcConnectAccess2007('rds/Coffee Chain.mdb')
coffeechain <- sqlFetch(con, 'CoffeeChain Query')
write_rds(coffeechain, "rds/CoffeeChain.rds")
odbcClose(con)

```

::: callout-tip
Note: Before running the code, ensure that R is running in the 32-bit version, as `odbcConnectAccess()` is compatible only with 32-bit systems, not 64-bit.
:::

#### 10.3.3 Data Preparation

The code below is used to import *CoffeeChain.rds* into R.

```{r}
coffeechain <- read_rds("rds/CoffeeChain.rds")
```

::: callout-tip
Note: This step is optional if `coffeechain` is already available in R.
:::

The code below is used to aggregate Sales and Budgeted Sales at the Product level.

```{r}
product <- coffeechain %>%
  group_by(`Product`) %>%
  summarise(`target` = sum(`Budget Sales`),
            `current` = sum(`Sales`)) %>%
  ungroup()
```

#### 10.3.4 Bullet chart in `ggplot2`

The codebelow is used to plot the bullet charts using **ggplot2** functions.

```{r}
ggplot(product, aes(Product, current)) + 
  geom_col(aes(Product, max(target) * 1.01),
           fill="grey85", width=0.85) +
  geom_col(aes(Product, target * 0.75),
           fill="grey60", width=0.85) +
  geom_col(aes(Product, target * 0.5),
           fill="grey50", width=0.85) +
  geom_col(aes(Product, current), 
           width=0.35,
           fill = "black") + 
  geom_errorbar(aes(y = target,
                    x = Product, 
                    ymin = target,
                    ymax= target), 
                width = .4,
                colour = "red",
                size = 1) +
  coord_flip()
```


### 10.4 Plotting sparklines using `ggplot2`

In this section, we will learn how to plot *sparklines* by using ggplot2.

#### 10.4.1 Preparing the data

```{r}
sales_report <- coffeechain %>%
  filter(Date >= "2013-01-01") %>%
  mutate(Month = month(Date)) %>%
  group_by(Month, Product) %>%
  summarise(Sales = sum(Sales)) %>%
  ungroup() %>%
  select(Month, Product, Sales)
```

The code below is used to compute the minimum, maximum and end of the month sales.

```{r}
mins <- group_by(sales_report, Product) %>% 
  slice(which.min(Sales))
maxs <- group_by(sales_report, Product) %>% 
  slice(which.max(Sales))
ends <- group_by(sales_report, Product) %>% 
  filter(Month == max(Month))
```

The code below is used to compute the 25 and 75 quantiles.

```{r}
quarts <- sales_report %>%
  group_by(Product) %>%
  summarise(quart1 = quantile(Sales, 
                              0.25),
            quart2 = quantile(Sales, 
                              0.75)) %>%
  right_join(sales_report)
```

#### 10.4.2 sparklines in ggplot2

The code below is used to create sparklines

```{r}
ggplot(sales_report, aes(x=Month, y=Sales)) + 
  facet_grid(Product ~ ., scales = "free_y") + 
  geom_ribbon(data = quarts, aes(ymin = quart1, max = quart2), 
              fill = 'grey90') +
  geom_line(size=0.3) +
  geom_point(data = mins, col = 'red') +
  geom_point(data = maxs, col = 'blue') +
  geom_text(data = mins, aes(label = Sales), vjust = -1) +
  geom_text(data = maxs, aes(label = Sales), vjust = 2.5) +
  geom_text(data = ends, aes(label = Sales), hjust = 0, nudge_x = 0.5) +
  geom_text(data = ends, aes(label = Product), hjust = 0, nudge_x = 1.0) +
  expand_limits(x = max(sales_report$Month) + 
                  (0.25 * (max(sales_report$Month) - min(sales_report$Month)))) +
  scale_x_continuous(breaks = seq(1, 12, 1)) +
  scale_y_continuous(expand = c(0.1, 0)) +
  theme_tufte(base_size = 3, base_family = "Helvetica") +
  theme(axis.title=element_blank(), axis.text.y = element_blank(), 
        axis.ticks = element_blank(), strip.text = element_blank())
```










