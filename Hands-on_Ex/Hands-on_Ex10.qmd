---
title: "Hands-on Exercise 10"
author: "Andrea Yeo"
date-modified: "last-modified"
execute:
  echo: true
  eval: true
  warning: false
  freeze: true
---

[With the assistance of ChatGPT]{style="font-size: 14px;"}

## 10 Information Dashboard Design: R methods

### 10.1 Overview

This hands-on session will equip us with the skills to

-   create bullet charts using ggplot2

-   create sparklines using ggplot2, and

-   to develop professional, industry-grade dashboards with R Shiny.

### 10.2 Getting started

The following R packages will be used:

```{r}
pacman::p_load(lubridate, ggthemes, reactable,
reactablefmtr, gt, gtExtras, tidyverse, readr)
```

-   [tidyverse](https://www.rdocumentation.org/packages/tidyverse/versions/2.0.0): A collection of R packages for data import, cleaning, manipulation, and visualization (e.g., readr, dplyr, ggplot2, etc.).

-   [lubridate](https://www.rdocumentation.org/packages/lubridate/versions/1.9.4): Simplifies working with dates and times in R.

-   [ggthemes](https://www.rdocumentation.org/packages/ggthemes/versions/5.1.0): Provides additional themes to enhance ggplot2 visualizations.

-   [gtExtras](https://www.rdocumentation.org/packages/gtExtras/versions/0.4.1): Offers helper functions to create attractive tables using the gt package.

-   [reactable](https://www.rdocumentation.org/packages/reactable/versions/0.4.4/topics/reactable): Enables creation of interactive data tables in R using the React Table library.

-   [reactablefmtr](https://www.rdocumentation.org/packages/reactablefmtr/versions/2.0.0): Enhances reactable tables with customizable formatting and styling functions.

-   [RODBC](https://www.rdocumentation.org/packages/RODBC/versions/0.8-3/topics/RODBC): Provides functions to connect R to databases via ODBC, allowing data import from sources like Microsoft Access.

-   [readr](https://www.rdocumentation.org/packages/readr/versions/1.3.1): Offers fast and friendly functions to read and write rectangular data (like CSV and RDS files) into R.

### 10.3 Importing Microsoft Access database

#### 10.3.1 The data set

For this study, the *Coffee Chain* personal database in Microsoft Access (.mdb) format will be used.

#### 10.3.2 Importing database into R

The code below uses the `odbcConnectAccess()` function from the RODBC package to import a query table from a database into R.

```{r}
#| eval: FALSE #Display code but not run it

library(RODBC)
con <- odbcConnectAccess2007('rds/Coffee Chain.mdb')
coffeechain <- sqlFetch(con, 'CoffeeChain Query')
write_rds(coffeechain, "rds/CoffeeChain.rds")
odbcClose(con)

```

::: callout-tip
Note: Before running the code, ensure that R is running in the 32-bit version, as `odbcConnectAccess()` is compatible only with 32-bit systems, not 64-bit.
:::

#### 10.3.3 Data Preparation

The code below is used to import *CoffeeChain.rds* into R.

```{r}
coffeechain <- read_rds("rds/CoffeeChain.rds")
```

::: callout-tip
Note: This step is optional if `coffeechain` is already available in R.
:::

The code below is used to aggregate Sales and Budgeted Sales at the Product level.

```{r}
product <- coffeechain %>%
  group_by(`Product`) %>%
  summarise(`target` = sum(`Budget Sales`),
            `current` = sum(`Sales`)) %>%
  ungroup()
```

#### 10.3.4 Bullet chart in `ggplot2`

The codebelow is used to plot the bullet charts using **ggplot2** functions.

```{r}
ggplot(product, aes(Product, current)) + 
  geom_col(aes(Product, max(target) * 1.01),
           fill="grey85", width=0.85) +
  geom_col(aes(Product, target * 0.75),
           fill="grey60", width=0.85) +
  geom_col(aes(Product, target * 0.5),
           fill="grey50", width=0.85) +
  geom_col(aes(Product, current), 
           width=0.35,
           fill = "black") + 
  geom_errorbar(aes(y = target,
                    x = Product, 
                    ymin = target,
                    ymax= target), 
                width = .4,
                colour = "red",
                linewidth = 1) +
  coord_flip()
```


### 10.4 Plotting sparklines using `ggplot2`

In this section, we will learn how to plot *sparklines* by using ggplot2.

#### 10.4.1 Preparing the data

```{r}
sales_report <- coffeechain %>%
  filter(Date >= "2013-01-01") %>%
  mutate(Month = month(Date)) %>%
  group_by(Month, Product) %>%
  summarise(Sales = sum(Sales)) %>%
  ungroup() %>%
  select(Month, Product, Sales)
```

The code below is used to compute the minimum, maximum and end of the month sales.

```{r}
mins <- group_by(sales_report, Product) %>% 
  slice(which.min(Sales))
maxs <- group_by(sales_report, Product) %>% 
  slice(which.max(Sales))
ends <- group_by(sales_report, Product) %>% 
  filter(Month == max(Month))
```

The code below is used to compute the 25 and 75 quantiles.

```{r}
quarts <- sales_report %>%
  group_by(Product) %>%
  summarise(quart1 = quantile(Sales, 
                              0.25),
            quart2 = quantile(Sales, 
                              0.75)) %>%
  right_join(sales_report)
```

#### 10.4.2 sparklines in ggplot2

The code below is used to create sparklines

```{r}
ggplot(sales_report, aes(x=Month, y=Sales)) + 
  facet_grid(Product ~ ., scales = "free_y") + 
  geom_ribbon(data = quarts, aes(ymin = quart1, max = quart2), 
              fill = 'grey90') +
  geom_line(size=0.3) +
  geom_point(data = mins, col = 'red') +
  geom_point(data = maxs, col = 'blue') +
  geom_text(data = mins, aes(label = Sales), vjust = -1) +
  geom_text(data = maxs, aes(label = Sales), vjust = 2.5) +
  geom_text(data = ends, aes(label = Sales), hjust = 0, nudge_x = 0.5) +
  geom_text(data = ends, aes(label = Product), hjust = 0, nudge_x = 1.0) +
  expand_limits(x = max(sales_report$Month) + 
                  (0.25 * (max(sales_report$Month) - min(sales_report$Month)))) +
  scale_x_continuous(breaks = seq(1, 12, 1)) +
  scale_y_continuous(expand = c(0.1, 0)) +
  theme_tufte(base_size = 3, base_family = "Helvetica") +
  theme(axis.title=element_blank(), axis.text.y = element_blank(), 
        axis.ticks = element_blank(), strip.text = element_blank())
```

### 10.5 Static Information Dashboard Design: `gt` and `gtExtras` methods

In this section, we will learn how to create a static information dashboard using the [gt](https://www.rdocumentation.org/packages/gt/versions/0.1.0) and [gtExtras](https://www.rdocumentation.org/packages/gtExtras/versions/0.4.1) packages. 

Before diving in, it will be strongly recommended to visit the official webpages of both packages and review the available materials.

#### 10.5.1 Plotting a simple bullet chart

In this section, we will learn how to prepare a bullet report by using functions of [gt](https://www.rdocumentation.org/packages/gt/versions/0.1.0) and [gtExtras](https://www.rdocumentation.org/packages/gtExtras/versions/0.4.1) packages. 

```{r}
product %>%
  gt::gt() %>%
  gt_plt_bullet(column = current, 
              target = target, 
              width = 60,
              palette = c("pink", 
                          "green")) %>%
  gt_theme_538()
```

### 10.6 sparklines: gtExtras method

Before generating the product-level sales report using `gtExtras` functions, the following code chunk is used to prepare the data.

```{r}
report <- coffeechain %>%
  mutate(Year = year(Date)) %>%
  filter(Year == "2013") %>%
  mutate (Month = month(Date, 
                        label = TRUE, 
                        abbr = TRUE)) %>%
  group_by(Product, Month) %>%
  summarise(Sales = sum(Sales)) %>%
  ungroup()
```

::: callout-tip
Note: Most **gtExtras** functions require a data frame with list columns. To meet this requirement, the code chunk below will convert the report data frame into the appropriate format using list columns.
:::

```{r}
report %>%
  group_by(Product) %>%
  summarize('Monthly Sales' = list(Sales), 
            .groups = "drop")
```

#### 10.6.1 Plotting Coffechain Sales report

```{r}
report %>%
  group_by(Product) %>%
  summarize('Monthly Sales' = list(Sales), 
            .groups = "drop") %>%
   gt() %>%
   gt_plt_sparkline('Monthly Sales',
                    same_limit = FALSE)
```


#### 10.6.2 Adding statistics

We can also add statistics to the data.table. First, we calculate the statistics. 

```{r}
report %>% 
  group_by(Product) %>% 
  summarise("Min" = min(Sales, na.rm = T),
            "Max" = max(Sales, na.rm = T),
            "Average" = mean(Sales, na.rm = T)
            ) %>%
  gt() %>%
  fmt_number(columns = 4,
    decimals = 2)
```

#### 10.6.3 Combining the data.frame

Next, we incorporate the statistics on the table.

```{r}
spark <- report %>%
  group_by(Product) %>%
  summarize('Monthly Sales' = list(Sales), 
            .groups = "drop")
```

```{r}
sales <- report %>% 
  group_by(Product) %>% 
  summarise("Min" = min(Sales, na.rm = T),
            "Max" = max(Sales, na.rm = T),
            "Average" = mean(Sales, na.rm = T)
            )
```

```{r}
sales_data = left_join(sales, spark)
```

#### 10.6.4 Plotting the updated data.table

```{r}
sales_data %>%
  gt() %>%
  gt_plt_sparkline('Monthly Sales',
                   same_limit = FALSE)
```

#### 10.6.5 Combining bullet chart and sparklines

We can combine the bullet chart and sparklines using the steps below:

```{r}
bullet <- coffeechain %>%
  filter(Date >= "2013-01-01") %>%
  group_by(`Product`) %>%
  summarise(`Target` = sum(`Budget Sales`),
            `Actual` = sum(`Sales`)) %>%
  ungroup() 
```

```{r}
sales_data = sales_data %>%
  left_join(bullet)
```

```{r}
sales_data %>%
  gt() %>%
  gt_plt_sparkline('Monthly Sales') %>%
  gt_plt_bullet(column = Actual, 
                target = Target, 
                width = 28,
                palette = c("pink", 
                          "green")) %>%
  gt_theme_538()
```

### 10.7 Interactive Information Dashboard Design: reactable and reactablefmtr methods

In this section, we will learn how to create an interactive information dashboard using the [reactable](https://www.rdocumentation.org/packages/reactable/versions/0.4.4/topics/reactable) and [reactablefmtr](https://www.rdocumentation.org/packages/reactablefmtr/versions/2.0.0) packages.

To create interactive sparklines, you'll also need to install the [dataui](https://github.com/timelyportfolio/dataui) package using the code provided below.

```{r}
remotes::install_github("timelyportfolio/dataui")
```

```{r}
library(dataui)
```

#### 10.7.1 Plotting interactive sparklines

Similar to `gtExtras`, creating interactive sparklines with the `reactablefmtr` package requires preparing a list column in the data. 

The code below is used to transform the data accordingly.

```{r}
report <- report %>%
  group_by(Product) %>%
  summarize(`Monthly Sales` = list(Sales))
```

Next, [react_sparkline](https://kcuilla.github.io/reactablefmtr/reference/react_sparkline.html) will be to plot the sparklines as shown below.

```{r}
reactable(
  report,
  columns = list(
    Product = colDef(maxWidth = 200),
    `Monthly Sales` = colDef(
      cell = react_sparkline(report)
    )
  )
)
```

#### 10.7.2 Changing the pagesize

By default, the page size is set to 10. In the code chunk below, the `defaultPageSize` argument is used to customize this setting.

```{r}
reactable(
  report,
  defaultPageSize = 13,
  columns = list(
    Product = colDef(maxWidth = 200),
    `Monthly Sales` = colDef(
      cell = react_sparkline(report)
    )
  )
)
```

#### 10.7.3 Adding points and labels

In the code below, the `highlight_points` argument is used to display the minimum and maximum value points, while the `label` argument labels the first and last values in the sparkline.

```{r}
reactable(
  report,
  defaultPageSize = 13,
  columns = list(
    Product = colDef(maxWidth = 200),
    `Monthly Sales` = colDef(
      cell = react_sparkline(
        report,
        highlight_points = highlight_points(
          min = "red", max = "blue"),
        labels = c("first", "last")
        )
    )
  )
)
```

#### 10.7.4 Adding reference line

In the code below, `statline` argument is used to show the mean line.

```{r}
reactable(
  report,
  defaultPageSize = 13,
  columns = list(
    Product = colDef(maxWidth = 200),
    `Monthly Sales` = colDef(
      cell = react_sparkline(
        report,
        highlight_points = highlight_points(
          min = "red", max = "blue"),
        statline = "mean"
        )
    )
  )
)
```

#### 10.7.5 Adding bandline

Instead of adding reference line, bandline can be added by using the bandline argument.

```{r}
reactable(
  report,
  defaultPageSize = 13,
  columns = list(
    Product = colDef(maxWidth = 200),
    `Monthly Sales` = colDef(
      cell = react_sparkline(
        report,
        highlight_points = highlight_points(
          min = "red", max = "blue"),
        line_width = 1,
        bandline = "innerquartiles",
        bandline_color = "green"
        )
    )
  )
)
```

#### 10.7.6 Changing from sparkline to sparkbar

Instead of displaying the values as sparklines, we can also display them as sparkbars as shown below.

```{r}
reactable(
  report,
  defaultPageSize = 13,
  columns = list(
    Product = colDef(maxWidth = 200),
    `Monthly Sales` = colDef(
      cell = react_sparkbar(
        report,
        highlight_bars = highlight_bars(
          min = "red", max = "blue"),
        bandline = "innerquartiles",
        statline = "mean")
    )
  )
)
```

### 10.8 References

-   Kam, T.S(2024). [Visual Statistical Analysis.](https://r4va.netlify.app/chap31)

### 10.9 Takeaway

::: callout-tip
## Key takeaways

-   XXXX
:::

### 10.10 Further exploration
Using the **Coffee Chain** dataset, I explored how sales performance varies across different products by month. The goal was to create an **interactive dashboard** using the `reactable` and `reactablefmtr` packages that not only visualizes monthly sales trends (via sparkbars) but also highlights key performance metrics such as **minimum, maximum, average, and total sales**.

Additionally, I introduced a simple **KPI-style performance indicator** to classify products as "Good" or "Low" performers based on their average sales.

::: panel-tabset

## graph()

```{r}
#| echo: false #hide code but code will run, graph shows

library(dplyr); library(reactable); library(reactablefmtr)

# Step 1: Calculate summary statistics
sales_summary <- report %>%
  mutate(
    Min = sapply(`Monthly Sales`, min),
    Max = sapply(`Monthly Sales`, max),
    Average = sapply(`Monthly Sales`, mean),
    Total = sapply(`Monthly Sales`, sum)
  )

# Step 2: Add performance KPI based on average
avg_threshold <- mean(sales_summary$Average)
sales_summary$Status <- ifelse(
  sales_summary$Average >= avg_threshold, "Good", "Low"
)

# Step 3: Build the enhanced reactable dashboard
reactable(
  sales_summary,
  defaultPageSize = 13,
  columns = list(
    
    Product = colDef(
      name = "Product",
      maxWidth = 150,
      align = "center",
      style = color_scales(sales_summary, colors = c("#f7fcf5", "#238b45")),
      sortable = TRUE
    ),
    
    `Monthly Sales` = colDef(
      name = "Monthly Trend",
      maxWidth = 150,
      align = "center",
      cell = react_sparkbar(
        data = sales_summary,
        highlight_bars = highlight_bars(min = "red", max = "blue"),
        bandline = "innerquartiles",
        statline = "mean"
      )
    ),
    
    Min = colDef(
      name = "Min",
      maxWidth = 150,
      align = "center",
      format = colFormat(digits = 0),
      style = color_tiles(sales_summary, colors = c("white", "#fdd0a2")),
      sortable = TRUE
    ),
    
    Max = colDef(
      name = "Max",
      maxWidth = 150,
      align = "center",
      format = colFormat(digits = 0),
      style = color_tiles(sales_summary, colors = c("white", "#a6bddb")),
      sortable = TRUE
    ),
    
    Average = colDef(
      name = "Avg",
      maxWidth = 150,
      align = "center",
      format = colFormat(digits = 0),
      style = color_tiles(sales_summary, colors = c("white", "#c7e9c0")),
      sortable = TRUE
    ),
    
    Total = colDef(
      name = "Total Sales",
      maxWidth = 150,
      align = "center",
      format = colFormat(digits = 0, separators = TRUE),
      style = color_tiles(sales_summary, colors = c("white", "#fee08b")),
      sortable = TRUE
    ),
    
    Status = colDef(
      name = "Performance",
      maxWidth = 150,
      align = "center",
      style = list(fontWeight = "bold", fontSize = "12px"),
      sortable = FALSE
    )
  ),
  bordered = TRUE,
  striped = TRUE,
  highlight = TRUE,
  theme = reactableTheme(
    style = list(
      fontFamily = "Segoe UI, sans-serif",
      fontSize = "12px"
    )
  )
)
```

## code()
```{r}
#| eval: false #code will not run, but code will show

library(dplyr); library(reactable); library(reactablefmtr)

# Step 1: Calculate summary statistics
sales_summary <- report %>%
  mutate(
    Min = sapply(`Monthly Sales`, min),
    Max = sapply(`Monthly Sales`, max),
    Average = sapply(`Monthly Sales`, mean),
    Total = sapply(`Monthly Sales`, sum)
  )

# Step 2: Add performance KPI based on average
avg_threshold <- mean(sales_summary$Average)
sales_summary$Status <- ifelse(
  sales_summary$Average >= avg_threshold, "Good", "Low"
)

# Step 3: Build the enhanced reactable dashboard
reactable(
  sales_summary,
  defaultPageSize = 13,
  columns = list(
    
    Product = colDef(
      name = "Product",
      maxWidth = 150,
      align = "center",
      style = color_scales(sales_summary, colors = c("#f7fcf5", "#238b45")),
      sortable = TRUE
    ),
    
    `Monthly Sales` = colDef(
      name = "Monthly Trend",
      maxWidth = 150,
      align = "center",
      cell = react_sparkbar(
        data = sales_summary,
        highlight_bars = highlight_bars(min = "red", max = "blue"),
        bandline = "innerquartiles",
        statline = "mean"
      )
    ),
    
    Min = colDef(
      name = "Min",
      maxWidth = 150,
      align = "center",
      format = colFormat(digits = 0),
      style = color_tiles(sales_summary, colors = c("white", "#fdd0a2")),
      sortable = TRUE
    ),
    
    Max = colDef(
      name = "Max",
      maxWidth = 150,
      align = "center",
      format = colFormat(digits = 0),
      style = color_tiles(sales_summary, colors = c("white", "#a6bddb")),
      sortable = TRUE
    ),
    
    Average = colDef(
      name = "Avg",
      maxWidth = 150,
      align = "center",
      format = colFormat(digits = 0),
      style = color_tiles(sales_summary, colors = c("white", "#c7e9c0")),
      sortable = TRUE
    ),
    
    Total = colDef(
      name = "Total Sales",
      maxWidth = 150,
      align = "center",
      format = colFormat(digits = 0, separators = TRUE),
      style = color_tiles(sales_summary, colors = c("white", "#fee08b")),
      sortable = TRUE
    ),
    
    Status = colDef(
      name = "Performance",
      maxWidth = 150,
      align = "center",
      style = list(fontWeight = "bold", fontSize = "12px"),
      sortable = FALSE
    )
  ),
  bordered = TRUE,
  striped = TRUE,
  highlight = TRUE,
  theme = reactableTheme(
    style = list(
      fontFamily = "Segoe UI, sans-serif",
      fontSize = "12px"
    )
  )
)
```

::: 

### 10.11 Further exploration

To enhance interpretability of the static dashboard, I calculated the percentage difference between actual and target sales, using conditional formatting to clearly distinguish over- and under-performance (green for positive, red for negative). 

Additionally, I introduced a ranking system based on average monthly sales, allowing easy identification of top-performing products and those that may require further attention. 

::: callout-note
-   Although Colombian ranks 1st in average monthly sales, it still underperforms against its target by 2.5%. This suggests that strong sales don’t always guarantee goal achievement—expectations may have been too high or recent performance may have declined.
:::

::: panel-tabset

## graph()

```{r}
#| echo: false #hide code but code will run, graph shows

library(dplyr); library(gt); library(gtExtras)

# Rebuild the 'report'
report <- coffeechain %>%
  mutate(Year = lubridate::year(Date)) %>%
  filter(Year == 2013) %>%
  mutate(Month = lubridate::month(Date, label = TRUE, abbr = TRUE)) %>%
  group_by(Product, Month) %>%
  summarise(Sales = sum(Sales, na.rm = TRUE), .groups = "drop")

# Step 1: Create sparkline + summary data
spark <- report %>%
  group_by(Product) %>%
  summarise(`Monthly Sales` = list(Sales), .groups = "drop")

sales <- report %>%
  group_by(Product) %>%
  summarise(
    Min = min(Sales, na.rm = TRUE),
    Max = max(Sales, na.rm = TRUE),
    Average = mean(Sales, na.rm = TRUE)
  )

sales_data <- left_join(sales, spark)

# Step 2: Add bullet chart data
bullet <- coffeechain %>%
  filter(Date >= "2013-01-01") %>%
  group_by(Product) %>%
  summarise(
    Target = sum(`Budget Sales`),
    Actual = sum(Sales)
  ) %>%
  ungroup()

sales_data <- left_join(sales_data, bullet)

# Step 3: Add percentage difference column (Actual vs Target) and Ranking
sales_data <- sales_data %>%
  mutate(
    DiffPct = round((Actual - Target) / Target * 100, 1),
    Rank = dense_rank(desc(Average))  # 1 = best, higher number = lower sales
  )

# Step 4: Build enhanced table
sales_data %>%
  gt() %>%
  gt_plt_sparkline(`Monthly Sales`, same_limit = FALSE) %>%
  gt_plt_bullet(column = Actual, target = Target, width = 28, palette = c("lightblue", "black")) %>%
  text_transform(
    locations = cells_body(vars(DiffPct)),
    fn = function(x) {
      dplyr::case_when(
        as.numeric(x) > 0 ~ paste0("<span style='color:green;'>", x, "%</span>"),
        as.numeric(x) < 0 ~ paste0("<span style='color:red;'>", x, "%</span>"),
        TRUE ~ paste0("<span>", x, "%</span>")
      )
    }
  ) %>%
  cols_label(
    DiffPct = "Actual vs Target",
    Rank = "Rank by highest avg sales"
  ) %>%
  cols_move_to_start(columns = vars(Rank)) %>%  # Move Rank to the front
  gt_theme_538()

```

## code()

```{r}
#| eval: false #code will not run, but code will show


library(dplyr); library(gt); library(gtExtras)

# Rebuild the 'report'
report <- coffeechain %>%
  mutate(Year = lubridate::year(Date)) %>%
  filter(Year == 2013) %>%
  mutate(Month = lubridate::month(Date, label = TRUE, abbr = TRUE)) %>%
  group_by(Product, Month) %>%
  summarise(Sales = sum(Sales, na.rm = TRUE), .groups = "drop")

# Step 1: Create sparkline + summary data
spark <- report %>%
  group_by(Product) %>%
  summarise(`Monthly Sales` = list(Sales), .groups = "drop")

sales <- report %>%
  group_by(Product) %>%
  summarise(
    Min = min(Sales, na.rm = TRUE),
    Max = max(Sales, na.rm = TRUE),
    Average = mean(Sales, na.rm = TRUE)
  )

sales_data <- left_join(sales, spark)

# Step 2: Add bullet chart data
bullet <- coffeechain %>%
  filter(Date >= "2013-01-01") %>%
  group_by(Product) %>%
  summarise(
    Target = sum(`Budget Sales`),
    Actual = sum(Sales)
  ) %>%
  ungroup()

sales_data <- left_join(sales_data, bullet)

# Step 3: Add percentage difference column (Actual vs Target) and Ranking
sales_data <- sales_data %>%
  mutate(
    DiffPct = round((Actual - Target) / Target * 100, 1),
    Rank = dense_rank(desc(Average))  # 1 = best, higher number = lower sales
  )

# Step 4: Build enhanced table
sales_data %>%
  gt() %>%
  gt_plt_sparkline(`Monthly Sales`, same_limit = FALSE) %>%
  gt_plt_bullet(column = Actual, target = Target, width = 28, palette = c("lightblue", "black")) %>%
  text_transform(
    locations = cells_body(vars(DiffPct)),
    fn = function(x) {
      dplyr::case_when(
        as.numeric(x) > 0 ~ paste0("<span style='color:green;'>", x, "%</span>"),
        as.numeric(x) < 0 ~ paste0("<span style='color:red;'>", x, "%</span>"),
        TRUE ~ paste0("<span>", x, "%</span>")
      )
    }
  ) %>%
  cols_label(
    DiffPct = "Actual vs Target",
    Rank = "Rank by highest avg sales"
  ) %>%
  cols_move_to_start(columns = vars(Rank)) %>%  # Move Rank to the front
  gt_theme_538()

```


::: 






