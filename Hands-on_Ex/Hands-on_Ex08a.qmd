---
title: "Hands-on Exercise 08a"
author: "Andrea Yeo"
date-modified: "last-modified"
execute:
  echo: true
  eval: true
  warning: false
  freeze: true
---

[With the assistance of ChatGPT]{style="font-size: 14px;"}

## 8 Choropleth Mapping with R

### 8.1 Overview

Choropleth mapping visualizes data by shading enumeration units (e.g., countries, provinces, or census areas) using patterns or graduated colors. For instance, a social scientist may use a choropleth map to illustrate the distribution of Singapore’s aged population by Master Plan 2014 Subzone Boundary.

This chapter introduces the tmap package in R for creating effective and accurate choropleth maps.

### 8.2 Installing and loading R packages

This hands-on exercise utilizes the tmap package in R for choropleth mapping. Additionally, four other R packages are used:

-   [readr](https://www.rdocumentation.org/packages/readr/versions/1.3.1) (for importing delimited text files)

-   [tidyr](https://www.rdocumentation.org/packages/tidyr/versions/1.3.1) (for tidying data)

-   [dplyr](https://www.rdocumentation.org/packages/dplyr/versions/0.7.8) (for data wrangling)

-   [sf](https://www.rdocumentation.org/packages/sf/versions/0.1-1) (for handling geospatial data)

**readr**,**tidyr** and **dplyr** are part of **tidyverse** package.

```{r}
pacman::p_load(sf, tmap, tidyverse)
```

### 8.3 Importing data into R

#### 8.3.1 The data

Two datasets will be used to create the choropleth map:

-   Master Plan 2014 Subzone Boundary (Web) (`MP14_SUBZONE_WEB_PL`) – A geospatial dataset in ESRI shapefile format, available on [data.gov.sg](https://data.gov.sg/). It provides Singapore’s planning subzone boundaries based on URA Master Plan 2014.

-   Singapore Residents by Planning Area/Subzone (2011–2020) – An aspatial dataset in CSV format (i.e.`respopagesextod2011to2020.csv`), available from the [Department of Statistics](https://www.singstat.gov.sg/), Singapore. While it lacks coordinate values, its PA and SZ fields serve as unique identifiers for geocoding with the `MP14_SUBZONE_WEB_PL` shapefile.

#### 8.3.2 Importing Geospatial Data into R

The `st_read()` function from the [sf](https://www.rdocumentation.org/packages/sf/versions/0.1-1)) package is used to import the `MP14_SUBZONE_WEB_PL` shapefile into R as a simple feature data frame named `mpsz`.

```{r}
mpsz <- st_read(dsn = "data/data/geospatial", 
                layer = "MP14_SUBZONE_WEB_PL")
```

We can examine the content of `mpsz` by using the code below.

```{r}
mpsz
```

#### 8.3.3 Importing Attribute Data into R

The `read_csv()` function from the **readr** package is used to import the `respopagsex2011to2020.csv` file into RStudio, storing it as a data frame named *popagsex*.

```{r}
popdata <- read_csv("data/data/aspatial/respopagesextod2011to2020.csv")
```

#### 8.3.4 Data preparation

Before creating a thematic map, a data table for year 2020 must be prepared, including the variables PA, SZ, YOUNG, ECONOMY ACTIVE, AGED, TOTAL, and DEPENDENCY. The categories are defined as:

-   YOUNG: Ages 0-24
-   ECONOMY ACTIVE: Ages 25-64
-   AGED: Ages 65 and above
-   TOTAL: Sum of all age groups
-   DEPENDENCY: Ratio of (YOUNG + AGED) / ECONOMY ACTIVE

##### 8.3.4.1 Data wrangling

The data wrangling and transformation will involve:

-   pivot_wider() (from tidyr) to reshape data
-   mutate() (from dplyr) to create new variables
-   filter() (from dplyr) to select data for the year 2020
-   group_by() (from dplyr) to aggregate data by PA, SZ, AG
-   select() (from dplyr) to keep only relevant columns

```{r}
popdata2020 <- popdata %>%
  filter(Time == 2020) %>%
  group_by(PA, SZ, AG) %>%
  summarise(POP = sum(Pop), .groups = "drop") %>%  # Override grouping behavior
  pivot_wider(names_from = AG, values_from = POP) %>%
  mutate(YOUNG = rowSums(.[3:6]) + rowSums(.[12])) %>%
  mutate(`ECONOMY ACTIVE` = rowSums(.[7:11]) + rowSums(.[13:15])) %>%
  mutate(`AGED` = rowSums(.[16:21])) %>%
  mutate(`TOTAL` = rowSums(.[3:21])) %>%
  mutate(`DEPENDENCY` = (`YOUNG` + `AGED`) / `ECONOMY ACTIVE`) %>%
  select(PA, SZ, YOUNG, `ECONOMY ACTIVE`, AGED, TOTAL, DEPENDENCY)

```

##### 8.3.4.2 Joining the attribute data and geospatial data

Before performing the georelational join, PA and SZ values must be converted to uppercase to match SUBZONE_N and PLN_AREA_N, which are already in uppercase. This ensures consistency for accurate data merging.

```{r}
popdata2020 <- popdata2020 %>%
  mutate_at(.vars = vars(PA, SZ), 
          .funs = funs(toupper)) %>%
  filter(`ECONOMY ACTIVE` > 0)
```

The left_join() function from dplyr is used to merge the geographical data with the attribute table, using SUBZONE_N (from the spatial dataset) and SZ (from the attribute dataset) as the common identifier.

```{r}
mpsz_pop2020 <- left_join(mpsz, popdata2020,
                          by = c("SUBZONE_N" = "SZ"))
```

The left_join() function from dplyr is used with `mpsz`, the simple feature data frame, as the left table. This ensures that the output remains a simple features data frame, preserving its spatial properties.

```{r}
write_rds(mpsz_pop2020, "data/data/rds/mpszpop2020.rds")
```

### 8.4 Choropleth Mapping Geospatial Data Using *tmap*

There are two approaches to creating a thematic map with *tmap*:

-   Quick Mapping – Using `qtm()` for a fast, simple thematic map.
-   Custom Mapping – Using `tmap` elements for a highly customizable map.

#### 8.4.1 Plotting a choropleth map quickly by using *qtm()*

The `qtm()` function in **tmap** provides the easiest and quickest way to create a choropleth map. It offers a concise syntax and generates a cartographic-standard map with good default visualization.

Static visualization:

```{r}
tmap_mode("plot")
qtm(mpsz_pop2020, 
    fill = "DEPENDENCY")
```

Interactive visualization:

```{r}
tmap_options(check.and.fix = TRUE)  # Enable automatic polygon fixing

tmap_mode("view")  # Enable interactive mode

qtm(mpsz_pop2020, fill = "DEPENDENCY")
```

Key takeaways from the code:

-   `tmap_mode("plot")` produces a static map, while - `tmap_mode("view")` enables interactive mode.
-   The *fill* argument maps the chosen attribute (e.g., DEPENDENCY) to the choropleth visualization.

#### 8.4.2 Creating a choropleth map by using *tmap’s* elements

While `qtm()` allows for quick and easy choropleth mapping, it limits control over aesthetics. For high-quality cartographic maps, *tmap's* drawing elements should be used to provide greater customization and refinement.

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY", 
          style = "quantile", 
          palette = "Blues",
          title = "Dependency ratio") +
  tm_layout(main.title = "Distribution of Dependency Ratio by planning subzone",
            main.title.position = "center",
            main.title.size = 1.2,
            legend.height = 0.45, 
            legend.width = 0.35,
            frame = TRUE) +
  tm_borders(alpha = 0.5) +
  tm_compass(type="8star", size = 2) +
  tm_scale_bar() +
  tm_grid(alpha =0.2) +
  tm_credits("Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\n and Population data from Department of Statistics DOS", 
             position = c("left", "bottom"))
```

The next section introduces tmap functions used to plot and customize various map elements for enhanced visualization.

##### 8.4.2.1 Drawing a base map

The core structure of tmap begins with `tm_shape()` to define the input data (mpsz_pop2020), followed by layer elements like `tm_fill()` and `tm_polygons()` to render the planning subzone polygons.

```{r}
tm_shape(mpsz_pop2020) +
  tm_polygons()
```

##### 8.4.2.2 Drawing a choropleth map using *tm_polygons()*

To create a choropleth map, assign the target variable (e.g., *Dependency*) to *tm_polygons()*, which visualizes its geographical distribution by planning subzone.

```{r}
tm_shape(mpsz_pop2020)+
  tm_polygons("DEPENDENCY")
```

Key Takeaways from *tm_polygons()*:

-   The default interval binning method is "pretty" (discussed further in Section 4.3).
-   The default color scheme is YlOrRd from ColorBrewer (covered in Section 4.4).
-   Missing values are automatically shaded in grey.

##### 8.4.2.3 Drawing a choropleth map using *tm_fill()* and *tm_border()*

`tm_polygons()` is a wrapper for `tm_fill()` and `tm_borders()`. The `tm_fill()` function shades the polygons using the default color scheme, while `tm_borders()` adds the shapefile’s borders to the choropleth map. When using `tm_fill()` alone, the map displays only the color-filled polygons without borders.

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY")
```

The planning subzones are shaded based on their dependency values. To add boundaries to these subzones, `tm_borders()` is used, enhancing the clarity of the choropleth map.

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY") +
  tm_borders(lwd = 0.1,  alpha = 1)
```

Key Takeaways for `tm_borders()`:

-   Light-gray borders are added to the choropleth map.

-   `alpha` argument controls transparency (0 = fully transparent, 1 = opaque).

-   Additional `tm_borders()` arguments:

    -   `col` = Border color

    -   `lwd` = Border line width (default = 1)

    -   `lty` = Border line type (default = "solid")

#### 8.4.3 Data classification methods of tmap

Choropleth maps use data classification to group observations into data ranges or classes.

tmap supports ten classification methods, including fixed, sd, equal, pretty (default), quantile, kmeans, hclust, bclust, fisher, and jenks.

The classification method is set using the style argument in `tm_fill()` or `tm_polygons()`.

##### 8.4.3.1 Plotting choropleth maps with built-in classification methods

The code below shows a quantile data classification that used 5 classes.

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 5,
          style = "jenks") +
  tm_borders(alpha = 0.5)
```

In the code chunk below, equal data classification method is used.

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 5,
          style = "equal") +
  tm_borders(alpha = 0.5)
```

Notice that the distribution of quantile data classification method are more evenly distributed then equal data classification method.

Quantile, Equal, Jenks, kmeans, sd and hclust data classification with 2 classes:-

::: panel-tabset
## Quantile()

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 2,
          style = "quantile") +
  tm_borders(alpha = 0.5)
```

## Equal()

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 2,
          style = "equal") +
  tm_borders(alpha = 0.5)
```

## Jenks()

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 2,
          style = "jenks") +
  tm_borders(alpha = 0.5)
```

## Kmeans()

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 2,
          style = "kmeans") +
  tm_borders(alpha = 0.5)
```

## sd()

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 2,
          style = "sd") +
  tm_borders(alpha = 0.5)
```

## Hclust()

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 2,
          style = "hclust") +
  tm_borders(alpha = 0.5)
```
:::

Quantile, Equal, Jenks, kmeans, sd and hclust data classification with 10 classes:-

::: panel-tabset
## Quantile()

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 10,
          style = "quantile") +
  tm_borders(alpha = 0.5)
```

## Equal()

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 10,
          style = "equal") +
  tm_borders(alpha = 0.5)
```

## Jenks()

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 10,
          style = "jenks") +
  tm_borders(alpha = 0.5)
```

## Kmeans()

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 10,
          style = "kmeans") +
  tm_borders(alpha = 0.5)
```

## sd()

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 10,
          style = "sd") +
  tm_borders(alpha = 0.5)
```

## Hclust()

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 10,
          style = "hclust") +
  tm_borders(alpha = 0.5)
```
:::

| Classification method | Description | Impact on map |
|----|----|----|
| Quantile() | Ensures each class has an equal number of observations | Highlights rank order, but class intervals may vary greatly |
| Equal() | Divides data into equal-width ranges. | Works well for uniform data, but can misrepresent skewed data |
| Jenks() | Minimizes **within-class variance** while maximizing **between-class variance**. | Creates **optimal** breaks for data with **clusters**. |
| Kmeans() | Uses clustering to find **natural groupings** in the data | Adapts to **data patterns**, good for **non-uniform distributions** |
| sd() | Creates classes based on **standard deviation (SD) units** from the **mean**. Typically, the breaks are at ±1 SD, ±2 SD, etc. | Highlights **deviations from the mean**, useful for detecting **outliers** and **extremes**. Works best with **normally distributed** data |
| Hclust() | Uses **hierarchical clustering** to group data into classes based on **similarity** | Adapts to **data structure**, but class **boundaries may not be intuitive**. Best for **data with natural clusters** |

::: callout-tip
## Key takeaways

-   **Equal and Quantile methods** tend to oversimplify or distort distributions.
-   **Jenks** produce more natural groupings for skewed data.
-   **K-Means** and **HClust** adapt to underlying data structure, useful for complex datasets.
-   **`sd()`** is useful when identifying variations around a mean (e.g., economic or demographic trends).
-   **`hclust()`** is useful when dealing with naturally clustered data (e.g., identifying regions with similar characteristics)
:::

| Number of classes | Effect on Map |
|-------------------|-----------------------------------------------------|
| 2 classes | Overly generalized, loses detail. Only major trends are visible. |
| 10 classes | More nuanced, but may introduce color complexity. |

::: callout-tip
## Key takeaways

-   Fewer classes: Good for broad trends, but may oversimplify variations
-   More classes: Good for detailed analysis, but too many classes can create visual noise and make interpretation difficult
:::

##### 8.4.3.2 Plotting choropleth maps with built-in classification methods

To override default category breaks in tmap, use the breaks argument in tm_fill(), specifying n+1 elements for n categories (in increasing order).

Before setting breakpoints, it's best practice to compute descriptive statistics of the target variable (e.g., DEPENDENCY) to ensure meaningful class intervals. The provided code calculates and displays these statistics.

```{r}
summary(mpsz_pop2020$DEPENDENCY)
```
Based on the descriptive statistics, breakpoints are set at 0.60, 0.70, 0.80, and 0.90, with minimum (0) and maximum (1.00) included. 

We will plot the choropleth map by using the code below.

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          breaks = c(0, 0.60, 0.70, 0.80, 0.90, 1.00)) +
  tm_borders(alpha = 0.5)
```

#### 8.4.4 Colour scheme
`tmap` supports colour ramps either defined by the user or a set of predefined colour ramps from the **RColorBrewer** package.

##### 8.4.4.1 Using ColourBrewer palette
```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 6,
          style = "quantile",
          palette = "Reds") +
  tm_borders(alpha = 0.5)
```

To reverse the colour shading, add a “-” prefix.

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          style = "quantile",
          palette = "-Reds") +
  tm_borders(alpha = 0.5)
```

#### 8.4.5 Map layouts

Map layout combines all map elements into a cohesive design, including the title, scale bar, compass, margins, and aspect ratios. Additionally, color settings and data classification methods (palette and breakpoints) influence the overall appearance of the map.

##### 8.4.5.1 Map legend
In `tmap`, several legend options are provided to change the placement, format and appearance of the legend.

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY", 
          style = "jenks", 
          palette = "Greens", 
          legend.hist = TRUE, 
          legend.is.portrait = TRUE,
          legend.hist.z = 0.1) +
  tm_layout(main.title = "Distribution of Dependency Ratio by planning subzone \n(Jenks classification)",
            main.title.position = "center",
            main.title.size = 1,
            legend.height = 0.45, 
            legend.width = 0.35,
            legend.outside = FALSE,
            legend.position = c("right", "bottom"),
            frame = FALSE) +
  tm_borders(alpha = 0.5)
```
##### 8.4.5.2 Map style
`tmap` allows a wide variety of layout settings to be changed. They can be called by using `tmap_style()`.

```{r}
mpsz_pop2020 <- st_make_valid(mpsz_pop2020)  # Fix geometry issues

tm_shape(mpsz_pop2020) +
  tm_fill("DEPENDENCY", style = "quantile", palette = "-Greens") +
  tm_borders(alpha = 0.5) +
  tmap_style("classic")
```

##### 8.4.5.3 Cartographic Furniture
Besides map style, tmap allows adding map elements like a compass, scale bar, and grid lines for better readability.

-   `tm_compass()` → Adds a compass
-   `tm_scale_bar()` → Adds a scale bar
-   `tm_grid()` → Adds grid lines

These elements enhance the choropleth map's clarity and usability.

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY", 
          style = "quantile", 
          palette = "Blues",
          title = "No. of persons") +
  tm_layout(main.title = "Distribution of Dependency Ratio \nby planning subzone",
            main.title.position = "center",
            main.title.size = 1.2,
            legend.height = 0.45, 
            legend.width = 0.35,
            frame = TRUE) +
  tm_borders(alpha = 0.5) +
  tm_compass(type="8star", size = 2) +
  tm_scale_bar(width = 0.15) +
  tm_grid(lwd = 0.1, alpha = 0.2) +
  tm_credits("Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\n and Population data from Department of Statistics DOS", 
             position = c("left", "bottom"))
```

To reset the default style, refer to the code below.

```{r}
tmap_style("white")
```

#### 8.4.6 Drawing Small Multiple Choropleth Maps
**Small multiple maps** (facet maps) display multiple maps side-by-side or stacked, allowing visualization of spatial changes across another variable, such as time.

In tmap, small multiple maps can be created in three ways:

-   Assign multiple values to an aesthetic argument.
-   Use `tm_facets()` to define a group-by variable.
-   Use `tmap_arrange()` to combine multiple stand-alone maps.

##### 8.4.6.1 By assigning multiple values to at least one of the aesthetics arguments

Small multiple choropleth maps are created by defining **ncols** in **tm_fill()**

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill(c("YOUNG", "AGED"),
          style = "equal", 
          palette = "Blues") +
  tm_layout(legend.position = c("right", "bottom")) +
  tm_borders(alpha = 0.5) +
  tmap_style("white")
```
Small multiple choropleth maps are created by assigning multiple values to at least one of the aesthetic arguments.

```{r}
tm_shape(mpsz_pop2020)+ 
  tm_polygons(c("DEPENDENCY","AGED"),
          style = c("equal", "quantile"), 
          palette = list("Reds","Blues")) +
  tm_layout(legend.position = c("right", "bottom"))
```

##### 8.4.6.2 By defining a group-by variable in `tm_facets()`
Multiple small choropleth maps are created by using `tm_facets()`.

```{r}
tm_shape(mpsz_pop2020) +
  tm_fill("DEPENDENCY",
          style = "quantile",
          palette = "Purples",
          thres.poly = 0) + 
  tm_facets(by="REGION_N", 
            free.coords=TRUE, 
            drop.shapes=FALSE) +
  tm_layout(legend.show = FALSE,
            title.position = c("center", "center"), 
            title.size = 20) +
  tm_borders(alpha = 0.5)
```

##### 8.4.6.3 By creating multiple stand-alone maps with `tmap_arrange()`

Multiple small choropleth maps are created by creating multiple stand-alone maps with `tmap_arrange()`.

```{r}
youngmap <- tm_shape(mpsz_pop2020)+ 
  tm_polygons("YOUNG", 
              style = "quantile", 
              palette = "Blues")

agedmap <- tm_shape(mpsz_pop2020)+ 
  tm_polygons("AGED", 
              style = "quantile", 
              palette = "PuOr")

tmap_arrange(youngmap, agedmap, asp=1, ncol=2)
```
#### 8.4.7 Mapping Spatial Object Meeting a Selection Criterion
We can also use selection function to map spatial objects meeting the selection criterion.

```{r}
tm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N=="CENTRAL REGION", ])+
  tm_fill("DEPENDENCY", 
          style = "quantile", 
          palette = "Paired", 
          legend.hist = TRUE, 
          legend.is.portrait = TRUE,
          legend.hist.z = 0.1) +
  tm_layout(legend.outside = TRUE,
            legend.height = 0.45, 
            legend.width = 5.0,
            legend.position = c("right", "bottom"),
            frame = FALSE) +
  tm_borders(alpha = 0.5)
```

### 8.5 References

-   Kam, T.S(2024). [Visual Statistical Analysis.](https://r4va.netlify.app/chap21)

### 8.6 Takeaway

::: callout-tip
## Key takeaways

-   Choropleth maps are powerful tools for spatial data visualization.
-   Choosing the right classification method impacts how data is interpreted.
-   Customization options in tmap allow for professional-quality maps.
-   Faceted maps help visualize spatial changes over time.
:::

