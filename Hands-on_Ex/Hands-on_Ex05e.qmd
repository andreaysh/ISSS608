---
title: "Hands-on Exercise 05e"
author: "Andrea Yeo"
date-modified: "last-modified"
execute:
  echo: true
  eval: true
  warning: false
  freeze: true
---

[With the assistance of ChatGPT]{style="font-size: 14px;"}

## 5. Treemap Visualisation with R

### 5.1 Overview
In this hands-on exercise, we will learn how to design treemaps using R. We will first manipulate transaction data into a treemap structure with [**dplyr**](https://www.rdocumentation.org/packages/dplyr/versions/0.5.0), then create a static treemap using [**treemap package**](https://www.rdocumentation.org/packages/treemap/versions/2.4-4/topics/treemap), and finally design an interactive version with [**d3treeR**](https://www.rdocumentation.org/packages/d3treeR/versions/0.1/topics/d3tree).

### 5.2 Installing and Launching R Packages
For this exercise, the below R packages will be used: -
-   [**treemap**](https://www.rdocumentation.org/packages/treemap/versions/2.4-4/topics/treemap): Creates hierarchical treemaps to visualize data distributions using nested rectangles.
-   [**treemapify**](https://www.rdocumentation.org/packages/treemapify/versions/0.2.1):Provides `ggplot2` support for creating treemaps, allowing seamless integration with other visualizations.
-   [**tidyverse**](https://www.rdocumentation.org/packages/tidyverse/versions/2.0.0): A collection of R packages designed for data science, including `ggplot2`, `dplyr`, and `tidyr` for data manipulation and visualization.
```{r}
pacman::p_load(treemap, treemapify, tidyverse) 
```

### 5.3 Data Wrangling
In this exercise, we will use the *REALIS2018.csv* dataset, which contains private property transaction records from 2018. The data is sourced from the REALIS portal of Singapore's Urban Redevelopment Authority (URA) and provides insights into real estate transactions.

#### 5.3.1 Importing the data set

```{r}
realis2018 <- read_csv("data/realis2018.csv")
```
We will check the dataset using below

-   `glimpse()`: provides a transposed overview of a dataset, showing variables and their types in a concise format.
-   `head()`: displays the first few rows of a dataset (default is 6 rows) to give a quick preview of the data.
-   `summary()`: generates a statistical summary of each variable, including measures like mean, median, and range for numeric data.
-   `duplicated()`:returns a logical vector indicating which elements or rows in a vector or data frame are duplicates.
-   `Sum(is.na())`: counts the number of missing values (NA) in each column of the data frame.
-   `spec()`: use `spec()` to quickly inspect the column


::: panel-tabset
## glimpse()

```{r}
glimpse(realis2018)
```

## head()

```{r}
head(realis2018)
```

## summary()

```{r}
summary(realis2018)
```

## duplicated()

```{r}
wh[duplicated(wh),]
```

## sum(is.na())

```{r}
sum(is.na(realis2018))  
```

## spec()

```{r}
spec(realis2018)
```
:::

The realis2018 tibble contains 12 attributes, as shown above:

-   **Categorical attributes:** Project Name	Address	Type of Area	Sale Date	Property Type	Tenure	Type of Sale	Purchaser Address Indicator	Planning Region	Planning Area

-   **Continuous attributes:** No. of Units	Area (sqm)	Transacted Price ($)	Nett Price($)	Unit Price ($ psm)	Unit Price ($ psf)	Completion Date	Postal District	Postal Sector	Postal Code

#### 5.3.2 Data Wrangling and Manipulation
The **REALIS2018** dataset contains highly disaggregated transaction records, making it unsuitable for direct treemap visualization. 

To prepare the data, we will use `dplyr` functions to group transactions by key attributes such as **Project Name, Planning Region, Planning Area, Property Type, and Type of Sale.** 

We will then apply summary statistics using `summarise()` to compute **Total Units Sold, Total Area, Median Unit Price, and Median Transacted Price.** 

The `group_by()` function will structure the data for aggregation, ensuring that `summarise()` calculates relevant statistics for each group, creating a summarized dataset suitable for treemap visualization.

#### 5.3.3 Grouped summaries without the Pipe
The code below shows a typical two lines code approach to perform the steps.

```{r}
realis2018_grouped <- group_by(realis2018, `Project Name`,
                               `Planning Region`, `Planning Area`, 
                               `Property Type`, `Type of Sale`)
realis2018_summarised <- summarise(realis2018_grouped, 
                          `Total Unit Sold` = sum(`No. of Units`, na.rm = TRUE),
                          `Total Area` = sum(`Area (sqm)`, na.rm = TRUE),
                          `Median Unit Price ($ psm)` = median(`Unit Price ($ psm)`, na.rm = TRUE), 
                          `Median Transacted Price` = median(`Transacted Price ($)`, na.rm = TRUE))
```

::: callout-note
-   Aggregation functions like`sum()` and `median()` in R follow the standard rule for missing values: if any input contains NA, the result will also be NA. 

-   To handle this, the argument `na.rm = TRUE` can be used to remove missing values before computation, ensuring accurate summary statistics. 

-   This is particularly useful when calculating total units sold, total area, median unit price, and median transacted price in the **REALIS2018** dataset, preventing missing values from affecting the results.
:::

The code chunk above is not very efficient because we have to give each intermediate data.frame a name, even though we don’t have to care about it.

#### 5.3.4 Grouped summaries with the Pipe
The code chunk below shows a more efficient way to tackle the same processes by using the pipe, `%>%`:

```{r}
realis2018_summarised <- realis2018 %>% 
  group_by(`Project Name`,`Planning Region`, 
           `Planning Area`, `Property Type`, 
           `Type of Sale`) %>%
  summarise(`Total Unit Sold` = sum(`No. of Units`, na.rm = TRUE), 
            `Total Area` = sum(`Area (sqm)`, na.rm = TRUE),
            `Median Unit Price ($ psm)` = median(`Unit Price ($ psm)`, na.rm = TRUE),
            `Median Transacted Price` = median(`Transacted Price ($)`, na.rm = TRUE))
```

### 5.4 Designing Treemap with treemap Package

The [treemap package](https://www.rdocumentation.org/packages/treemap/versions/2.4-4/topics/treemap) in R provides a highly flexible `treemap()` function with over **43 arguments** for customization. This section focuses on key parameters to create **elegant and accurate treemaps**, allowing effective visualization of hierarchical data while maintaining clarity and truthfulness.

#### 5.4.1 Designing a static treemap
In this section, treemap() from the treemap package is used to visualize the distribution of median unit prices and total units sold for resale condominiums by geographic hierarchy in 2017. 

First, records for resale condominiums are filtered from the `realis2018_selected` dataset to ensure relevant data for visualization.

```{r}
realis2018_selected <- realis2018_summarised %>%
  filter(`Property Type` == "Condominium", `Type of Sale` == "Resale")
```

#### 5.4.2 Using the basic arguments
The code below creates a treemap using three key arguments of treemap():

-   index: Defines hierarchical grouping.
-   vSize: Specifies the variable determining the rectangle size.
-   vColor: Assigns colors based on a chosen variable.

```{r}
treemap(realis2018_selected,
        index=c("Planning Region", "Planning Area", "Project Name"),
        vSize="Total Unit Sold",
        vColor="Median Unit Price ($ psm)",
        title="Resale Condominium by Planning Region and Area, 2017",
        title.legend = "Median Unit Price (S$ per sq. m)"
        )
```
Key takeaways from the three core treemap() arguments:

-   `index`: Requires at least two column names for hierarchical treemaps. The first column represents the highest level of aggregation, followed by lower levels.

-   `vSize`: Maps rectangle sizes based on a numeric variable, which must contain only non-negative values.

-   `vColor`: Works with the `type` argument to determine rectangle colors. If `type` is not defined, `treemap()` defaults to using `index`, which may result in incorrect coloring. Properly setting `type` ensures colors reflect median unit prices in this case.

#### 5.4.3 Working with vColor and type arguments

In the code below, `type` argument is define as value.
```{r}
treemap(realis2018_selected,
        index=c("Planning Region", "Planning Area", "Project Name"),
        vSize="Total Unit Sold",
        vColor="Median Unit Price ($ psm)",
        type = "value",
        title="Resale Condominium by Planning Region and Area, 2017",
        title.legend = "Median Unit Price (S$ per sq. m)"
        )
```

Key insights from the code:

-   The rectangles are **shaded in varying intensities of green**, representing differences in **median unit prices**.
-   The legend indicates that values are **binned into ten equal intervals (e.g., 0–5000, 5000–10000, etc.)** with a fixed interval of **5000**, ensuring clear data interpretation.

#### 5.4.4 Colours in treemap package
Two arguments control color mapping in treemap():

-   `mapping`: Defines how values are mapped to colors.
-   `palette`: Specifies the color scheme.

Differences:

-   **"value" mapping**: Uses a diverging color palette (e.g., "RdYlBu"), centering 0 at the middle color and mapping extreme values symmetrically.

-   **"manual" mapping**: Maps min(values) to the left-end color, max(values) to the right-end color, and the midpoint to the middle color.

#### 5.4.5 The “value” type treemap

The code below shows a value type treemap.

```{r}
treemap(realis2018_selected,
        index=c("Planning Region", "Planning Area", "Project Name"),
        vSize="Total Unit Sold",
        vColor="Median Unit Price ($ psm)",
        type="value",
        palette="RdYlBu", 
        title="Resale Condominium by Planning Region and Area, 2017",
        title.legend = "Median Unit Price (S$ per sq. m)"
        )
```
Key takeaways from the code:

-   Despite using the "RdYlBu" color palette, no red rectangles appear because all median unit prices are positive.

-   The legend displays values from 5000 to 45000 due to the default range = c(min(values), max(values)), which applies automatic rounding for better readability.

#### 5.4.6 The “manual” type treemap

