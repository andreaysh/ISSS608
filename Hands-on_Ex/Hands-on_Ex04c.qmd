---
title: "Hands-on Exercise 04c"
author: "Andrea Yeo"
date-modified: "last-modified"
execute:
  echo: true
  eval: true
  warning: false
  freeze: true
---

[With the assistance of ChatGPT]{style="font-size: 14px;"}

## 4. Visualising uncertainty

### 4.1 Learning outcome

In this chapter, we will be learning how to create statistical graphics to visualize uncertainty. By the end of the chapter, we will be able to:

-   Create statistical error bar plots using ggplot2.
-   Develop interactive error bar plots by integrating ggplot2, plotly, and DT.
-   Design advanced visualizations with the ggdist package.
-   Generate Hypothetical Outcome Plots (HOPs) using the ungeviz package.

### 4.2 Getting started

#### 4.2.1 Installing and loading the packages

For this exercise the following R packages will be used:

-   [tidyverse](https://www.rdocumentation.org/packages/tidyverse/versions/2.0.0): A collection of R packages for data science workflows
-   [plotly](https://www.rdocumentation.org/packages/plotly/versions/4.10.4): Used for creating interactive plots.
-   [gganimate](https://www.rdocumentation.org/packages/gganimate/versions/0.1.1):Enables the creation of animated plots.
-   [DT](https://www.rdocumentation.org/packages/DT/versions/0.16):Displays interactive HTML tables.
-   [crosstalk](https://www.rdocumentation.org/packages/crosstalk/versions/1.2.1):Facilitates cross-widget interactions, including linked brushing and filtering.
-   [ggdist](https://www.rdocumentation.org/packages/ggdist/versions/3.3.2):Helps visualize distributions and uncertainty.

```{r}
devtools::install_github("wilkelab/ungeviz")
```

```{r}
pacman::p_load(ungeviz, plotly, crosstalk,
               DT, ggdist, ggridges,
               colorspace, gganimate, tidyverse)
```

#### 4.2.2 Data import

```{r}
exam <- read_csv("data/Exam_data.csv", show_col_types = FALSE)
```

::: callout-note
-   This section data is the same dataset used in [Hands-on_Ex01](Hands-on_Ex01.html), [Hands-on_Ex02](Hands-on_Ex02.html), [Hands-on_Ex03a](Hands-on_Ex03a.html), [Hands-on_Ex04a](Hands-on_Ex04a.html), and [Hands-on_Ex04b](Hands-on_Ex04b.html)
:::

### 4.3 Visualizing the uncertainty of point estimates: [`ggplot2`](https://www.rdocumentation.org/packages/ggplot2/versions/3.5.0) methods

A point estimate is a single number, such as a mean. Uncertainty is expressed as standard error, confidence interval, or credible interval

::: callout-important
We should not confuse the uncertainty of a point estimate with the variation in the sample.
:::

In this section, we will be plotting error bars for MATHS scores based on race using the exam tibble data frame.

The following functions from the [dplyr](https://www.rdocumentation.org/packages/dplyr/versions/0.7.8) package and code will be used to calculate the required summary statistics.

-   `group_by()`:Groups the observations by RACE.
-   `summarise()`: Calculates the count of observations, along with the mean and standard deviation of MATHS scores.
-   `mutate()`: Computes the standard error of MATHS scores for each race.
-   The output is stored as a tibble data frame named *my_sum*.

```{r}
my_sum <- exam %>%
  group_by(RACE) %>%
  summarise(
    n=n(),
    mean=mean(MATHS),
    sd=sd(MATHS)
    ) %>%
  mutate(se=sd/sqrt(n-1))
```

::: callout-note
-   To refer to Slide 20 of Lesson 4 for the mathematical explanation
:::

The code below will be used to display *my_sum* tibble data frame in a html table format.

::: panel-tabset
## Code()

```{r}
#| eval = FALSE

knitr::kable(head(my_sum), format = 'html')
```

## Table()

```{r}
#| echo = FALSE 

knitr::kable(head(my_sum), format = 'html')

```
:::

#### 4.3.1 Plotting standard error bars of point estimates

Now, we will plot the standard error bars for the mean MATHS scores by race, as shown below.

-   The error bars are computed by using the formula mean+/-se.
-   For `geom_point()`, it is important to indicate stat=“identity”

::: panel-tabset
## Code()

```{r}
#| eval = FALSE

ggplot(my_sum) +
  geom_errorbar(
    aes(x=RACE, 
        ymin=mean-se, 
        ymax=mean+se), 
    width=0.2, 
    colour="blue", 
    alpha=0.9, 
    size=0.5) +
  geom_point(aes
           (x=RACE, 
            y=mean), 
           stat="identity", 
           color="red",
           size = 1.5,
           alpha=1) +
  ggtitle("Standard error of mean maths score by rac")
```

## Graph()

```{r}
#| echo = FALSE 

ggplot(my_sum) +
  geom_errorbar(
    aes(x=RACE, 
        ymin=mean-se, 
        ymax=mean+se), 
    width=0.2, 
    colour="blue", 
    alpha=0.9, 
    size=0.5) +
  geom_point(aes
           (x=RACE, 
            y=mean), 
           stat="identity", 
           color="red",
           size = 1.5,
           alpha=1) +
  ggtitle("Standard error of mean maths score by rac")

```
:::

#### 4.3.2 Plotting confidence interval of point estimates

In addition to plotting standard error bars for point estimates, we can also visualize the confidence intervals of the mean MATHS scores by race.

-   The confidence intervals are calculated using the formula: mean ± 1.96 × standard error (SE).

-   The error bars are arranged based on the average MATHS scores.

-   The `labs()` function from ggplot2 is used to modify the x-axis label.

::: panel-tabset
## Code()

```{r}
#| eval = FALSE
ggplot(my_sum) +
  geom_errorbar(
    aes(x=reorder(RACE, -mean), 
        ymin=mean-1.96*se, 
        ymax=mean+1.96*se), 
    width=0.2, 
    colour="blue", 
    alpha=0.9, 
    size=0.5) +
  geom_point(aes
           (x=RACE, 
            y=mean), 
           stat="identity", 
           color="red",
           size = 1.5,
           alpha=1) +
  labs(x = "Maths score",
       title = "95% confidence interval of mean maths score by race")

```

## Graph()

```{r}
#| echo = FALSE 
ggplot(my_sum) +
  geom_errorbar(
    aes(x=reorder(RACE, -mean), 
        ymin=mean-1.96*se, 
        ymax=mean+1.96*se), 
    width=0.2, 
    colour="blue", 
    alpha=0.9, 
    size=0.5) +
  geom_point(aes
           (x=RACE, 
            y=mean), 
           stat="identity", 
           color="red",
           size = 1.5,
           alpha=1) +
  labs(x = "Maths score",
       title = "95% confidence interval of mean maths score by race")

```
:::

#### 4.3.3 Visualizing the uncertainty of point estimates with interactive error bars

We will learn how to create interactive error bar plots to display the 99% confidence intervals of the mean MATHS scores by race, as shown in the figure below.

::: panel-tabset
## Code()

```{r}
#| eval = FALSE

shared_df = SharedData$new(my_sum)

bscols(widths = c(4,8),
       ggplotly((ggplot(shared_df) +
                   geom_errorbar(aes(
                     x=reorder(RACE, -mean),
                     ymin=mean-2.58*se, 
                     ymax=mean+2.58*se), 
                     width=0.2, 
                     colour="blue", 
                     alpha=0.9, 
                     size=0.5) +
                   geom_point(aes(
                     x=RACE, 
                     y=mean, 
                     text = paste("Race:", `RACE`, 
                                  "<br>N:", `n`,
                                  "<br>Avg. Scores:", round(mean, digits = 2),
                                  "<br>95% CI:[", 
                                  round((mean-2.58*se), digits = 2), ",",
                                  round((mean+2.58*se), digits = 2),"]")),
                     stat="identity", 
                     color="red", 
                     size = 1.5, 
                     alpha=1) + 
                   xlab("Race") + 
                   ylab("Average Scores") + 
                   theme_minimal() + 
                   theme(axis.text.x = element_text(
                     angle = 45, vjust = 0.5, hjust=1)) +
                   ggtitle("99% Confidence interval of average /<br>maths scores by race")), 
                tooltip = "text"), 
       DT::datatable(shared_df, 
                     rownames = FALSE, 
                     class="compact", 
                     width="100%", 
                     options = list(pageLength = 10,
                                    scrollX=T), 
                     colnames = c("No. of pupils", 
                                  "Avg Scores",
                                  "Std Dev",
                                  "Std Error")) %>%
         formatRound(columns=c('mean', 'sd', 'se'),
                     digits=2))
```

## Graph()

```{r}
#| echo = FALSE 

shared_df = SharedData$new(my_sum)

bscols(widths = c(4,8),
       ggplotly((ggplot(shared_df) +
                   geom_errorbar(aes(
                     x=reorder(RACE, -mean),
                     ymin=mean-2.58*se, 
                     ymax=mean+2.58*se), 
                     width=0.2, 
                     colour="blue", 
                     alpha=0.9, 
                     size=0.5) +
                   geom_point(aes(
                     x=RACE, 
                     y=mean, 
                     text = paste("Race:", `RACE`, 
                                  "<br>N:", `n`,
                                  "<br>Avg. Scores:", round(mean, digits = 2),
                                  "<br>95% CI:[", 
                                  round((mean-2.58*se), digits = 2), ",",
                                  round((mean+2.58*se), digits = 2),"]")),
                     stat="identity", 
                     color="red", 
                     size = 1.5, 
                     alpha=1) + 
                   xlab("Race") + 
                   ylab("Average Scores") + 
                   theme_minimal() + 
                   theme(axis.text.x = element_text(
                     angle = 45, vjust = 0.5, hjust=1)) +
                   ggtitle("99% Confidence interval of average /<br>maths scores by race")), 
                tooltip = "text"), 
       DT::datatable(shared_df, 
                     rownames = FALSE, 
                     class="compact", 
                     width="100%", 
                     options = list(pageLength = 10,
                                    scrollX=T), 
                     colnames = c("No. of pupils", 
                                  "Avg Scores",
                                  "Std Dev",
                                  "Std Error")) %>%
         formatRound(columns=c('mean', 'sd', 'se'),
                     digits=2))
```
:::

### 4.4 Visualizing uncertainty: [`ggdist`](https://mjskay.github.io/ggdist/index.html) methods

-   [ggdist](https://mjskay.github.io/ggdist/index.html) is an R package that offers flexible ggplot2 geoms and stats specifically designed for visualizing distributions and uncertainty.

-   It supports both frequentist and Bayesian uncertainty visualization by focusing on distribution-based approaches:

    -   For frequentist models, it visualizes confidence or bootstrap distributions (see vignette("freq-uncertainty-vis")).

    -   For Bayesian models, it visualizes probability distributions, with extended functionality available through the tidybayes package.

#### 4.4.1 Visualizing the uncertainty of point estimates: [`ggdist`](https://www.rdocumentation.org/packages/ggdist/versions/3.3.2) methods

[`stat_pointinterval()`](https://mjskay.github.io/ggdist/reference/stat_pointinterval.html) of **ggdist** is used to build a visual for displaying distribution of maths scores by race.

::: panel-tabset
## Code()

```{r}
#| eval = FALSE

exam %>%
  ggplot(aes(x = RACE, 
             y = MATHS)) +
  stat_pointinterval() +
  labs(
    title = "Visualising confidence intervals of mean math score",
    subtitle = "Mean Point + Multiple-interval plot")
```

## Graph()

```{r}
#| echo = FALSE 

exam %>%
  ggplot(aes(x = RACE, 
             y = MATHS)) +
  stat_pointinterval() +
  labs(
    title = "Visualising confidence intervals of mean math score",
    subtitle = "Mean Point + Multiple-interval plot")

```
:::

This function comes with many arguments. In the code below, the following arguments are used:

-   width = 0.95

-   point = median

-   interval = qi

For more information on the arguments available, please refer to this [link](https://www.rdocumentation.org/packages/tidybayes/versions/2.0.3/topics/stat_pointinterval).

::: panel-tabset
## Code()

```{r}
#| eval = FALSE

exam %>%
  ggplot(aes(x = RACE, y = MATHS)) +
  stat_pointinterval(.width = 0.95,
  .point = median,
  .interval = qi) +
  labs(
    title = "Visualising confidence intervals of median math score",
    subtitle = "Median Point + Multiple-interval plot")
```

## Graph()

```{r}
#| echo = FALSE 

exam %>%
  ggplot(aes(x = RACE, y = MATHS)) +
  stat_pointinterval(.width = 0.95,
  .point = median,
  .interval = qi) +
  labs(
    title = "Visualising confidence intervals of median math score",
    subtitle = "Median Point + Multiple-interval plot")
```
:::

#### 4.4.2 Visualizing the uncertainty of point estimates: [`ggdist`](https://www.rdocumentation.org/packages/ggdist/versions/3.3.2) methods

We will makeover the previous plot by showing 95% and 99% confidence intervals. 

-   .width = 0.95 and 0.99

::: callout-note
-   The `.width` argument in the `stat_pointinterval` function defines the coverage probability of the confidence interval around the summary statistic, such as the median.
-   It controls the visual width of the confidence interval displayed in the plot.
:::

::: panel-tabset
## Code()

```{r}
#| eval = FALSE
exam %>%
  ggplot(aes(x = RACE, 
             y = MATHS)) +
  stat_pointinterval(
    .width = c(0.95, 0.99), 
    show.legend = FALSE) +   
  labs(
    title = "Visualising confidence intervals of mean Math score",
    subtitle = "Mean Point + Multiple-interval plot")
```

## Graph()

```{r}
#| echo = FALSE 

exam %>%
  ggplot(aes(x = RACE, 
             y = MATHS)) +
  stat_pointinterval(
    .width = c(0.95, 0.99), 
    show.legend = FALSE) +   
  labs(
    title = "Visualising confidence intervals of mean Math score",
    subtitle = "Mean Point + Multiple-interval plot, 95% and 99%")
```
:::

#### 4.4.3 Visualizing the uncertainty of point estimates: [`ggdist`](https://www.rdocumentation.org/packages/ggdist/versions/3.3.2) methods

[`stat_gradientinterval()`](https://mjskay.github.io/ggdist/reference/stat_gradientinterval.html) of **ggdist** is used to build a visual for displaying distribution of maths scores by race. 

::: panel-tabset
## Code()

```{r}
#| eval = FALSE

exam %>%
  ggplot(aes(x = RACE, 
             y = MATHS)) +
  stat_gradientinterval(   
    fill = "#E1B941",      
    show.legend = TRUE     
  ) +                        
  labs(
    title = "Visualising confidence intervals of mean math score",
    subtitle = "Gradient + interval plot")
```

## Graph()

```{r}
#| echo = FALSE 

exam %>%
  ggplot(aes(x = RACE, 
             y = MATHS)) +
  stat_gradientinterval(   
    fill = "#E1B941",      
    show.legend = TRUE     
  ) +                        
  labs(
    title = "Visualising confidence intervals of mean math score",
    subtitle = "Gradient + interval plot")
```
:::

### 4.5 Visualizing uncertainity with hypothetical outcome plots (HOPs)

What are HOPs and when are they used?

-   HOPs are visualizations that display multiple simulated outcomes to help users understand uncertainty in data or predictions. Instead of showing a static confidence interval, HOPs animate or present a series of possible outcomes to illustrate the variability in the data.
-   Used to help audiences intuitively understand variability and potential results in decision-making and forecasting.

::: panel-tabset
## Code()

```{r}
#| eval = FALSE

devtools::install_github("wilkelab/ungeviz")
library(ungeviz)

ggplot(data = exam, 
       (aes(x = factor(RACE), y = MATHS))) +
  geom_point(position = position_jitter(
    height = 0.3, width = 0.05), 
    size = 0.4, color = "#E1B941", alpha = 1/2) +
  geom_hpline(data = sampler(25, group = RACE), height = 0.6, color = "#4169E1") +
  theme_bw() + 
  # `.draw` is a generated column indicating the sample draw
  transition_states(.draw, 1, 3)
```

## Graph()

```{r}
#| echo = FALSE 

devtools::install_github("wilkelab/ungeviz")
library(ungeviz)

ggplot(data = exam, 
       (aes(x = factor(RACE), y = MATHS))) +
  geom_point(position = position_jitter(
    height = 0.3, width = 0.05), 
    size = 0.4, color = "#E1B941", alpha = 1/2) +
  geom_hpline(data = sampler(25, group = RACE), height = 0.6, color = "#4169E1") +
  theme_bw() + 
  # `.draw` is a generated column indicating the sample draw
  transition_states(.draw, 1, 3)

```
:::

### 4.7 References

-   Kam, T.S(2024). [Visualising Uncertainty](https://r4va.netlify.app/chap11)

### 4.8 Takeaway

::: callout-tip
## Key takeaways

-   Understand uncertainty in statistical graphics: uncertainty is expressed using standard errors/ confidence intervals.
-   Learnt about plotting error bars with ggplot2: use `geom_errorbar` to represent standard errors around point estimates
-   Learnt about creating interactive error bars with `plotly` and `DT`
-   Learnt about visualizing uncertainty with Hypothetical Outcome Plots (HOPs): displaying multiple stimulated outcomes to show data variability. 
-   Learnt the difference about the uncertainty of point estimates with same variation, where uncertainty reflects estimation confidence, while variation shows data spread. 
:::

### 4.9 Further exploration

1. To further explore Hypothetical Outcome Plots (HOPs) using `exam` dataset - By increasing the number of stimulated outcomes

-   Increase the number of samples from 25 to 150.

::: callout-note
-   By increasing the number of samples, it shows more potential outcomes, providing a richer picture of uncertainty. 
:::

::: panel-tabset
## Code()

```{r}
#| eval = FALSE

devtools::install_github("wilkelab/ungeviz")
library(ungeviz)

ggplot(data = exam, 
       aes(x = factor(RACE), y = MATHS)) +
  geom_point(position = position_jitter(height = 0.3, width = 0.05), 
             size = 0.4, color = "#E1B941", alpha = 1/2) +
  geom_hpline(data = sampler(150, group = RACE), height = 0.6, color = "#4169E1") +  # Increased from 25 to 150
  theme_minimal() + 
  transition_states(.draw, transition_length = 2, state_length = 1)

```

## Graph()

```{r}
#| echo = FALSE 

devtools::install_github("wilkelab/ungeviz")
library(ungeviz)

ggplot(data = exam, 
       aes(x = factor(RACE), y = MATHS)) +
  geom_point(position = position_jitter(height = 0.3, width = 0.05), 
             size = 0.4, color = "#E1B941", alpha = 1/2) +
  geom_hpline(data = sampler(150, group = RACE), height = 0.6, color = "#4169E1") +  # Increased from 25 to 150
  theme_minimal() + 
  transition_states(.draw, transition_length = 2, state_length = 1)


```
:::

2. To further visualize how confidence intervals for average MATHS scores shift across class (using `ggdist)

::: callout-note
-   Helps to track how uncertainty (confidence intervals) widens or narrows across different classes
:::

::: panel-tabset
## Code()
```{r}
#| eval = FALSE

library(ggdist)
library(gganimate)
library(ggplot2)
library(dplyr)

# Clean data to remove any missing CLASS values
exam_clean <- exam %>% filter(!is.na(CLASS))

# Animated plot
ggplot(exam_clean, aes(x = factor(CLASS), y = MATHS)) +
  stat_pointinterval(aes(color = RACE), 
                      .width = c(0.66, 0.95), 
                      position = position_dodge(width = 0.5)) +
  labs(title = "Confidence Intervals of Maths Scores Across Classes",
       subtitle = "Class: {closest_state}",  # Dynamic subtitle reflecting the current class
       y = "Maths Score") +
  theme_minimal() +
  transition_states(CLASS, transition_length = 2, state_length = 1) +  # Handles categorical data
  ease_aes('cubic-in-out')  # Smooth animation transitions


```
## Animated Graph()
```{r}
#| echo = FALSE

library(ggdist)
library(gganimate)
library(ggplot2)
library(dplyr)

exam_clean <- exam %>% filter(!is.na(CLASS))

# Animated plot
ggplot(exam_clean, aes(x = factor(CLASS), y = MATHS)) +
  stat_pointinterval(aes(color = RACE), 
                      .width = c(0.66, 0.95), 
                      position = position_dodge(width = 0.5)) +
  labs(title = "Confidence Intervals of Maths Scores Across Classes",
       subtitle = "Class: {closest_state}",  # Dynamic subtitle reflecting the current class
       y = "Maths Score") +
  theme_minimal() +
  transition_states(CLASS, transition_length = 2, state_length = 1) +  # Handles categorical data
  ease_aes('cubic-in-out')  # Smooth animation transitions

```

## Static Graph()

```{r}
#| echo = FALSE

library(ggdist)
library(ggplot2)
library(dplyr)

exam_clean <- exam %>% filter(!is.na(CLASS))

# Static plot, remove gganimate
ggplot(exam_clean, aes(x = factor(CLASS), y = MATHS)) +
  stat_pointinterval(aes(color = RACE), 
                      .width = c(0.66, 0.95),  # Showing both 66% and 95% confidence intervals
                      position = position_dodge(width = 0.5)) +
  labs(title = "Confidence Intervals of Maths Scores Across Classes",
       subtitle = "Displaying 66% and 95% Confidence Intervals",
       y = "Maths Score", x = "Class") +
  theme_minimal() +
  theme(legend.position = "top")  # Place the legend at the top for better readability

```
:::

