---
title: "Hands-on Exercise 04d"
author: "Andrea Yeo"
date-modified: "last-modified"
execute:
  echo: true
  eval: true
  warning: false
  freeze: true
---

[With the assistance of ChatGPT]{style="font-size: 14px;"}

## 4. Funnel Plots for Fair Comparisons

### 4.1 Overview

In this exercise, we will be 

-   Creating funnel plots using the [**funnelPlotR**](https://www.rdocumentation.org/packages/rmeta/versions/3.0/topics/funnelplot) package.
-   Designing static funnel plots with ggplot2.
-   Building interactive funnel plots by combining [**plotly**](https://www.rdocumentation.org/packages/plotly/versions/4.10.4) and [**ggplot2**](https://www.rdocumentation.org/packages/ggplot2/versions/3.5.0).

### 4.2 Installing and launching R packages
The below are the R packages that will be used:

-   [**readr**](https://www.rdocumentation.org/packages/readr/versions/2.1.5): For importing CSV files into R.
-   [**FunnelPlotR**](https://www.rdocumentation.org/packages/FunnelPlotR/versions/0.5.0): For generating funnel plots.
-   [**ggplot2**](https://www.rdocumentation.org/packages/ggplot2/versions/3.5.0): For manually creating funnel plots.
-   [**knitr**](https://www.rdocumentation.org/packages/knitr/versions/1.48): For generating static HTML tables.
-   [**plotly**](https://www.rdocumentation.org/packages/plotly/versions/4.10.4):For creating interactive funnel plots.

```{r}
pacman::p_load(tidyverse, FunnelPlotR, plotly, knitr)
```

### 4.3 Importing data

We will be using the COVID-19_DKI_Jakarta dataset, sourced from the [Open Data Covid-19 Provinsi DKI Jakarta portal](https://riwayat-file-covid-19-dki-jakarta-jakartagis.hub.arcgis.com/). 

It focuses on comparing the cumulative COVID-19 cases and deaths by sub-district (kelurahan) as of 31st July 2021 in DKI Jakarta.

The code below imports the data into R and save it into a tibble data frame object called *covid19*

```{r}
covid19 <- read_csv("data/COVID-19_DKI_Jakarta.csv") %>%
  mutate_if(is.character, as.factor)

head(covid19)
```
We will check the dataset using below

-   `glimpse()`: provides a transposed overview of a dataset, showing variables and their types in a concise format.
-   `head()`: displays the first few rows of a dataset (default is 6 rows) to give a quick preview of the data.
-   `summary()`: generates a statistical summary of each variable, including measures like mean, median, and range for numeric data.
-   `duplicated()`:returns a logical vector indicating which elements or rows in a vector or data frame are duplicates.
-   `colSums(is.na())`: counts the number of missing values (NA) in each column of the data frame.
-   `spec()`: use `spec()` to quickly inspect the column

::: panel-tabset
## glimpse()

```{r}
glimpse(covid19)
```

## head()

```{r}
head(covid19)
```

## summary()

```{r}
summary(covid19)
```

## duplicated()

```{r}
covid19[duplicated(covid19),]
```

## colSum(is.na(*dataset*))

```{r}
colSums(is.na(covid19))
```

```{r}
spec(covid19)
```
:::

The covid19 tibble contains seven attributes, as shown above:

-   **Categorical attributes:** City, District, Sub-district

-   **Continuous attributes:** Sub-district ID, Positive, Recovered, Death

### 4.4 [FunnelPlotR](https://www.rdocumentation.org/packages/FunnelPlotR/versions/0.5.0) methods

The [FunnelPlotR](https://nhs-r-community.github.io/FunnelPlotR/) package uses ggplot2 to create funnel plots, requiring a `numerator` (events of interest), `denominator` (population), and a `group`. Key customization arguments include:

-   `limit`: Defines plot limits (95% or 99%).
-   `label_outliers`: Labels outliers when set to TRUE or FALSE.
-   `Poisson_limits`: Adds Poisson limits to the plot.
-   `OD_adjust`: Adds overdispersed limits to the plot.
-   `xrange` and `yrange`: Specify axis ranges, functioning like a zoom feature.
-   Additional aesthetics like graph titles, axis labels, and more.

#### 4.4.1 [FunnelPlotR](https://www.rdocumentation.org/packages/FunnelPlotR/versions/0.5.0) methods: The basic plot

The code below plots a funnel plot. 

::: callout-note
## Things to learn from the code

-   The `group` parameter differs from its use in scatterplots; here, it defines the level of data points to plot, such as **Sub-district**, **District**, or **City**. Selecting City results in only six data points.
-   The data_type argument defaults to "SR", where "SR" stands for **Standardized Ratio** -  used to compare the performance or outcomes of different groups. 
-   'limit' sets the plot limits, with accepted values of **95** or **99**, representing **95%** or **99.8%** quantiles of the distribution. 
:::

::: panel-tabset
## Graph()

```{r}
#| echo = FALSE 

funnel_plot(
  .data = covid19,
  numerator = Positive,
  denominator = Death,
  group = `Sub-district`
)
```
## Code()

```{r}
#| eval = FALSE

funnel_plot(
  .data = covid19,
  numerator = Positive,
  denominator = Death,
  group = `Sub-district`
)
```
:::

-   A funnel plot object with 267 points of which 0 are outliers. 
-   Plot is adjusted for overdispersion.

#### 4.4.2 [FunnelPlotR](https://www.rdocumentation.org/packages/FunnelPlotR/versions/0.5.0) methods: Makeover 1

::: callout-note
## Things to learn from the code
-   + `data_type argument` is used to change from default “SR” to “PR” (i.e. proportions).
-   + `xrange` and `yrange` are used to set the range of x-axis and y-axis
:::

::: panel-tabset
## Graph()

```{r}
#| echo = FALSE 

funnel_plot(
  .data = covid19,
  numerator = Death,
  denominator = Positive,
  group = `Sub-district`,
  data_type = "PR",     #<<
  xrange = c(0, 6500),  #<<
  yrange = c(0, 0.05)   #<<
)
```
## Code()

```{r}
#| eval = FALSE

funnel_plot(
  .data = covid19,
  numerator = Death,
  denominator = Positive,
  group = `Sub-district`,
  data_type = "PR",     #<<
  xrange = c(0, 6500),  #<<
  yrange = c(0, 0.05)   #<<
)
```
:::

#### 4.4.3 [FunnelPlotR](https://www.rdocumentation.org/packages/FunnelPlotR/versions/0.5.0) methods: Makeover 2

The code below plots a funnel plot. 

::: callout-note
## Things to learn from the code
-   `label = NA`: argument disables the default outlier labeling feature.
-   `title`: argument adds a title to the plot.
-   `x_label` and `y_label`: arguments are used to add or modify the titles of the x-axis and y-axis.
:::

::: panel-tabset
## Graph()

```{r}
#| echo = FALSE 

funnel_plot(
  .data = covid19,
  numerator = Death,
  denominator = Positive,
  group = `Sub-district`,
  data_type = "PR",   
  xrange = c(0, 6500),  
  yrange = c(0, 0.05),
  label = NA,
  title = "Cumulative COVID-19 Fatality Rate by Cumulative Total Number of COVID-19 Positive Cases", #<<           
  x_label = "Cumulative COVID-19 Positive Cases", #<<
  y_label = "Cumulative Fatality Rate"  #<<
)
```
## Code()

```{r}
#| eval = FALSE

funnel_plot(
  .data = covid19,
  numerator = Death,
  denominator = Positive,
  group = `Sub-district`,
  data_type = "PR",   
  xrange = c(0, 6500),  
  yrange = c(0, 0.05),
  label = NA,
  title = "Cumulative COVID-19 Fatality Rate by Cumulative Total Number of COVID-19 Positive Cases", #<<           
  x_label = "Cumulative COVID-19 Positive Cases", #<<
  y_label = "Cumulative Fatality Rate"  #<<
)
```
:::

### 4.5 Funnel plot for fair visual comparison

In this section, we will learn how to create funnel plots using ggplots.

#### 4.5.1 Computing the basic derived fields

To plot the funnel plot from scratch, we have to derive cumulative death rate and standard error of cumulative death rate.

```{r}
df <- covid19 %>%
  mutate(rate = Death / Positive) %>%
  mutate(rate.se = sqrt((rate*(1-rate)) / (Positive))) %>%
  filter(rate > 0)
```

The *fit.mean* is computed using the code below: 
```{r}
fit.mean <- weighted.mean(df$rate, 1/df$rate.se^2)
```

#### 4.5.2 Calculate the lower and upper limit for 95% and 99% CI

The code below is used to compute the lower and upper limits for 95% confidence interval.

```{r}
number.seq <- seq(1, max(df$Positive), 1)
number.ll95 <- fit.mean - 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) 
number.ul95 <- fit.mean + 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) 
number.ll999 <- fit.mean - 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) 
number.ul999 <- fit.mean + 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) 
dfCI <- data.frame(number.ll95, number.ul95, number.ll999, 
                   number.ul999, number.seq, fit.mean)
```

#### 4.5.3 Plotting a static funnel plot

The code below uses **ggplot2** functions to plot a static funnel plot.

::: panel-tabset
## Graph()

```{r}
#| echo = FALSE 

p <- ggplot(df, aes(x = Positive, y = rate)) +
  geom_point(aes(label=`Sub-district`), 
             alpha=0.4) +
  geom_line(data = dfCI, 
            aes(x = number.seq, 
                y = number.ll95), 
            size = 0.4, 
            colour = "grey40", 
            linetype = "dashed") +
  geom_line(data = dfCI, 
            aes(x = number.seq, 
                y = number.ul95), 
            size = 0.4, 
            colour = "grey40", 
            linetype = "dashed") +
  geom_line(data = dfCI, 
            aes(x = number.seq, 
                y = number.ll999), 
            size = 0.4, 
            colour = "grey40") +
  geom_line(data = dfCI, 
            aes(x = number.seq, 
                y = number.ul999), 
            size = 0.4, 
            colour = "grey40") +
  geom_hline(data = dfCI, 
             aes(yintercept = fit.mean), 
             size = 0.4, 
             colour = "grey40") +
  coord_cartesian(ylim=c(0,0.05)) +
  annotate("text", x = 1, y = -0.13, label = "95%", size = 3, colour = "grey40") + 
  annotate("text", x = 4.5, y = -0.18, label = "99%", size = 3, colour = "grey40") + 
  ggtitle("Cumulative Fatality Rate by Cumulative Number of COVID-19 Cases") +
  xlab("Cumulative Number of COVID-19 Cases") + 
  ylab("Cumulative Fatality Rate") +
  theme_light() +
  theme(plot.title = element_text(size=12),
        legend.position = c(0.91,0.85), 
        legend.title = element_text(size=7),
        legend.text = element_text(size=7),
        legend.background = element_rect(colour = "grey60", linetype = "dotted"),
        legend.key.height = unit(0.3, "cm"))
p
```
## Code()
```{r}
#| eval = FALSE

p <- ggplot(df, aes(x = Positive, y = rate)) +
  geom_point(aes(label=`Sub-district`), 
             alpha=0.4) +
  geom_line(data = dfCI, 
            aes(x = number.seq, 
                y = number.ll95), 
            size = 0.4, 
            colour = "grey40", 
            linetype = "dashed") +
  geom_line(data = dfCI, 
            aes(x = number.seq, 
                y = number.ul95), 
            size = 0.4, 
            colour = "grey40", 
            linetype = "dashed") +
  geom_line(data = dfCI, 
            aes(x = number.seq, 
                y = number.ll999), 
            size = 0.4, 
            colour = "grey40") +
  geom_line(data = dfCI, 
            aes(x = number.seq, 
                y = number.ul999), 
            size = 0.4, 
            colour = "grey40") +
  geom_hline(data = dfCI, 
             aes(yintercept = fit.mean), 
             size = 0.4, 
             colour = "grey40") +
  coord_cartesian(ylim=c(0,0.05)) +
  annotate("text", x = 1, y = -0.13, label = "95%", size = 3, colour = "grey40") + 
  annotate("text", x = 4.5, y = -0.18, label = "99%", size = 3, colour = "grey40") + 
  ggtitle("Cumulative Fatality Rate by Cumulative Number of COVID-19 Cases") +
  xlab("Cumulative Number of COVID-19 Cases") + 
  ylab("Cumulative Fatality Rate") +
  theme_light() +
  theme(plot.title = element_text(size=12),
        legend.position = c(0.91,0.85), 
        legend.title = element_text(size=7),
        legend.text = element_text(size=7),
        legend.background = element_rect(colour = "grey60", linetype = "dotted"),
        legend.key.height = unit(0.3, "cm"))
p
```
:::

#### 4.5.4 Interactive funnel plot: [plotly](https://www.rdocumentation.org/packages/plotly/versions/4.10.4) + [ggplot2](https://www.rdocumentation.org/packages/ggplot2/versions/3.5.0)

We can make the funnel plot interactive with `ggplotly()` of **plotly** r package. 

::: panel-tabset
## Graph()
```{r}
#| echo = FALSE 

fp_ggplotly <- ggplotly(p,
  tooltip = c("label", 
              "x", 
              "y"))
fp_ggplotly
```

## Code()
```{r}
#| eval = FALSE

fp_ggplotly <- ggplotly(p,
  tooltip = c("label", 
              "x", 
              "y"))
fp_ggplotly
```
:::

### 4.6 References
-   Kam, T.S(2024). [Visualising Uncertainty](https://r4va.netlify.app/chap12)

-   [funnelPlotR](https://nhs-r-community.github.io/FunnelPlotR/index.html) package.

-   [Funnel Plots for Indirectly-standardised ratios](https://nhs-r-community.github.io/FunnelPlotR/articles/funnel_plots.html)

-   [Changing funnel plot options](https://nhs-r-community.github.io/FunnelPlotR/articles/changing_funnel_plot_options.html)

-   [ggplot2 package](https://ggplot2.tidyverse.org/)

### 4.8 Takeaway

::: callout-tip
## Key takeaways

-   Learnt about the general concepts of funnel plots which as specialized data visualizations used for unbiased comparisons between entities like outlets, stores, or sub-districts. Can help to identify outliers by comparing performance metrics against expected variability.
-   Some of the R packages used - `FunnelPlotR`,`ggplot2`,`plotly`,`ggplot2`,`knitr` etc. 
-   Learnt about funnel plot customization with R, using `limit`, `label_outliers`, `poisson_limits`,`OD_adjust`, `xrange`, `yrange`, `title`, `x_label`, and `y_label` etc. -   Learnt that it is possible to convert static `ggplot2` plots into interactive plots using `ggplotly()`.
:::

### 4.9 Further exploration
