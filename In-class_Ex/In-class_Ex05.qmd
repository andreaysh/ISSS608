---
title: "In-class Exercise 05"
author: "Andrea Yeo"
date-modified: "last-modified"
execute:
  echo: true
  eval: true
  warning: false
  freeze: true
---
## 1. Getting started

### 1.1 Installing and loading of R packages

```{r}
pacman::p_load(tidyverse, readxl, SmartEDA, easystats, gtsummary, ggstatsplot)
```
-   `readxl()`: Function from the readxl package used to read .xls (Excel 97-2003) files into R.
-   `SmartEDA()`: Automates exploratory data analysis (EDA) by generating summaries, visualizations, and reports for both numerical and categorical variables.
-   `easystats()`: Provides a collection of packages for easy, intuitive, and efficient statistical analysis, including model evaluation, data visualization, and reporting.

### 1.2 Importing the data

```{r}
car_resale <- read_xls("data/ToyotaCorolla.xls", 
                       "data")
car_resale
```
### 1.3 Understanding the data
#### 1.3.1 Using Summary() 

```{r}
summary(car_resale)
```
#### 1.3.2 Using list() 
```{r}
list(car_resale)
```
#### 1.3.3 Using glimpse() 
```{r}
glimpse(car_resale)
```

### 1.3 Data overview
**What does `SmartEDA`package `type` means?**

-   `Type = 1`: generates descriptive statistics for numerical and categorical variables, including summaries like mean, median, missing values, and unique counts.
-   `Type = 2`: generates data distribution summaries, including frequency tables for categorical variables and histogram/distribution plots for numerical variables.

#### 1.3.1 When `type = 1`

```{r}
car_resale %>%
  ExpData(type = 1)
```
#### 1.3.2 When `type = 2`

```{r}
car_resale %>%
  ExpData(type = 2)
```

### 1.4 Data wrangling
The below code reads an Excel file, converts the Id column to a character, and transforms all columns in cols into factors.

```{r}
cols <- c("Mfg_Month", "HP_Bin", "CC_bin", "Doors", "Gears", "Cylinders", 
          "Fuel_Type", "Color", "Met_Color", "Automatic", "Mfr_Guarantee", 
          "BOVAG_Guarantee", "ABS", "Airbag_1", "Airbag_2", "Airco", 
          "Automatic_airco", "Boardcomputer", "CD_Player", "Central_Lock", 
          "Powered_Windows", "Power_Steering", "Radio", "Mistlamps", 
          "Sport_Model", "Backseat_Divider", "Metallic_Rim", "Radio_cassette", 
          "Tow_Bar")

car_resale <- read_xls("data/ToyotaCorolla.xls", 
                       sheet = "data") %>%
  mutate(Id = as.character(Id)) %>%
  mutate_each_(funs(factor(.)),cols)
```

### 1.5 `SmartEDA` - Data Visualization
#### 1.5.1 Numerical Variable Distribution Visualization for Car Resale Data - target = 'NULL'

-   `target =  NULL`: No target variable is specified, so the function will analyze and visualize all numerical variables independently

```{r}
car_resale %>%
  ExpNumViz(target = NULL, 
            nlim = 10, 
            Page = c(2,2))
```

#### 1.5.2 Numerical Variable Distribution Visualization for Car Resale Data - target = 'Price'

-   `target =  Price`: Function will analyze numerical variables in relation to the "Price" column.

```{r}
car_resale %>%
  ExpNumViz((target="Price"),
            nlim = 10,
            Page=c(2,2))

```

#### 1.5.3 Bar plots for all categorical varaibles

```{r}
#| fig-width: 12
#| fig-height: 10

car_resale %>%
  ExpCatViz(target=NULL,
            col = "light green",
            clim=10,
            margin=2,
            Page = c(4,4),
            sample=16)

```

### 1.6 Multiple Regression Model using lm()

```{r}
model <- lm(Price ~ Age_08_04 + Mfg_Year + KM + 
              Weight + Guarantee_Period, data = car_resale)
model
```
### 1.7 Checking for multicolinearity

```{r}
check_collinearity(model)
```
#### 1.7.1 Identify variables with high multicollinearity

-   When 1 - 5 : Low collinearity
-   When 5 - 10: Middle collinearity
-   Above 10: Have high multi collinearity

```{r}
check_c <- check_collinearity(model)
plot(check_c)

```
-   **Remove the `Mfg_Year` as it has multi-collinearity**

```{r}
model1 <- lm(Price ~ Age_08_04 + KM + 
              Weight + Guarantee_Period, data = car_resale)

```

### 1.8 Checking normality assumption

```{r}
check_n <- check_normality(model1)
plot(check_n)
```
### 1.9 Check model for homogeneity of variances

-   To check for homogeneity of variances
-   Better to have 2 graphs

```{r}

check_h <- check_heteroscedasticity(model1)

plot(check_h)
```

### 2.0 Complete check

```{r}
check_model(model1)
```
### 2.1 Visualising Regression Parameters using see methods 

```{r}
tbl_regression(model1, 
               intercept = TRUE) %>%
  add_glance_source_note(
    label = list(sigma = "\U03c3"),
    include = c("r.squared", "adj.r.squared",
                "AIC", "statistic",
                "p.value", "sigma")  
  )
         
```
### 2.2 Visualising Regression Parameters

```{r}
library(parameters)
model_parameters(model1)

```
#### 2.2.1 Visualising Regression Parameters using `see` methods

```{r}
p_model1 <- parameters(model1)
```

#### 2.2.2 Visualising Regression Parameters using `ggcoefstats()` methods

```{r}
ggcoefstats(model1, 
            output = "plot")
```

