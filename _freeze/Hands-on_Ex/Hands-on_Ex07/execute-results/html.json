{
  "hash": "1b4d5a5fee664ac12e02243035a89768",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Hands-on Exercise 07\"\nauthor: \"Andrea Yeo\"\ndate-modified: \"last-modified\"\nexecute:\n  echo: true\n  eval: true\n  warning: false\n  freeze: true\n---\n\n\n\n[With the assistance of ChatGPT]{style=\"font-size: 14px;\"}\n\n## 7. Visualising and Analysing Time-oriented Data\n\n### 7.1 Learning Outcome\n\nIn this hands-on exercise, we will use R packages to create several visualizations:\n\n-   Create a calendar heatmap using [ggplot2](https://www.rdocumentation.org/packages/ggplot2/versions/3.5.0)\n\n-   Create a cycle plot using [ggplot2](https://www.rdocumentation.org/packages/ggplot2/versions/3.5.0)\n\n-   Create a slopegraph\n\n-   Create a horizon chart\n\n### 7.2 Installing and launching R packages\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(scales, viridis, lubridate, ggthemes,\n               gridExtra, readxl, knitr, data.table, \n               tidyverse, CGPfunctions)\n```\n:::\n\n\n\n### 7.3 Importing data and data preparation\n\nThe following code imports the *eventlog.csv* file into our R environment.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nattacks <- read_csv(\"data/eventlog.csv\")\n```\n:::\n\n\n\n#### 7.3.1 Installing and launching R packages\n\nWe will use `kable()` to review the structure of the imported data frame.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkable(head(attacks))\n```\n\n::: {.cell-output-display}\n\n\n|timestamp           |source_country |tz              |\n|:-------------------|:--------------|:---------------|\n|2015-03-12 15:59:16 |CN             |Asia/Shanghai   |\n|2015-03-12 16:00:48 |FR             |Europe/Paris    |\n|2015-03-12 16:02:26 |CN             |Asia/Shanghai   |\n|2015-03-12 16:02:38 |US             |America/Chicago |\n|2015-03-12 16:03:22 |CN             |Asia/Shanghai   |\n|2015-03-12 16:03:45 |CN             |Asia/Shanghai   |\n\n\n:::\n:::\n\n\n\nThe dataset includes three columns: **timestamp, source_country, and tz.**\n\n-   **timestamp**: Contains date-time values in POSIXct format.\n\n-   **source_country**: Represents the attack source using ISO 3166-1 alpha-2 country codes.\n\n-   **tz**: Stores the time zone of the source IP address.\n\n#### 7.3.2 Data preparation\n\nBefore creating the calendar heatmap, we will write a function to derive two new fields:\n\n1.  **wkday (weekday)** and\n\n2.  **hour**\n\nfrom the timestamp.\n\n**Step 1**: Deriving weekday and hour of day fields\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmake_hr_wkday <- function(ts, sc, tz) {\n  real_times <- ymd_hms(ts, \n                        tz = tz[1], \n                        quiet = TRUE)\n  dt <- data.table(source_country = sc,\n                   wkday = weekdays(real_times),\n                   hour = hour(real_times))\n  return(dt)\n  }\n```\n:::\n\n\n\n::: callout-note\n-   [ymd_hms()](https://lubridate.tidyverse.org/reference/ymd_hms.html) and [hour()](https://lubridate.tidyverse.org/reference/hour.html) are from [**lubridate**](https://lubridate.tidyverse.org/) package, and\n\n-   [weekdays()](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/weekdays) is a **base** R function.\n:::\n\n**Step 2**: Deriving the attacks tibble data frame\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwkday_levels <- c('Saturday', 'Friday', \n                  'Thursday', 'Wednesday', \n                  'Tuesday', 'Monday', \n                  'Sunday')\n\nattacks <- attacks %>%\n  group_by(tz) %>%\n  do(make_hr_wkday(.$timestamp, \n                   .$source_country, \n                   .$tz)) %>% \n  ungroup() %>% \n  mutate(wkday = factor(\n    wkday, levels = wkday_levels),\n    hour  = factor(\n      hour, levels = 0:23))\n```\n:::\n\n\n\nTable below shows the tidy tibble table after processing.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkable(head(attacks))\n```\n\n::: {.cell-output-display}\n\n\n|tz           |source_country |wkday    |hour |\n|:------------|:--------------|:--------|:----|\n|Africa/Cairo |BG             |Saturday |20   |\n|Africa/Cairo |TW             |Sunday   |6    |\n|Africa/Cairo |TW             |Sunday   |8    |\n|Africa/Cairo |CN             |Sunday   |11   |\n|Africa/Cairo |US             |Sunday   |15   |\n|Africa/Cairo |CA             |Monday   |11   |\n\n\n:::\n:::\n\n\n\n### 7.4 Building the calendar heatmaps\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngrouped <- attacks %>% \n  count(wkday, hour) %>% \n  ungroup() %>%\n  na.omit()\n\nggplot(grouped, \n       aes(hour, \n           wkday, \n           fill = n)) + \ngeom_tile(color = \"white\", \n          size = 0.1) + \ntheme_tufte(base_family = \"Helvetica\") + \ncoord_equal() +\nscale_fill_gradient(name = \"# of attacks\",\n                    low = \"sky blue\", \n                    high = \"dark blue\") +\nlabs(x = NULL, \n     y = NULL, \n     title = \"Attacks by weekday and time of day\") +\ntheme(axis.ticks = element_blank(),\n      plot.title = element_text(hjust = 0.5),\n      legend.title = element_text(size = 8),\n      legend.text = element_text(size = 6) )\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex07_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\n::: callout-note\n## Things to learn from the code\n\n-   A **tibble** data table (*`grouped`*) is created by aggregating attack data based on the `wkday` and `hour` fields.\n-   A new field, **n**, is added by using the `group_by()` and `count()` functions.\n-   `na.omit()` is used to remove missing values.\n-   `geom_tile()` plots tiles (grids) at each (x, y) position, with `color` and `size` specifying the border color and line thickness.\n-   `theme_tufte()` from the [`ggthemes`](https://www.rdocumentation.org/packages/ggthemes/versions/3.4.2/topics/ggthemes_data) package is used to eliminate unnecessary chart elements.\n-   `coord_equal()` ensures the plot maintains a 1:1 aspect ratio.\n-   `scale_fill_gradient()` applies a two-color gradient (low to high).\n:::\n\n#### 7.4.1 Building multiple calendar heatmaps\n\n**Tasks assigned**: Building multiple heat maps for the top four countries with the highest number of attacks\n\n**Step 1**: Deriving attack by country object\n\nTo determine the top four countries with the highest number of attacks, the data needs to be processed by\n\n-   Count Attacks: Aggregate the number of attacks per country\n-   Calculate Percentage: Compute the proportion of attacks for each country\n-   Store Results: Save the output as a tibble data frame\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nattacks_by_country <- count(\n  attacks, source_country) %>%\n  mutate(percent = percent(n/sum(n))) %>%\n  arrange(desc(n))\n```\n:::\n\n\n\n**Step 2**: Preparing the tidy data frame Next, we will extract the attack records of the top 4 countries from *attacks* data frame and save the data in a new tibble data frame (i.e. *top4_attacks*).\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntop4 <- attacks_by_country$source_country[1:4]\ntop4_attacks <- attacks %>%\n  filter(source_country %in% top4) %>%\n  count(source_country, wkday, hour) %>%\n  ungroup() %>%\n  mutate(source_country = factor(\n    source_country, levels = top4)) %>%\n  na.omit()\n```\n:::\n\n\n\n#### 7.4.2 Plotting multiple calendar heatmaps\n\n**Step 3**: Plotting the Multiple Calender Heat map by using [ggplot2](https://www.rdocumentation.org/packages/ggplot2/versions/3.5.0) package.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(top4_attacks, \n       aes(hour, \n           wkday, \n           fill = n)) + \n  geom_tile(color = \"white\", \n          size = 0.1) + \n  theme_tufte(base_family = \"Helvetica\") + \n  coord_equal() +\n  scale_fill_gradient(name = \"# of attacks\",\n                    low = \"sky blue\", \n                    high = \"dark blue\") +\n  facet_wrap(~source_country, ncol = 2) +\n  labs(x = NULL, y = NULL, \n     title = \"Attacks on top 4 countries by weekday and time of day\") +\n  theme(axis.ticks = element_blank(),\n        axis.text.x = element_text(size = 7),\n        plot.title = element_text(hjust = 0.5),\n        legend.title = element_text(size = 8),\n        legend.text = element_text(size = 6) )\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex07_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n\n### 7.5 Plotting cycle plot\n\nThe below section will covers how to create a cycle plot using ggplot2 to visualize time-series patterns and trends in visitor arrivals from Vietnam programmatically.\n\n#### 7.5.1 Importing data\n\nIn this exercise, *arrivals_by_air.xlsx* is imported using `read_excel()` from the **readxl** package and stored as a tibble data frame named air.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nair <- read_excel(\"data/arrivals_by_air.xlsx\")\n```\n:::\n\n\n\n#### 7.5.2 Deriving month and year fields\n\nTwo new fields called *month* and *year* will be derived from *Month-Year* field\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nair$month <- factor(month(air$`Month-Year`), \n                    levels=1:12, \n                    labels=month.abb, \n                    ordered=TRUE) \nair$year <- year(ymd(air$`Month-Year`))\n```\n:::\n\n\n\n#### 7.5.3 Extracting the target country\n\nThe code below is used to extract data for the target country (i.e. Vietnam).\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nVietnam <- air %>% \n  select(`Vietnam`, \n         month, \n         year) %>%\n  filter(year >= 2010)\n```\n:::\n\n\n\n#### 7.5.4 Computing year average arrivals by month\n\nThe code uses `group_by()` and `summarise()` of **dplyr** to compute year average arrivals by month.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhline.data <- Vietnam %>% \n  group_by(month) %>%\n  summarise(avgvalue = mean(`Vietnam`))\n```\n:::\n\n\n\n#### 7.5.5 Plotting the cycle plot\n\nThe code below is used to plot the cycle plot.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() + \n  geom_line(data=Vietnam,\n            aes(x=year, \n                y=`Vietnam`, \n                group=month), \n            colour=\"pink\") +\n  geom_hline(aes(yintercept=avgvalue), \n             data=hline.data, \n             linetype=6, \n             colour=\"blue\", \n             size=0.5) + \n  facet_grid(~month) +\n  labs(axis.text.x = element_blank(),\n       title = \"Visitor arrivals from Vietnam by air, Jan 2010-Dec 2019\") +\n  xlab(\"\") +\n  ylab(\"No. of Visitors\") +\n  theme_tufte(base_family = \"Helvetica\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex07_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n\n### 7.6 Plotting slopegraph\n\nIn this section we will learn how to plot a [slopegraph](https://www.storytellingwithdata.com/blog/2020/7/27/what-is-a-slopegraph) by using R.\n\nBefore getting start, make sure that [**CGPfunctions**](https://www.rdocumentation.org/packages/CGPfunctions/versions/0.6.3/topics/CGPfunctions) has been installed and loaded onto R environment.\n\nTo learn more about the function, we can refer to [Using newggslopegraph](https://cran.r-project.org/web/packages/CGPfunctions/vignettes/Using-newggslopegraph.html)\n\n`newggslopegraph()` and its arguments can be referenced at this [link](https://www.rdocumentation.org/packages/CGPfunctions/versions/0.6.3/topics/newggslopegraph).\n\n#### 7.6.1 Importing the data\n\nWe will use the code below to import the rice data set into R environment.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrice <- read_csv(\"data/rice.csv\")\n```\n:::\n\n\n\nWe will check the dataset using below\n\n-   `glimpse()`: provides a transposed overview of a dataset, showing variables and their types in a concise format.\n-   `head()`: displays the first few rows of a dataset (default is 6 rows) to give a quick preview of the data.\n-   `summary()`: generates a statistical summary of each variable, including measures like mean, median, and range for numeric data.\n-   `duplicated()`:returns a logical vector indicating which elements or rows in a vector or data frame are duplicates.\n-   `Sum(is.na())`: counts the number of missing values (NA) in each column of the data frame.\n-   `spec()`: use `spec()` to quickly inspect the column\n\n::: panel-tabset\n## glimpse()\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(rice)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 550\nColumns: 4\n$ Country    <chr> \"China\", \"China\", \"China\", \"China\", \"China\", \"China\", \"Chin…\n$ Year       <dbl> 1961, 1962, 1963, 1964, 1965, 1966, 1967, 1968, 1969, 1970,…\n$ Yield      <dbl> 20787, 23700, 26833, 28289, 29667, 31445, 31006, 31868, 314…\n$ Production <dbl> 56217601, 65675288, 76439280, 85853780, 90705630, 98403990,…\n```\n\n\n:::\n:::\n\n\n\n## head()\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(rice)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 4\n  Country  Year Yield Production\n  <chr>   <dbl> <dbl>      <dbl>\n1 China    1961 20787   56217601\n2 China    1962 23700   65675288\n3 China    1963 26833   76439280\n4 China    1964 28289   85853780\n5 China    1965 29667   90705630\n6 China    1966 31445   98403990\n```\n\n\n:::\n:::\n\n\n\n## summary()\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(rice)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Country               Year          Yield         Production       \n Length:550         Min.   :1961   Min.   :12299   Min.   :   764158  \n Class :character   1st Qu.:1973   1st Qu.:21722   1st Qu.:  6515902  \n Mode  :character   Median :1986   Median :30548   Median : 13351700  \n                    Mean   :1986   Mean   :34945   Mean   : 33829459  \n                    3rd Qu.:1998   3rd Qu.:44713   3rd Qu.: 33488900  \n                    Max.   :2010   Max.   :75967   Max.   :202771840  \n```\n\n\n:::\n:::\n\n\n\n## duplicated()\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrice[duplicated(rice),]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 0 × 4\n# ℹ 4 variables: Country <chr>, Year <dbl>, Yield <dbl>, Production <dbl>\n```\n\n\n:::\n:::\n\n\n\n## sum(is.na())\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsum(is.na(rice))  \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0\n```\n\n\n:::\n:::\n\n\n\n## spec()\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nspec(rice)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\ncols(\n  Country = col_character(),\n  Year = col_double(),\n  Yield = col_double(),\n  Production = col_double()\n)\n```\n\n\n:::\n:::\n\n\n:::\n\nThe rice tibble contains 3 attributes, as shown above:\n\n-   **Categorical attributes:** Country\n\n-   **Continuous attributes:** Year Yield Production\n\n#### 7.6.2 Plotting the slopegraph\n\nThe code below will be used to plot a basic slopegraph\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrice %>% \n  mutate(Year = factor(Year)) %>%\n  filter(Year %in% c(1961, 1980)) %>%\n  newggslopegraph(Year, Yield, Country,\n                Title = \"Rice Yield of Top 11 Asian Counties\",\n                SubTitle = \"1961-1980\",\n                Caption = NULL)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex07_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\n\n\n::: callout-note\n-   For effective data visualisation design, `factor()` is used convert the value type of *Year* field from numeric to factor.\n:::\n\n### 8.0 References\n\n-   Kam, T.S(2024). [Visual Statistical Analysis.](https://r4va.netlify.app/chap17)\n\n### 9.0 Takeaway\n\n::: callout-tip\n## Key takeaways\n\n-   Learn how to plot a calendar heatmap,\n-   Learn how to create a cycle plot (time-series analysis)\n-   Learn how to plot slopegraph which is use to compare trends over time - using `newggslopegraph()` from CGPfunctions\n-   Key R packages used - `ggplot2`, `lubridate`, `dplyr & tidyr`, `ggthemes`, and `CGPfunctions`\n:::\n\n### 9.1 Further exploration\n\n1.  Using `rice` dataset - To explore how *Yield (or produdction)* changes over time for China\n\nObservations:\n\n-   Rice yield in China steadily rises from the 1960s to the 2010s.\n-   By the 1980s, it surpasses the overall average.\n-   Growth continues despite some minor dips.\n-   Yield levels now are multiple times higher than in the early 1960s.\n-   Post-2000, growth appears to slow slightly, as China is moving away from agricultural production.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Filter for China only\nrice_china <- rice %>%\n  filter(Country == \"China\")\n\n# Calculate the overall average Yield\navg_yield <- mean(rice_china$Yield, na.rm = TRUE)\n\n# Plot a simple line chart with average line\nggplot(rice_china, aes(x = Year, y = Yield)) +\n  geom_line(color = \"black\") +\n  geom_hline(yintercept = avg_yield, color = \"red\", linetype = \"dashed\") +\n  labs(title = \"Annual Rice Yield in China\",\n       x = \"Year\",\n       y = \"Yield\") +\n  theme_tufte()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex07_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n:::\n\n\n\n2.  Using `AVERP` dataset - To use slopegraph to explore consumer items over time\n\nObservations:\n\n-   **Significant Price Increase for Certain Items**: Cod Fish (Per Kilogram) saw a substantial increase from 48.6 in 2014 to 66.0 in 2022. Threadfin (Kurau) (Per Kilogram) also experienced a sharp rise from 51.2 to 58.5.\n-   **Moderate Price Increases Across Several Items**: Items like Pork Rib Bones, Streaky Pork, and Squids show steady increases\n-   **Diverging Trends Between Items**: While many items show a gradual increase, seafood and meat products show the highest price surges.Plant-based or non-perishable goods seem to have less extreme price fluctuations.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load necessary libraries\nlibrary(tidyverse)\nlibrary(CGPfunctions)\n\n# Import dataset\ndf <- read_csv(\"data/AVERP.csv\")\n\n# Convert Date column to Date format\ndf$Date <- as.Date(df$Date, format=\"%m/%d/%Y\")\n\n# Extract the year\ndf$Year <- format(df$Date, \"%Y\")\n\n# Select two significant years (earliest and latest)\nyear_min <- min(df$Year)\nyear_max <- max(df$Year)\n\n# Filter dataset for the two selected years\ndf_filtered <- df %>%\n  filter(Year %in% c(year_min, year_max)) %>%\n  group_by(`Consumer Items`, Year) %>%\n  summarise(Avg_Value = round(mean(Values, na.rm = TRUE), 1)) %>%  # Round to 1 decimal place\n  ungroup()\n\n# Convert Year to factor for better visualization\ndf_filtered$Year <- as.factor(df_filtered$Year)\n\n# Plot the slopegraph\nnewggslopegraph(df_filtered, Year, Avg_Value, `Consumer Items`,\n                Title = \"Slopegraph of Consumer Items Over Time\",\n                SubTitle = paste(year_min, \"-\", year_max),\n                Caption = \"Prepared using R\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex07_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "Hands-on_Ex07_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}