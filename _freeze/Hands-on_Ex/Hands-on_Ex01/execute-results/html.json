{
  "hash": "17d70b273e4651f658e872ef69f35da1",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Hands-on Exercise 01\"\nauthor: \"Andrea Yeo\"\ndate-modified: \"last-modified\"\nexecute:\n  echo: true\n  eval: true\n  warning: false\n  freeze: true\n---\n\n\n\n## 1. A Layered Grammar of Graphics: ggplot2 methods\n\n### 1.1 Learning Outcome\n\nIn this chapter, we will learn the basic principles and key components of ggplot2. we will get hands-on experience using these components to create statistical graphics based on the principles of the Layered Grammar of Graphics. By the end, we will be able to apply ggplot2's essential graphical elements to create elegant and functional statistical visualizations.\n\n### 1.2 Getting started\n\n#### 1.2.1 Installing and loading the required libraries\n\nThe code chunk below uses p_load() from the pacman package to check if the tidyverse packages are installed on my computer. If they are, they will be loaded into the R environment.If not, we will proceed to install pacman first.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(tidyverse)\n```\n:::\n\n\n\n#### 1.2.2 Importing data\n\nWe will import *exam_data.csv* into R environment by using the `read.csv()`function and assign it to exam_data\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nexam_data <- read_csv(\"data/Exam_data.csv\", show_col_types = FALSE)\n```\n:::\n\n\n\nWe will check the dataset using below\n\n-   glimpse(): provides a transposed overview of a dataset, showing variables and their types in a concise format.\n-   head(): displays the first few rows of a dataset (default is 6 rows) to give a quick preview of the data.\n-   summary(): generates a statistical summary of each variable, including measures like mean, median, and range for numeric data.\n\n::: panel-tabset\n## glimpse()\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(exam_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 322\nColumns: 7\n$ ID      <chr> \"Student321\", \"Student305\", \"Student289\", \"Student227\", \"Stude…\n$ CLASS   <chr> \"3I\", \"3I\", \"3H\", \"3F\", \"3I\", \"3I\", \"3I\", \"3I\", \"3I\", \"3H\", \"3…\n$ GENDER  <chr> \"Male\", \"Female\", \"Male\", \"Male\", \"Male\", \"Female\", \"Male\", \"M…\n$ RACE    <chr> \"Malay\", \"Malay\", \"Chinese\", \"Chinese\", \"Malay\", \"Malay\", \"Chi…\n$ ENGLISH <dbl> 21, 24, 26, 27, 27, 31, 31, 31, 33, 34, 34, 36, 36, 36, 37, 38…\n$ MATHS   <dbl> 9, 22, 16, 77, 11, 16, 21, 18, 19, 49, 39, 35, 23, 36, 49, 30,…\n$ SCIENCE <dbl> 15, 16, 16, 31, 25, 16, 25, 27, 15, 37, 42, 22, 32, 36, 35, 45…\n```\n\n\n:::\n:::\n\n\n\n## head()\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(exam_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 7\n  ID         CLASS GENDER RACE    ENGLISH MATHS SCIENCE\n  <chr>      <chr> <chr>  <chr>     <dbl> <dbl>   <dbl>\n1 Student321 3I    Male   Malay        21     9      15\n2 Student305 3I    Female Malay        24    22      16\n3 Student289 3H    Male   Chinese      26    16      16\n4 Student227 3F    Male   Chinese      27    77      31\n5 Student318 3I    Male   Malay        27    11      25\n6 Student306 3I    Female Malay        31    16      16\n```\n\n\n:::\n:::\n\n\n\n## summary()\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(exam_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      ID               CLASS              GENDER              RACE          \n Length:322         Length:322         Length:322         Length:322        \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n    ENGLISH          MATHS          SCIENCE     \n Min.   :21.00   Min.   : 9.00   Min.   :15.00  \n 1st Qu.:59.00   1st Qu.:58.00   1st Qu.:49.25  \n Median :70.00   Median :74.00   Median :65.00  \n Mean   :67.18   Mean   :69.33   Mean   :61.16  \n 3rd Qu.:78.00   3rd Qu.:85.00   3rd Qu.:74.75  \n Max.   :96.00   Max.   :99.00   Max.   :96.00  \n```\n\n\n:::\n:::\n\n\n:::\n\n::: callout-tip\n## Reflection\n\n-   Learnt how to load libraries, import/ read excel files\n:::\n\n### 1.3 Introducing ggplot\n\nggplot2 is an R package for creating data-driven graphics based on The Grammar of Graphics. It is also part of the tidyverse family specially designed for visual exploration and communication.\n\nFor more information, visit [ggplot2](https://ggplot2.tidyverse.org/)\n\n#### 1.3.1 R Graphics VS ggplot\n\nLets compare how R Graphics, the core graphical functions of Base R and ggplot plot a simple histogram.\n\n::: panel-tabset\n## R Graphics\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhist(exam_data$MATHS,col = \"#4169e1\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n\n## ggplot2\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, aes(x = MATHS)) +\n  geom_histogram(bins=10, \n                 boundary = 100,\n                 color=\"black\", \n                 fill=\"#4169e1\") +\n  ggtitle(\"Distribution of Maths scores\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n:::\n\n::: callout-tip\n## Reflection\n\n-   While R Graphics offers simpler syntax, [Hadley Wickham](http://varianceexplained.org/r/teach_ggplot2_to_beginners/#comment-1745406157) emphasizes that the true value of ggplot2 lies not in its specific plotting syntax, but in the transformative way it approaches visualization. It enables users to think of visualizations as a method of mapping variables to the visual attributes of geometric objects, creating a powerful framework for understanding and perceiving data.\n:::\n\n### 1.4 Grammar of Graphics\n\nThe Grammar of Graphics, introduced by Leland Wilkinson in 1999, provides a structured approach to creating meaningful data visualizations. It breaks graphs into semantic components like scales and layers, offering a framework to answer the question: What is a statistical graphic?\n\nThe key principles I’ve learned are:\n\n-   Graphics are built from distinct layers of grammatical elements.\n\n-   Meaningful plots are achieved through aesthetic mapping.\n\nThis grammar helps me see how complex graphics are composed, uncover connections between seemingly different visuals, and understand the foundation of diverse visualizations. It also guides me toward recognizing well-formed, meaningful graphics while acknowledging that not all grammatically correct visuals will make sense.\n\n#### 1.4.1 A layered grammar of graphics\n\nFigure shows the seven grammars of ggplot2: [A layered grammar of graphics](https://vita.had.co.nz/papers/layered-grammar.html)\n\n![A layered grammar of graphics](/images/Pic06.jpg){width=\"501\"}\n\nThe building blocks of the Grammar of Graphics are:\n\n-   **Data:** The dataset being visualized.\n-   **Aesthetics:** Attributes like position, color, size, shape, or transparency that map data to visual elements.\n-   **Geometries:** Visual elements representing data, such as points, bars, or lines.\n-   **Facets:** Subsets of data used to create multiple variations of a graph (e.g., panels).\n-   **Statistics:** Transformations summarizing data, such as means or confidence intervals.\n-   **Coordinate Systems:** The plane where data is plotted (e.g., Cartesian or polar).\n-   **Themes:** Non-data components like titles, axis labels, or legend formatting.\n\n### 1.5 Essential Grammatical Elements in ggplot2: data\n\nLet us call the `ggplot( )` function using the code chunk below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n\n::: callout-note\n-   A blank canvas is created with `ggplot()`.\n-   `ggplot()` initializes a ggplot object.\n-   The data argument specifies the dataset for plotting.\n-   If the dataset is not already a data.frame, it will be converted to one by fortify().\n:::\n\n### 1.6 Essential Grammatical Elements in ggplot2: [aesthetic mappings](https://ggplot2.tidyverse.org/articles/ggplot2-specs.html)\n\nAesthetic mappings link data attributes to visual characteristics like position, color, size, shape, or transparency, allowing each characteristic to represent information. These mappings are defined using the `aes()` function, and each geom layer can have its own `aes()` specification.\n\nThe code below adds the aesthetic element into the plot.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data,\n       aes(x=MATHS,\n           y=ENGLISH))\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n\n::: callout-note\n-   ggplot includes the x/y axis and the axis's label\n:::\n\n### 1.7 Essential Grammatical Elements in ggplot2: geom\n\nGeometric objects are the visual marks on a plot. A layer combines data, aesthetic mappings, a geometric object (geom), statistical transformations (stat), and position adjustments. Layers are typically created using geom\\_ functions, with options to override default stat or position settings. **Every plot requires at least one geom**, and additional geoms can be added using the + operator.\n\nRefer [here](https://ggplot2.tidyverse.org/reference/#section-layer-geoms) for a more comprehensive list.\n\nBelow are some examples of `geom_`:\n\n-   **geom_point:** for drawing individual points (e.g., a scatter plot)\n-   **geom_line:** for drawing lines (e.g., for a line charts)\n-   **geom_col:** for drawing bars with heights mapped to values in the data (e.g., bar charts).\n-   **geom_boxplot:** for drawing box-and-whisker plots to visualize data distribution and outliers.\n-   **geom_histogram:** for drawing binned values to represent the distribution of a numeric variable (e.g., histograms).\n-   **geom_density:** for drawing smoothed density estimates to visualize the distribution of a numeric variable.\n\n![](/images/Pic07.jpg){width=\"488\"}\n\n#### 1.7.1 Geometric objects: [geom_bar]{style=\"color:#6A5ACD;font-weight:bold;\"}\n\nThe code below plots a bar chart by using `geom_bar()`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n\n#### 1.7.2 Geometric objects: [geom_dotplot]{style=\"color:#6A5ACD;font-weight:bold;\"}\n\nIn a dot plot, the dot width represents the bin width (or maximum width, depending on the binning method), and dots are stacked, with each dot signifying one observation.\n\nThe code below plots a dot plot chart by using `geom_dotplot()`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(dotsize = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n\n::: callout-warning\nTo note that the y scale is not very useful, and can be misleading in this case.\n:::\n\nTo enhance the dotplot visualization, the below *(non exhaustive)* are some arguments that has been added:\n\n-   `scale_y_continuous()`- to turn off the y-axis by setting it to NULL\n-   **binwidth** - specifies the width of the bins or interval used to group the data to - 3.0\n-   **dotsize** - adjusts the size of the dots in the plot to - 0.8\n-   **fill** - specifies the fill color of the dots to - red\n-   **color** - specifies the outline color of the dots to - yellow\n-   **alpha** - specifies the transparency level of the dots to - 0.5\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(binwidth=3.0,         \n               dotsize = 0.8,\n               fill=\"#E15841\",\n               color=\"#E1B941\",\n               alpha=0.5 ) +      \n  scale_y_continuous(NULL,           \n                     breaks = NULL)  \n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n\n#### 1.7.3 Geometric objects: [geom_histogram]{style=\"color:#6A5ACD;font-weight:bold;\"}\n\n`geom_histogram()`in ggplot creates a bar plot that displays the distribution of a continuous variable by dividing the data into bins and counting the number of observations in each bin.\n\nThe code below plots a simple histogram by using values in *MATHS* field of exam_data.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_histogram()  \n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n\n::: callout-note\nThe default number of bins is 30, however one can always adjust the number of bins manually by using the `bins()` argument.\n:::\n\n#### 1.7.4 Modifying a geometric object by changing [geom()]{style=\"color:#6A5ACD;font-weight:bold;\"}\n\nTo enhance the histogram visualization, the below *(non exhaustive)* are some arguments that has been added:\n\n-   **bins** - to change the number of bins to - 20\n-   **fill** - specifies the fill color of the histogram to - red\n-   **color** - specifies the outline color of the histogram to - green\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20,            \n                 color=\"#A8E141\",      \n                 fill=\"#E15841\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n\n#### 1.7.5 Modifying a geometric object by changing [aes()]{style=\"color:#6A5ACD;font-weight:bold;\"}\n\nThe code below changes the interior colour of the histogram (i.e. fill) by using a sub-group of aes().\n\nIn this case, the fill is based on GENDER.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x= MATHS, \n           fill = GENDER)) +\n  geom_histogram(bins=20, \n                 color=\"grey30\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n\nWe can also specify the color of the fill based on GENDER.\n\nIn this case, we used the `scale_fill_manual()` function to assign specific colors to each gender. E.g.:\n\n-   <p><strong>[Pink</strong>]{style=\"color: pink;\"} for Female</p>\n\n-   <p><strong>[Blue</strong>]{style=\"color: blue;\"} for Male</p>\n\n-   while keeping the outline [<strong>grey</strong>]{style=\"color: grey;\"}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = exam_data, \n       aes(x = MATHS, \n           fill = GENDER)) +\n  geom_histogram(bins = 20, \n                 color = \"grey30\") +\n  scale_fill_manual(values = c(\"Female\" = \"pink\", \"Male\" = \"blue\"))\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n\n::: callout-note\nThis approach can be used to color, fill and alpha of the geometric.\n:::\n\n#### 1.7.6 Geometric objects: [geom_density]{style=\"color:#6A5ACD;font-weight:bold;\"}\n\nThe [`geom_density()`](https://ggplot2.tidyverse.org/reference/geom_density.html) function computes and visualizes a [kernel density estimate](https://en.wikipedia.org/wiki/Kernel_density_estimation), which provides a smooth approximation of the data's distribution.\n\nIt serves as a useful alternative to histograms for continuous data, particularly when the data originates from an underlying smooth distribution.\n\nThe code below plots the distribution of Maths scores in a kernel density plot.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_density()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n\nThe code below plots two kernel density lines by using *color* or *fill* arguments of `aes()`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x = MATHS, \n           colour = GENDER)) +\n  geom_density()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\n\nLikewise, by using `scale_color_manual()` function, we can map the colors of each gender explicitly, where\n\n-   <p><strong>[Pink</strong>]{style=\"color: pink;\"} for Female</p>\n\n-   <p><strong>[Blue</strong>]{style=\"color: blue;\"} for Male</p>\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = exam_data, \n       aes(x = MATHS, \n           colour = GENDER)) +\n  geom_density() +\n  scale_color_manual(values = c(\"Female\" = \"pink\", \"Male\" = \"blue\"))\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\n\n#### 1.7.7 Geometric objects: [geom_boxplot]{style=\"color:#6A5ACD;font-weight:bold;\"}\n\n`geom_boxplot()` function visualizes continuous data by displaying five key summary statistics: the median, the upper and lower hinges (quartiles), the whiskers, and individual outliers.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(y = MATHS,       \n           x= GENDER)) +    \n  geom_boxplot()    \n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\n\nTo enhance the boxplot visualization, the below *(non exhaustive)* are some arguments that has been added:\n\n-   **fill** - fills the boxplot with different colors based on a grouping variable - purple\n-   **color** - specifies the color of the boxplot borders to - green\n-   **outlier.color** - specifies the outlier color of the boxplot to - red\n-   **outlier.shape** - specifies the shape of the outlier points to - 16\n-   **alpha** - adjust the transparency of the boxplot fill - 0.7\n-   **width** - adjusts the width of the boxplots to - 0.7\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = exam_data, \n       aes(y = MATHS,       \n           x = GENDER)) +    \n  geom_boxplot(fill = \"#6A5ACD\",      # Fills the boxes with a color\n               color = \"#ABE141\",     # Sets the border color of the boxes\n               outlier.color = \"red\",  # Colors the outliers\n               outlier.shape = 16,     # Sets the shape of the outliers\n               alpha = 0.7,            # Adjusts the transparency of the boxes\n               width = 0.7)            # Sets the width of the boxes\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n:::\n\n\n\nLikewise, to specify different fill colors for female and male, we need to map the fill aesthetic to the Gender variable inside `aes()` and then define the specifc colors using `scale_fill_manual()`.\n\n-   <p><strong>[Pink</strong>]{style=\"color: pink;\"} for Female</p>\n\n-   <p><strong>[Blue</strong>]{style=\"color: blue;\"} for Male</p>\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = exam_data, \n       aes(y = MATHS,       \n           x = GENDER, \n           fill = GENDER)) +   # Map fill aesthetic to GENDER\n  geom_boxplot(color = \"#ABE141\",      # Sets the border color of the boxes\n               outlier.color = \"red\",  # Colors the outliers\n               outlier.shape = 16,     # Sets the shape of the outliers\n               alpha = 0.7,            # Adjusts the transparency of the boxes\n               width = 0.7) +          # Sets the width of the boxes\n  scale_fill_manual(values = c(\"Female\" = \"pink\", \"Male\" = \"blue\"))  # Custom colors\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n\n\n\n[Notches](https://sites.google.com/site/davidsstatistics/davids-statistics) in box plots help visually determine if the medians of distributions differ. Non-overlapping notches indicate distinct medians.\n\nThe code below plots the distribution of Maths scores by gender in notched plot instead of boxplot.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot(notch=TRUE)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\n\n\nLikewise, additional arguments can be added to improve the overall visualization of the notched plot\n\n-   **fill** - fills the notched plot with different colors based on a grouping variable\n-   **color** - specifies the color of the notched plot borders to - black\n-   **outlier.color** - specifies the outlier color of the boxplot to - red\n-   **outlier.shape** - specifies the shape of the outlier points to - 8\n-   **alpha** - adjust the transparency of the boxplot fill - 0.9\n-   **notchwidth** - adjusts the width of the notches for improved clarity - 0.5\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = exam_data, \n       aes(y = MATHS, \n           x = GENDER, \n           fill = GENDER)) +  # Add fill to differentiate genders\n  geom_boxplot(notch = TRUE, \n               outlier.colour = \"red\",   # Highlight outliers in red\n               outlier.shape = 8,       # Use a different shape for outliers\n               notchwidth = 0.5,        # Adjust the notch width for emphasis\n               color = \"black\",\n               alpha = 0.9) +      \n  scale_fill_manual(values = c(\"Female\" = \"pink\", \"Male\" = \"blue\"))\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n:::\n\n\n\n::: callout-note\nTo refer to [here](https://www.datanovia.com/en/blog/ggplot-point-shapes-best-tips/) for ggplot point shapes best tips and tricks\n:::\n\n#### 1.7.8 Geometric objects: [geom_violin]{style=\"color:#6A5ACD;font-weight:bold;\"}\n\n[geom_violin](https://ggplot2.tidyverse.org/reference/geom_violin.html) creates violin plots, which are useful for comparing multiple data distributions. Unlike density curves, which can overlap and become hard to interpret, violin plots place distributions side by side, making comparisons clearer and more visually accessible.\n\nThe code below plots the distribution of Maths score by gender using violin plots.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_violin()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n:::\n\n\n\nLikewise, additional arguments can be added to improve the overall visualization of the violin plot\n\n-   **fill** - maps the violin fill color to gender\n-   `scale_fill_manual()` - assigns custom colors for Female and Male\n-   **trim** - ensures the plot displayes the full range of data, even for smaller distributions\n-   **color** - adds an outline to make the violins visually distinct\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = exam_data, \n       aes(y = MATHS, \n           x = GENDER, \n           fill = GENDER)) +  # Map fill to GENDER\n  geom_violin(trim = FALSE,   # Show the full range of the data\n              scale = \"width\", # Adjust width for comparability\n              color = \"black\") +  # Add a black outline to the violins\n  scale_fill_manual(values = c(\"Female\" = \"pink\", \n                               \"Male\" = \"blue\"))\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-26-1.png){width=672}\n:::\n:::\n\n\n\n#### 1.7.9 Geometric objects: [geom_point]{style=\"color:#6A5ACD;font-weight:bold;\"}\n\n`geom_point()` is useful for creating scatterplot.\n\nThe code below plots a scatterplot showing the Maths and English grades of pupils by using `geom_point()`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() \n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-27-1.png){width=672}\n:::\n:::\n\n\n\nLikewise, additional arguments can be added to improve the overall visualization of the scatter plot\n\n-   **color** - set all points to a fixed blue color\n-   **size** - set the size of the points to a fixed value (adjustable) to - 3\n-   **alpha** - adds transparency to reduce overlap if points are cluttered\n-   **shape** - set the apperance of the points in the scatter plot (e.g.: square, circle, triangle)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = exam_data, \n       aes(x = MATHS, \n           y = ENGLISH)) +\n  geom_point(color = \"blue\", size = 3, alpha = 0.5, shape = 20)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-28-1.png){width=672}\n:::\n:::\n\n\n\n::: callout-note\nTo refer to [here](https://www.datanovia.com/en/blog/ggplot-point-shapes-best-tips/) for ggplot point shapes best tips and tricks\n:::\n\n#### 1.7.10 Combining geometric objects\n\nThe code below plots the data points on the boxplots by using both `geom_boxplot()` and `geom_point()`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot() +                    \n  geom_point(position=\"jitter\", \n             size = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-29-1.png){width=672}\n:::\n:::\n\n\n\n::: callout-tip\n## Reflection\n\n-   Learnt about the different geometric objects such as `geom_bar`,`geom_dotplot`,`geom_histogram`,`geom_density`, `geom_boxplot`,`geom_violin`,`geom_point` etc.\n\n-   Learnt about how to combine different geometric objects together in one chart - e.g.: `geom_boxplot` and `geom_point`\n:::\n\n### 1.8 Essential grammatical elements in ggplot2: stat\n\nThe [Statistics functions](https://ggplot2.tidyverse.org/reference/#stats) statistically transforms data, as a form of summary.\n\nExample include: - calculating the frequency of variable values - calculating the mean - determing confidence limits\n\nThere are two ways to use these functions: - add a `stat_()` function and override the default geom, or - add a `geom_()` function and override the default stat.\n\n#### 1.8.1 Working with [stat()]{style=\"color:#6A5ACD;font-weight:bold;\"}\n\nThe boxplots below are incomplete because the means are not shown.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-30-1.png){width=672}\n:::\n:::\n\n\n\n#### 1.8.2 Working with [stat_summary()]{style=\"color:#6A5ACD;font-weight:bold;\"}\n\nThe code below uses the `stat_summary()` function to add mean values by replacing the default geometric layer (geom).\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  stat_summary(geom = \"point\",       \n               fun = \"mean\",         \n               colour =\"blue\",        \n               size=4) \n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-31-1.png){width=672}\n:::\n:::\n\n\n\n#### 1.8.3 Working with [geom()]{style=\"color:#6A5ACD;font-weight:bold;\"} method\n\nThe code below uses the `geom()` function to add mean values by replacing the default geometric layer (geom).\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  geom_point(stat=\"summary\",        \n             fun=\"mean\",           \n             colour=\"blue\",          \n             size=4)          \n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-32-1.png){width=672}\n:::\n:::\n\n\n\n::: callout-tip\n## Reflection\n\n-   Both codes achieve the same result - boxplot with mean values as blue points overlaid on the plot\n-   The first code uses `stat_summary` explicitly where summary is calculated `fun = \"mean\"`, and then visualized using the geometry `geom=\"point\"`. It provides more flexibility if one want to switch the geometry.\n-   The second code uses `geom_point` with `stat=\"summary\"`, where it computes the mean and plots it directly.\n-   Overall, I would prefer the second code as it feel more intuitive and focuses on using a geometry `geom_point` and overridding its default statistical transformation.\n:::\n\n#### 1.8.4 Adding a best fit curve on a scatterplot?\n\nThe scatterplot below illustrates the relationship between Maths and English grades.\n\nAdding a best-fit curve can enhance its interpretability.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\necho=FALSE\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() \n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-33-1.png){width=672}\n:::\n:::\n\n\n\n`geom_smooth()` is used to plot a best fit curve on the scatterplot.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(size=0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-34-1.png){width=672}\n:::\n:::\n\n\n\n::: callout-note\nThe default method used is *LOESS - Locally Estimted Scatterplot Smoothing* which refers to a regression method used for smoothing data points in a scatterplot, useful for capturing non-linear trends in the data.\n:::\n\nThe default method can be overriden as shown below:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              linewidth=0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-35-1.png){width=672}\n:::\n:::\n\n\n\n::: callout-note\nIn this case, `method = \"lm\"` specifies that a linear regression line should be fitted to the data.\n\nRefer [here](https://ggplot2.tidyverse.org/reference/geom_smooth.html) for more information on the different methods available in `geom_smooth()`.\n:::\n\nLikewise, additional arguments can be added to improve the overall visualization of the scatter plot\n\n-   **color** - sets the color of the regression line\n-   **size** - adjusts the thickness of the line\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = exam_data, \n       aes(x = MATHS, y = ENGLISH)) +\n  geom_point() +\n  geom_smooth(method = \"lm\", color = \"red\", size = 1)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-36-1.png){width=672}\n:::\n:::\n\n\n\n::: callout-tip\n## Reflection\n\n-   Learnt the two ways to add statistical functions to ggplot2 - `stat_()` and `geom_()`\n-   Learnt how to incorporate a best fit curve on to the scatterplot `geom_smooth()`\n-   Learnt the different regression methods available in`geom_smooth()`\n:::\n\n### 1.9 Essential grammatical elements in ggplot2: Facets\n\nFacetting in `ggplot2` creates small multiples, or trellis plots, to display different subsets of data. This approach is an alternative to using aesthetics (such as color or shape) for displaying additional variables. There are two main types of faceting in `ggplot2`:\n\n-   `facet_wrap()` : wraps multiple plots into a single panel, typically based on a single categorical variable. It will automatically arranges the plots into a grid.\n\n-   `facet_grid()` : organizes plots into a grid based on the values of two categorical variables, one for rows and the other for columns.\n\n#### 1.9.1 Working with [facet_wrap()]{style=\"color:#6A5ACD;font-weight:bold;\"}\n\n[facet_wrap](https://ggplot2.tidyverse.org/reference/facet_wrap.html) arranges a 1D sequence of panels into a 2D layout, making better use of screen space, especially on rectangular displays. It is often more efficient than facet_grid() for displaying a variable across multiple categories\n\nThe code below produces a 2D matrix of '*MATHS*' histograms grouped by variable '*CLASS*' using `facet_wrap(~CLASS)`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_wrap(~ CLASS)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-37-1.png){width=672}\n:::\n:::\n\n\n\n#### 1.9.2 Working with [facet_grid()]{style=\"color:#6A5ACD;font-weight:bold;\"}\n\n[facet_grid](https://ggplot2.tidyverse.org/reference/facet_grid.html) creates a matrix of panels based on two discrete variables, one for rows and the other for columns. It is most useful when both variables have all possible combinations in the data.\n\nThe code below plots a trellis plot using `facet_grid()`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_grid(~ CLASS)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-38-1.png){width=672}\n:::\n:::\n\n\n\n### 1.10 Essential grammatical elements in ggplot2: Coordinates\n\nThe Coordinates functions map the position of objects onto the plane of the plot.\n\nThere are a number of different possible coordinate systems to use:\n\n-   [`coord_cartesian()`](https://ggplot2.tidyverse.org/reference/coord_cartesian.html): the default cartesian coordinate systems, where you specify x and y values (e.g. allows you to zoom in or out).\n-   [`coord_flip()`](https://ggplot2.tidyverse.org/reference/coord_flip.html): a cartesian system with the x and y flipped.\n-   [`coord_fixed()`](https://ggplot2.tidyverse.org/reference/coord_fixed.html): a cartesian system with a \"fixed\" aspect ratio (e.g. 1.78 for a \"widescreen\" plot).\n-   [`coord_quickmap()`](https://ggplot2.tidyverse.org/reference/coord_map.html): a coordinate system that approximates a good aspect ratio for maps.\n\n#### 1.10.1 Working with Coordinate\n\nBy default the bar charts in ggplot2 are vertical, as shown:\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-39-1.png){width=672}\n:::\n:::\n\n\n\nUsing `coord_flip()`, we can flip the vertical bar chart to a horizontal one.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-40-1.png){width=672}\n:::\n:::\n\n\n\n#### 1.10.2 Changing the x and y axis range\n\nThe scatterplot below is misleading as the x and y axes are not equal. This can create confusion to the readers.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, size=0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-41-1.png){width=672}\n:::\n:::\n\n\n\nThe code below will set both the x and y axis range to 0-100.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-42-1.png){width=672}\n:::\n:::\n\n\n\n### 1.11 Essential grammatical elements in ggplot2: Themes\n\nThemes control elements of the graph which are not related to the data such as\n\n-   background color\n\n-   fonts size\n\n-   gridlines\n\n-   labels color\n\nSome of the Built-in themes include:\n\n-   `theme_gray()`: default theme, with a light gray background and white gridlines.\n\n-   `theme_bw()`: theme with a black-and-white color scheme - white background, black gridlines and axis lines\n\n-   `theme_classic()`: theme with a minimalist look - white background and no gridlines\n\nThe list of all other themes available can be found at this [link](https://ggplot2.tidyverse.org/reference/ggtheme.html)\n\n#### 1.11.1 Working with Themes\n\nThe code below plot a horizontal bar chart using `theme_gray()`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_gray()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-43-1.png){width=672}\n:::\n:::\n\n\n\nThe code below plot a horizontal bar chart using `theme_bw()`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-44-1.png){width=672}\n:::\n:::\n\n\n\nThe code below plot a horizontal bar chart using `theme_classic()`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_classic()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-45-1.png){width=672}\n:::\n:::\n\n\n\nWe can further customize the chart by additional arguments using `theme()`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar(fill=\"skyblue\", color=\"black\", size=0.7) +  \n  coord_flip() +\n  theme_minimal() +\n   theme(panel.background = element_rect(fill = \"lightgrey\",\n                                         color = \"white\"))\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-46-1.png){width=672}\n:::\n:::\n\n\n\n### 1.12 References\n\n-   Kam, T.S. (2023).[A Layered Grammar of Graphics: ggplot2 methods.](https://r4va.netlify.app/chap01)\n-   Hadley Wickham (2023) [ggplot2: Elegant Graphics for Data Analysis.](https://ggplot2-book.org/)Online 3rd edition.\n-   Winston Chang (2013) [R Graphics Cookbook 2nd edition.](https://r-graphics.org/) Online version.\n-   Healy, Kieran (2019) [Data Visualization: A practical introduction.](https://socviz.co/) Online version\n-   [Learning ggplot2 on Paper – Components](https://henrywang.nl/learning-ggplot2-on-paper-components/)\n-   [Learning ggplot2 on Paper – Layer](https://henrywang.nl/learning-ggplot2-on-paper-layer/)\n-   [Learning ggplot2 on Paper – Scale](https://henrywang.nl/tag/learning-ggplot2-on-paper/)\n\n### 1.13 End of Hands-on-Exercise 01: Learning points\n\n::: callout-tip\n## Reflection\n\n-   Learnt how to load ggplot package and to create a bar chart using `geom_bar()`, `geom_dotplot()`, \\`geom_histogram\n\n-   Learnt that we can add additional arguments to `ggplot()` and `geom_` such as `geom_bar()`, `geom_dotplot()` etc.\n\n-   `echo=FALSE`: Hides the code while executing it to display the plot in the final output\n:::\n\nlibrary(ggplot2) <!-- ::: {.callout-tip title=\"Reflection\"} -->\n\n<!-- Some of the useful links from quarto, -->\n\n<!-- install.packages(\"ggplot2\") -->\n\n<!-- library(ggplot2) -->\n\n<!-- ::: -->\n",
    "supporting": [
      "Hands-on_Ex01_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}