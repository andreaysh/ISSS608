{
  "hash": "035bee90bd94881c1d822d1a43d9cee1",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Hands-on Exercise 04a\"\nauthor: \"Andrea Yeo\"\ndate-modified: \"last-modified\"\nexecute:\n  echo: true\n  eval: true\n  warning: false\n  freeze: true\n---\n\n\n\n[With the assistance of ChatGPT]{style=\"font-size: 14px;\"}\n\n## 4. Visualising Distribution\n\n### 4.1 Learning outcome\n\nVisualizing distributions is a fundamental aspect of statistical analysis. In Chapter 1, we introduced common methods such as histograms, probability density curves (PDFs), boxplots, notch plots, and violin plots using ggplot2.\n\nIn this chapter, we explore two newer techniques\n\n-   [**ridgeline plots**](https://www.rdocumentation.org/packages/ggridges/versions/0.5.6): display multiple density plots stacked vertically to compare distributions across groups,\n\n-   [**raincloud plots**](https://cran.r-project.org/web/packages/ggrain/readme/README.html): combine a density plot, boxplot, and scatter plot to provide a comprehensive view of data\n\nby utilizing ggplot2 and its extensions.\n\n### 4.2 Getting started\n\n#### 4.2.1 Installing and loading the packages\n\nThe following R packages will be used,\n\n-   [**ggridges**](https://www.rdocumentation.org/packages/ggridges/versions/0.5.6):ggplot2 extension for creating ridgeline plots.\n-   [**ggdist**](https://www.rdocumentation.org/packages/ggdist/versions/3.3.2):ggplot2 extension for visualizing distribution and uncertainty.\n-   [**tidyverse**](https://www.rdocumentation.org/packages/tidyverse/versions/2.0.0):collection of R packages designed for modern data science and visual communication.\n-   [**ggthemes**](https://www.rdocumentation.org/packages/ggthemes/versions/5.1.0):ggplot2 extension offering additional themes, scales, and geoms for enhanced visualizations.\n-   [**colorspace**](https://www.rdocumentation.org/packages/colorspace/versions/0.9):R package for selecting, manipulating, and applying color palettes in visualizations.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(ggdist, ggridges, ggthemes,\n               colorspace, tidyverse)\n```\n:::\n\n\n\n#### 4.2.2 Importing data\n\nIn this exercise, **Exam_data.csv** will be used. The \\`read_csv() function from the readr package is used to import the dataset into R and store it as a tibble data frame.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nexam <- read_csv(\"data/Exam_data.csv\", show_col_types = FALSE)\n```\n:::\n\n\n\n::: callout-note\n-   This section data is the same dataset used in [Hands-on_Ex01](Hands-on_Ex01.html), [Hands-on_Ex02](Hands-on_Ex02.html) [Hands-on_Ex03a](Hands-on_Ex03a.html)\n:::\n\n### 4.3 Visualising distribution with ridgeline plot\n\nA [ridgeline plot](https://www.data-to-viz.com/graph/ridgeline.html) (also known as a Joyplot) visualizes the distribution of a numeric variable across multiple groups. It uses overlapping histograms or density plots aligned on the same horizontal scale.\n\nThe figure below illustrates the distribution of English scores by class using a ridgeline plot.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS)) +\n  geom_density_ridges(\n    scale = 3,\n    rel_min_height = 0.01,\n    bandwidth = 3.4,\n    fill = lighten(\"pink\", .3),\n    color = \"blue\"\n  ) +\n  scale_x_continuous(\n    name = \"ENGLISH\",\n    expand = c(0, 0)\n    ) +\n  scale_y_discrete(name = \"CLASS\", expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex04a_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n\n::: callout-tip\n## When to use a ridgeline plot\n\n-   Ridgeline plots are ideal for visualizing medium to large groups, as overlapping distributions help conserve space compared to separate plots. However, for fewer than five groups, other distribution plots may be more effective.\n\n-   They work best when there is a clear pattern or ranking among groups; otherwise, excessive overlap can make the plot cluttered and less informative.\n:::\n\n#### 4.3.1 Plotting ridgeline graph: `ggridges` method\n\nIn R, ridgeline plots can be created using the [`ggridges`](https://wilkelab.org/ggridges/index.html) package, which provides two key functions:\n\n-   [`geom_ridgeline()`](https://wilkelab.org/ggridges/reference/geom_ridgeline.html): Uses direct height values to draw ridgelines.\n-   [`geom_density_ridges()`](https://wilkelab.org/ggridges/reference/geom_density_ridges.html): Estimates data densities before plotting ridgelines.\n\nThe example below demonstrates a ridgeline plot created with `geom_density_ridges()`.\n\n::: panel-tabset\n## Plot()\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex04a_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n\n## Code()\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS)) +\n  geom_density_ridges(\n    scale = 3,\n    rel_min_height = 0.01,\n    bandwidth = 3.4,\n    fill = lighten(\"white\", .3),\n    color = \"#7097BB\"\n  ) +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n    ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n```\n:::\n\n\n:::\n\n#### 4.3.2 Varying fill colors along the x axis\n\nTo add gradient fills to ridgeline plots, use [`geom_ridgeline_gradient()`](https://wilkelab.org/ggridges/reference/geom_ridgeline_gradient.html) or [`geom_density_ridges_gradient()`](https://wilkelab.org/ggridges/reference/geom_ridgeline_gradient.html), which function similarly to their non-gradient counterparts - `geom_ridgeline()`, and `geom_density_ridges()` but allow varying colors along the x-axis.\n\nHowever, they do not support alpha transparency—only color variation or transparency can be applied, but not both.\n\n::: panel-tabset\n## Plot()\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex04a_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n\n## Code()\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS,\n           fill = stat(x))) +\n  geom_density_ridges_gradient(\n    scale = 3,\n    rel_min_height = 0.01) +\n  scale_fill_viridis_c(name = \"Temp. [F]\",\n                       option = \"C\") +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n  ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n```\n:::\n\n\n:::\n\n#### 4.3.3 Mapping the probabilities directly onto color\n\nThe [`ggridges`](https://wilkelab.org/ggridges/index.html) package extends ggplot2 by providing `stat_density_ridges()`, that replaces `stat_density()` for ridgeline plots.\n\nThe figure below uses `stat(ecdf)` to compute and visualize the empirical cumulative density function (ECDF) for the distribution of English scores.\n\n::: panel-tabset\n## Plot()\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex04a_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n\n## Code()\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = 0.5 - abs(0.5-stat(ecdf)))) +\n  stat_density_ridges(geom = \"density_ridges_gradient\", \n                      calc_ecdf = TRUE) +\n  scale_fill_viridis_c(name = \"Tail probability\",\n                       direction = -1) +\n  theme_ridges()\n```\n:::\n\n\n:::\n\n::: callout-important\n-   It is important to include the argument `calc_ecdf = TRUE` in `stat_density_ridges()`\n:::\n\n#### 4.3.4 Ridgeline plots with quantile lines\n\nUsing [`geom_density_ridges_gradient()`](https://wilkelab.org/ggridges/reference/geom_ridgeline_gradient.html), ridgeline plots can be colored by quantiles through the `stat(quantile)` aesthetic, as shown in the figure below.\n\n:::: panel-tabset\n::: callout-tip\n-   Notice that in the code below, we uses `stat(quantile)` = 4 to define the number of quantiles.\n:::\n\n## Plot()\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex04a_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n\n## Code()\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(exam,\n       aes(x = MATHS, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = 4,\n    quantile_lines = TRUE) +\n  scale_fill_viridis_d(name = \"Quartiles\") +\n  theme_ridges()\n```\n:::\n\n\n::::\n\nInstead of using number to define the quantiles, we can use cut points (e.g., 2.5% and 97.5% tails), as shown in the figure below.\n\n::: panel-tabset\n## Plot()\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex04a_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n\n## Code()\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(exam,\n       aes(x = MATHS, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = c(0.025, 0.975)\n    ) +\n  scale_fill_manual(\n    name = \"Probability\",\n    values = c(\"#FF0000A0\", \"#A0A0A0A0\", \"#0000FFA0\"),\n    labels = c(\"(0, 0.025]\", \"(0.025, 0.975]\", \"(0.975, 1]\")\n  ) +\n  theme_ridges()\n```\n:::\n\n\n:::\n\n### 4.4 Visualising distribution with Raincloud plot\n\nA Raincloud Plot is a visualization technique that combines a half-density plot with a boxplot, resembling a \"raincloud\" shape. It improves traditional boxplots by revealing multiple modes in the data, indicating potential group structures. Unlike boxplots, raincloud plots show where densities are clustered.\n\nIn this section, we will be learning how to create a raincloud plot to visualize English scores by race using functions from the **ggdist** and ggplot2 packages.\n\n#### 4.4.1 Plotting a half eye graph\n\nFirst, by using [stat_halfeye()]{.underline} from the [**ggdist**](https://www.rdocumentation.org/packages/ggdist/versions/3.3.2) package to create a Half-Eye plot, which combines a half-density plot with a slab-interval for visualizing distributions.\n\nThis produces a Half Eye visualization, which is contains a half-density and a slab-interval.\n\n:::: panel-tabset\n## Graph\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex04a_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n\n## Code()\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA)\n```\n:::\n\n\n\n::: callout-note\n## Things to learn from the code chunk above:\n\n-   We remove the slab interval by setting .width = 0 and point_colour = NA.\n:::\n::::\n\n#### 4.4.2 Adding the boxplot with `geom_boxplot()`\n\nNext, the code will add a narrow boxplot using [`geom_boxplot()`](https://www.rdocumentation.org/packages/ggplot2/versions/0.9.0/topics/geom_boxplot) from ggplot2, reducing its width and adjusting opacity for better visualization.\n\n::: panel-tabset\n## Graph\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex04a_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n\n## Code()\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA)\n```\n:::\n\n\n:::\n\n#### 4.4.3 Adding the dot plots with `stat_dots()`\n\nNext, we'll use [`stat_dots()`](https://mjskay.github.io/ggdist/reference/stat_dots.html) from ggdist to add a half-dot plot, similar to a histogram, showing sample counts with dots.\n\nSetting side = \"left\" positions it on the left-hand side.\n\n::: panel-tabset\n## Graph\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex04a_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\n\n## Code()\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 2)\n```\n:::\n\n\n:::\n\n#### 4.4.4 Finishing touch\n\nLastly, [coord_flip()](https://ggplot2.tidyverse.org/reference/coord_flip.html) from ggplot2 flips the chart horizontally, creating the raincloud effect, while `theme_economist()` from ggthemes enhances its appearance.\n\n::: panel-tabset\n## Graph\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex04a_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\n\n## Code()\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 1.5) +\n  coord_flip() +\n  theme_economist()\n```\n:::\n\n\n:::\n\n### 4.5 Reference\n\n-   [Introducing Ridgeline Plots (formerly Joyplots)](https://blog.revolutionanalytics.com/2017/07/joyplots.html)\n-   Claus O. Wilke [Fundamentals of Data Visualization](https://clauswilke.com/dataviz/) especially Chapter [6](https://clauswilke.com/dataviz/visualizing-amounts.html), [7](https://clauswilke.com/dataviz/histograms-density-plots.html), [8](https://clauswilke.com/dataviz/ecdf-qq.html), [9](https://clauswilke.com/dataviz/boxplots-violins.html) and [10](https://clauswilke.com/dataviz/visualizing-proportions.html).\n-   Allen M, Poggiali D, Whitaker K et al. [“Raincloud plots: a multi-platform tool for robust data. visualization”](https://wellcomeopenresearch.org/articles/4-63) \\[version 2; peer review: 2 approved\\]. Welcome Open Res 2021, pp. 4:63.\n-   [Dots + interval stats and geoms](https://mjskay.github.io/ggdist/articles/dotsinterval.html)\n\n### 4.6 Takeaways\n\n::: callout-tip\n## Key takeaways\n\n-   Learnt about the two distribution visualization methods\n    -   **Ridgeline Plot** `ggridges` and\n    -   **Raincloud Plot** `ggdist`\n-   Packages and Tools used: `ggridges`, `ggdist`, `tidyverse`, `ggthemes` and `colorspace`\n-   Ridgeline plots work best when there’s a clear ranking or pattern.\n-   Raincloud plots provide richer insights than boxplots by showing density clusters.\n:::\n\n### 4.7 Further exploration\n\n1.  To explore the different ways to change the gradient color in the ggplot2 ridgeline plot:\n\n::: panel-tabset\n## Change Virdis Platte Option()\n\nModify the option argument in `scale_fill_viridis_c()`, which supports different palettes like \"A\", \"B\", \"C\", \"D\", and \"E\".\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS,\n           fill = stat(x))) +\n  geom_density_ridges_gradient(\n    scale = 3,\n    rel_min_height = 0.01) +\n  scale_fill_viridis_c(name = \"English Score\",\n                       option = \"E\") +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n  ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex04a_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n\n\n\n## Use `scale_fill_distiller()` for diverging or sequential colors\n\nTo change palette argument to options to \"Blues\", \"Reds\", \"PuBu\", or \"RdYlGn\" etc.\n\n-   Red refer to low score\n-   Green refer to high score\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS,\n           fill = stat(x))) +\n  geom_density_ridges_gradient(\n    scale = 3,\n    rel_min_height = 0.01) +\n  scale_fill_distiller(name = \"English Score\",\n                       palette = \"RdYlGn\",\n                       direction = 1) +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n  ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex04a_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\n\n\n## Use a custom color gradient\n\nUse `scale_fill_gradient()` or `scale_fill_gradientn()` to define custom colors. `scale_fill_gradient()`: Using two colors to define colors. `scale_fill_gradientn()`: Using multiple colors, creates a multi-color gradient.\n\n-   Red refer to low score\n-   Green refer to high score\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS,\n           fill = stat(x))) +\n  geom_density_ridges_gradient(\n    scale = 3,\n    rel_min_height = 0.01) +\n  scale_fill_gradient(name = \"English Score\", low = \"red\", high = \"green\")+\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n  ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex04a_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n:::\n\n\n:::\n\n2.  To explore the creation of two ridgeline plot side by side\n\nObservations:\n\n-   English scores show wider distributions, indicating more variation, while Maths scores have sharper peaks, suggesting consistent performance.\n-   Higher-level classes (3I, 3H, 3G) have more spread-out distributions, while lower-level classes (3A, 3B, 3C) are more concentrated at higher scores.\n\n::: panel-tabset\n## Graph\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex04a_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n:::\n\n\n\n## Code\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(exam_long, \n       aes(x = Score, \n           y = CLASS, \n           fill = Subject)) +  \n  geom_density_ridges(\n    scale = 3,\n    rel_min_height = 0.01,\n    bandwidth = 3.4,\n    fill = lighten(\"#7097BB\", .3),  # Adjust color\n    color = \"white\"\n  ) +\n  scale_x_continuous(\n    name = \"Grades\",\n    expand = c(0, 0)\n  ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges() +\n  facet_wrap(~ Subject, scales = \"free_x\")  # Facet by Subject (English vs Maths)\n```\n:::\n\n\n:::\n\n3.  To explore the creation of raincloud plot - GENDER against MATHS\n\nObservations:\n\n-   Males show a slight right-skewed distribution with more students scoring higher.\n-   Females have a more balanced and evenly spread distribution across score levels.\n-   Median scores are comparable, but Females show more variation.\n\n::: panel-tabset\n## Graph\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex04a_files/figure-html/unnamed-chunk-27-1.png){width=672}\n:::\n:::\n\n\n\n## Code\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(exam, \n       aes(x = MATHS, \n           y = GENDER, \n           fill = GENDER)) +  \n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA,\n               alpha = 0.6) +  \n  geom_boxplot(width = 0.2,\n               outlier.shape = NA,\n               alpha = 0.7, \n               color = \"black\") +  \n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = 0.5,\n            dotsize = 1.5) +\n  scale_fill_manual(values = c(\"Male\" = \"blue\", \"Female\" = \"pink\")) + \n  coord_flip() +\n  labs(title = \"Raincloud Plot of MATHS Scores by Gender\",\n       x = \"MATHS Scores\",\n       y = \"Gender\") +\n  theme_classic() +\n  theme(legend.position = \"none\")  \n```\n:::\n\n\n:::\n",
    "supporting": [
      "Hands-on_Ex04a_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}