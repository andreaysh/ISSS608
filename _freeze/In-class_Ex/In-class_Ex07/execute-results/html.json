{
  "hash": "eb51c5518d0b6cb6dd2f5d5e22837975",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"In-class Exercise 07\"\nauthor: \"Andrea Yeo\"\ndate-modified: \"last-modified\"\nexecute:\n  echo: true\n  eval: true\n  warning: false\n  freeze: true\n---\n\n\n\n## Getting Started\n\nFor the purpose of this hands-on exercise, the following R packages will be used\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(tidyverse, tsibble, feasts, fable, seasonal)\n```\n:::\n\n\n-   [lubridate](https://www.rdocumentation.org/packages/lubridate/versions/1.9.4) provides a collection to functions to parse and wrangle time and date data.\n\n-   tsibble, feasts, fable and fable.prophet are belong to [tidyverts](https://tidyverts.org/), a family of tidy tools for time series data handling, analysis and forecasting.\n\n    -   [tsibble](https://tsibble.tidyverts.org/) provides a data infrastructure for tidy temporal data with wrangling tools. Adapting the tidy data principles, tsibble is a data- and model-oriented object.\n\n    -   [feasts](https://feasts.tidyverts.org/) provides a collection of tools for the analysis of time series data. The package name is an acronym comprising of its key features: Feature Extraction And Statistics for Time Series.\n\n## Importing the data\n\nWe use the `read_csv()` of readr package to import *visitor_arrivals_by_air.csv* file into R environment\n\n\n::: {.cell}\n\n```{.r .cell-code}\nts_data <- read_csv(\"data/visitor_arrivals_by_air.csv\")\n```\n:::\n\n\nIn the code chunk below, `dmy()` of [lubridate package](https://www.rdocumentation.org/packages/lubridate/versions/1.9.4) is used to convert data type of Month-Year field from Character to Date.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nts_data$`Month-Year` <- dmy(\n  ts_data$`Month-Year`)\n```\n:::\n\n\n\n## Conventional base `ts` object versus `tibble` object\n\ntibble object\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nts_data\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 144 × 34\n   `Month-Year` `Republic of South Africa` Canada   USA Bangladesh Brunei China\n   <date>                            <dbl>  <dbl> <dbl>      <dbl>  <dbl> <dbl>\n 1 2008-01-01                         3680   6972 31155       6786   3729 79599\n 2 2008-02-01                         1662   6056 27738       6314   3070 82074\n 3 2008-03-01                         3394   6220 31349       7502   4805 72546\n 4 2008-04-01                         3337   4764 26376       7333   3096 76112\n 5 2008-05-01                         2089   4460 26788       7988   3586 64808\n 6 2008-06-01                         2515   3888 29725       8301   5284 55238\n 7 2008-07-01                         2919   5313 33183       9004   4070 80747\n 8 2008-08-01                         2471   4519 27427       7913   4183 66625\n 9 2008-09-01                         2492   3421 21588       7549   3160 52649\n10 2008-10-01                         3023   4756 25112       7527   2983 54423\n# ℹ 134 more rows\n# ℹ 27 more variables: `Hong Kong SAR (China)` <dbl>, India <dbl>,\n#   Indonesia <dbl>, Japan <dbl>, `South Korea` <dbl>, Kuwait <dbl>,\n#   Malaysia <dbl>, Myanmar <dbl>, Pakistan <dbl>, Philippines <dbl>,\n#   `Saudi Arabia` <dbl>, `Sri Lanka` <dbl>, Taiwan <dbl>, Thailand <dbl>,\n#   `United Arab Emirates` <dbl>, Vietnam <dbl>, `Belgium & Luxembourg` <dbl>,\n#   Finland <dbl>, France <dbl>, Germany <dbl>, Italy <dbl>, …\n```\n\n\n:::\n:::\n\n\n\n## Conventional base `ts` object versus `tibble` object\n\nts object - converting it into a `tibble` object\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nts_data_ts <- ts(ts_data)       \nhead(ts_data_ts)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     Month-Year Republic of South Africa Canada   USA Bangladesh Brunei China\n[1,]      13879                     3680   6972 31155       6786   3729 79599\n[2,]      13910                     1662   6056 27738       6314   3070 82074\n[3,]      13939                     3394   6220 31349       7502   4805 72546\n[4,]      13970                     3337   4764 26376       7333   3096 76112\n[5,]      14000                     2089   4460 26788       7988   3586 64808\n[6,]      14031                     2515   3888 29725       8301   5284 55238\n     Hong Kong SAR (China) India Indonesia Japan South Korea Kuwait Malaysia\n[1,]                 17103 41639     62683 37673       27937    284    31352\n[2,]                 21089 37170     47834 35297       22633    241    35030\n[3,]                 23230 44815     64688 42575       22876    206    37629\n[4,]                 17688 49527     58074 26839       20634    193    37521\n[5,]                 19340 67754     57089 30814       22785    140    38044\n[6,]                 19152 57380     70118 31001       22575    354    40419\n     Myanmar Pakistan Philippines Saudi Arabia Sri Lanka Taiwan Thailand\n[1,]    5269     1395       18622          406      5289  13757    18370\n[2,]    4643     1027       21609          591      4767  13921    16400\n[3,]    6218     1635       28464          626      4988  11181    23387\n[4,]    7324     1232       30131          644      7639  11665    24469\n[5,]    5395     1306       30193          470      5125  11436    21935\n[6,]    5542     1996       25800          772      4791  10689    19900\n     United Arab Emirates Vietnam Belgium & Luxembourg Finland France Germany\n[1,]                 2652   10315                 1341    1179   6918   11982\n[2,]                 2230   13415                 1449    1207   7876   13256\n[3,]                 3353   14320                 1674    1071   8066   15185\n[4,]                 3245   15413                 1426     768   8312   11604\n[5,]                 2856   14424                 1243     690   7066    9853\n[6,]                 4292   21368                 1255     624   5926    9347\n     Italy Netherlands Spain Switzerland United Kingdom Australia New Zealand\n[1,]  2953        4938  1668        4450          41934     71260        7806\n[2,]  2704        4885  1568        4381          44029     45595        4729\n[3,]  2822        5015  2254        5015          49489     53191        6106\n[4,]  3018        4902  1503        5434          35771     56514        7560\n[5,]  2165        4397  1365        4427          24464     57808        9090\n[6,]  2022        4166  1446        3359          22473     63350        9681\n```\n\n\n:::\n:::\n\n\n## Converting `tibble` object to `tsibble` object\n\nThe following code snippet converts `ts_data` from a tibble to a tsibble using the `as_tsibble()` function from the **tsibble** package in R.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nts_tsibble <- ts_data %>%\n  mutate(Month = yearmonth(`Month-Year`)) %>%\n  as_tsibble(index = `Month`)\n```\n:::\n\n\n\n## tsibble object\nVisualizing the tsibble object:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nts_tsibble\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tsibble: 144 x 35 [1M]\n   `Month-Year` `Republic of South Africa` Canada   USA Bangladesh Brunei China\n   <date>                            <dbl>  <dbl> <dbl>      <dbl>  <dbl> <dbl>\n 1 2008-01-01                         3680   6972 31155       6786   3729 79599\n 2 2008-02-01                         1662   6056 27738       6314   3070 82074\n 3 2008-03-01                         3394   6220 31349       7502   4805 72546\n 4 2008-04-01                         3337   4764 26376       7333   3096 76112\n 5 2008-05-01                         2089   4460 26788       7988   3586 64808\n 6 2008-06-01                         2515   3888 29725       8301   5284 55238\n 7 2008-07-01                         2919   5313 33183       9004   4070 80747\n 8 2008-08-01                         2471   4519 27427       7913   4183 66625\n 9 2008-09-01                         2492   3421 21588       7549   3160 52649\n10 2008-10-01                         3023   4756 25112       7527   2983 54423\n# ℹ 134 more rows\n# ℹ 28 more variables: `Hong Kong SAR (China)` <dbl>, India <dbl>,\n#   Indonesia <dbl>, Japan <dbl>, `South Korea` <dbl>, Kuwait <dbl>,\n#   Malaysia <dbl>, Myanmar <dbl>, Pakistan <dbl>, Philippines <dbl>,\n#   `Saudi Arabia` <dbl>, `Sri Lanka` <dbl>, Taiwan <dbl>, Thailand <dbl>,\n#   `United Arab Emirates` <dbl>, Vietnam <dbl>, `Belgium & Luxembourg` <dbl>,\n#   Finland <dbl>, France <dbl>, Germany <dbl>, Italy <dbl>, …\n```\n\n\n:::\n:::\n\n\n\n## Visualising Time-series Data\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nts_longer <- ts_data %>%\n  pivot_longer(cols = c(2:34),\n               names_to = \"Country\",\n               values_to = \"Arrivals\")\n```\n:::\n\n\n\n## Visualising single time-series: ggplot2 methods\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nts_longer %>%\n  filter(Country == \"Vietnam\") %>%\n  ggplot(aes(x = `Month-Year`, \n             y = Arrivals))+\n  geom_line(size = 1)\n```\n\n::: {.cell-output-display}\n![](In-class_Ex07_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n\n\n## Plotting multiple time-series data with ggplot2 methods\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = ts_longer, \n       aes(x = `Month-Year`, \n           y = Arrivals,\n           color = Country))+\n  geom_line(size = 0.5) +\n  theme(legend.position = \"bottom\", \n        legend.box.spacing = unit(0.5, \"cm\"))\n```\n\n::: {.cell-output-display}\n![](In-class_Ex07_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n\nThe `facet_wrap()` function from the **ggplot2** package is used to create small multiple line graphs, also known as a trellis plot.\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](In-class_Ex07_files/figure-html/unnamed-chunk-11-1.png){width=1920}\n:::\n:::\n\n\n\n## Visual Analysis of Time-series Data\n\nTo effectively visualize time-series data, we need to transform the data frame from wide to long format. This can be achieved using the `pivot_longer()` function from the [tidyr](https://www.rdocumentation.org/packages/tidyr/versions/1.3.1) package, as demonstrated in the code below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntsibble_longer <- ts_tsibble %>%\n  pivot_longer(cols = c(2:34),\n               names_to = \"Country\",\n               values_to = \"Arrivals\")\n```\n:::\n\n\n\n\n## Visual Analysis of Seasonality with Seasonal Plot\n\nA seasonal plot is similar to a time plot but displays data based on individual seasons. It can be created using the [gg_season()](https://feasts.tidyverts.org/reference/gg_season.html) function from the **feasts** package.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntsibble_longer %>%\n  filter(Country == \"Italy\" |\n         Country == \"Vietnam\" |\n         Country == \"United Kingdom\" |\n         Country == \"Germany\") %>% \n  gg_season(Arrivals)\n```\n\n::: {.cell-output-display}\n![](In-class_Ex07_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n## Visual Analysis of Seasonality with Cycle Plot\n\nFigure below shows two time-series lines of visitor arrivals from Vietnam and Italy. Both lines reveal clear sign of seasonal patterns but not the trend.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntsibble_longer %>%\n  filter(Country == \"Vietnam\" |\n         Country == \"Italy\") %>% \n  autoplot(Arrivals) + \n  facet_grid(Country ~ ., scales = \"free_y\")\n```\n\n::: {.cell-output-display}\n![](In-class_Ex07_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\nIn the code chunk below, cycle plots using [gg_subseries()](https://feasts.tidyverts.org/reference/gg_subseries.html) of feasts package are created. Notice that the cycle plots show not only seasonal patterns but also trend.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntsibble_longer %>%\n  filter(Country == \"Vietnam\" |\n         Country == \"Italy\") %>% \n  gg_subseries(Arrivals)\n```\n\n::: {.cell-output-display}\n![](In-class_Ex07_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n\n## Time series decomposition\n\n## Single time series decomposition\n\nIn the code chunk below, ACF() of feasts package is used to plot the ACF curve of visitor arrival from Vietnam.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntsibble_longer %>%\n  filter(`Country` == \"Vietnam\") %>%\n  ACF(Arrivals) %>% \n  autoplot()\n```\n\n::: {.cell-output-display}\n![](In-class_Ex07_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n\nIn the code chunk below, PACF() of feasts package is used to plot the Partial ACF curve of visitor arrival from Vietnam.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntsibble_longer %>%\n  filter(`Country` == \"Vietnam\") %>%\n  PACF(Arrivals) %>% \n  autoplot()\n```\n\n::: {.cell-output-display}\n![](In-class_Ex07_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n\n## Multiple time-series decomposition\n\nCode chunk below is used to prepare a trellis plot of ACFs for visitor arrivals from Vietnam, Italy, United Kingdom and China.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntsibble_longer %>%\n  filter(`Country` == \"Vietnam\" |\n         `Country` == \"Italy\" |\n         `Country` == \"United Kingdom\" |\n         `Country` == \"China\") %>%\n  ACF(Arrivals) %>%\n  autoplot()\n```\n\n::: {.cell-output-display}\n![](In-class_Ex07_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\nOn the other hand, code chunk below is used to prepare a trellis plot of PACFs for visitor arrivals from Vietnam, Italy, United Kingdom and China.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntsibble_longer %>%\n  filter(`Country` == \"Vietnam\" |\n         `Country` == \"Italy\" |\n         `Country` == \"United Kingdom\" |\n         `Country` == \"China\") %>%\n  PACF(Arrivals) %>%\n  autoplot()\n```\n\n::: {.cell-output-display}\n![](In-class_Ex07_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\n\n## Composite plot of time series decomposition\nAn interesting function in the feasts package for time series decomposition is `gg_tsdisplay()`. It creates a **composite plot**, displaying the **original time series** at the top, with the **ACF (Autocorrelation Function)** plot on the left and the seasonal plot on the right.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntsibble_longer %>%\n  filter(`Country` == \"Vietnam\") %>%\n  gg_tsdisplay(Arrivals)\n```\n\n::: {.cell-output-display}\n![](In-class_Ex07_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\n## Visual STL Diagnostics\nSTL (Seasonal and Trend decomposition using Loess) is a robust method for time series decomposition, widely used in economic and environmental analyses. Developed by Cleveland et al. (1990), STL utilizes LOESS, a nonlinear regression technique, to break a time series into trend, seasonal, and remainder components. The algorithm operates in two loops: the inner loop alternates between seasonal and trend smoothing, while the outer loop minimizes outlier effects. Unlike classical decomposition methods such as SEATS and X11, STL can handle any seasonal pattern, allows user control over trend and seasonal smoothness, and is robust to outliers, ensuring that anomalies do not distort the overall trend or seasonality.\n\nIn the code chunk below, STL() of feasts package is used to decomposite visitor arrivals from Vietnam data.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntsibble_longer %>%\n  filter(`Country` == \"Vietnam\") %>%\n  model(stl = STL(Arrivals)) %>%\n  components() %>%\n  autoplot()\n```\n\n::: {.cell-output-display}\n![](In-class_Ex07_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n:::\n\n\n\nThe grey bars on the left of each panel indicate the relative scale of the components. Since each panel has a different scale, the bar sizes vary, even though they represent the same length. A larger grey bar in the bottom panel suggests that the remainder component has the smallest variation. If the bottom three panels were resized so their bars matched the data panel, all components would be on the same scale.\n\n## Classical Decomposition with feasts\nThe classical_decomposition() function from the feasts package decomposes a time series into seasonal, trend, and irregular components using moving averages. It supports both additive and multiplicative seasonal components.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntsibble_longer %>%\n  filter(`Country` == \"Vietnam\") %>%\n  model(\n    classical_decomposition(\n      Arrivals, type = \"additive\")) %>%\n  components() %>%\n  autoplot()\n```\n\n::: {.cell-output-display}\n![](In-class_Ex07_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n\n\n\n\n## Time Series Data Sampling\n\nIn forecasting, it is best practice to split the dataset into a training (estimate) sample and a hold-out sample. The training sample (typically 75-80% of the data) is used to estimate starting values and smoothing parameters, while the hold-out sample is used to evaluate forecasting performance on unseen data. This ensures that the model is assessed based on new observations, preventing overfitting.\n\nFirst, an extra column called Type indicating training or hold-out will be created by using mutate() of dplyr package. It will be extremely useful for subsequent data visualisation.\n\nIn this example we will use the last 12 months for hold-out and the rest for training.\n\nFirst, an extra column called Type indicating training or hold-out will be created by using mutate() of dplyr package. It will be extremely useful for subsequent data visualisation.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvietnam_ts <- tsibble_longer %>%\n  filter(Country == \"Vietnam\") %>% \n  mutate(Type = if_else(\n    `Month-Year` >= \"2019-01-01\", \n    \"Hold-out\", \"Training\"))\n```\n:::\n\n\n\nNext, a training data set is extracted from the original data set by using filter() of dplyr package. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nvietnam_train <- vietnam_ts %>%\n  filter(`Month-Year` < \"2019-01-01\")\n```\n:::\n\n\n\n## Exploratory Data Analysis (EDA): Time Series Data\n\nBefore fitting forecasting models, it is a good practice to analysis the time series data by using EDA methods.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvietnam_train %>%\n  model(stl = STL(Arrivals)) %>%\n  components() %>%\n  autoplot()\n```\n\n::: {.cell-output-display}\n![](In-class_Ex07_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n:::\n\n\n\n## Fitting forecasting models\n\n## Fitting Exponential Smoothing State Space (ETS) Models: fable methods\n\nIn fable, Exponential Smoothing State Space Models are supported by ETS(). The combinations are specified through the formula:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nETS(y ~ error(\"A\") \n    + trend(\"N\") \n    + season(\"N\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n<ETS model definition>\n```\n\n\n:::\n:::\n\n\n\n## Fitting a simple exponential smoothing (SES)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfit_ses <- vietnam_train %>%\n  model(ETS(Arrivals ~ error(\"A\") \n            + trend(\"N\") \n            + season(\"N\")))\nfit_ses\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A mable: 1 x 2\n# Key:     Country [1]\n  Country `ETS(Arrivals ~ error(\"A\") + trend(\"N\") + season(\"N\"))`\n  <chr>                                                   <model>\n1 Vietnam                                            <ETS(A,N,N)>\n```\n\n\n:::\n:::\n\n\n\nNotice that model() of fable package is used to estimate the ETS model on a particular dataset, and returns a mable (model table) object.\n\nA mable contains a row for each time series (uniquely identified by the key variables), and a column for each model specification. A model is contained within the cells of each model column.\n\n\n## Examine Model Assumptions\n\nNext, gg_tsresiduals() of feasts package is used to check the model assumptions with residuals plots.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngg_tsresiduals(fit_ses)\n```\n\n::: {.cell-output-display}\n![](In-class_Ex07_files/figure-html/unnamed-chunk-28-1.png){width=672}\n:::\n:::\n\n\n## The model details\nreport() of fabletools is be used to reveal the model details.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfit_ses %>%\n  report()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSeries: Arrivals \nModel: ETS(A,N,N) \n  Smoothing parameters:\n    alpha = 0.9998995 \n\n  Initial states:\n     l[0]\n 10312.99\n\n  sigma^2:  27939164\n\n     AIC     AICc      BIC \n2911.726 2911.913 2920.374 \n```\n\n\n:::\n:::\n\n\n\n## Fitting ETS Methods with Trend: Holt’s Linear\n## Trend methods\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvietnam_H <- vietnam_train %>%\n  model(`Holt's method` = \n          ETS(Arrivals ~ error(\"A\") +\n                trend(\"A\") + \n                season(\"N\")))\nvietnam_H %>% report()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSeries: Arrivals \nModel: ETS(A,A,N) \n  Smoothing parameters:\n    alpha = 0.9998995 \n    beta  = 0.0001004625 \n\n  Initial states:\n     l[0]     b[0]\n 13673.29 525.8859\n\n  sigma^2:  28584805\n\n     AIC     AICc      BIC \n2916.695 2917.171 2931.109 \n```\n\n\n:::\n:::\n\n\n\n## Damped Trend methods\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvietnam_HAd <- vietnam_train %>%\n  model(`Holt's method` = \n          ETS(Arrivals ~ error(\"A\") +\n                trend(\"Ad\") + \n                season(\"N\")))\nvietnam_HAd %>% report()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSeries: Arrivals \nModel: ETS(A,Ad,N) \n  Smoothing parameters:\n    alpha = 0.9998999 \n    beta  = 0.0001098602 \n    phi   = 0.9784562 \n\n  Initial states:\n     l[0]   b[0]\n 13257.28 523.54\n\n  sigma^2:  28641536\n\n     AIC     AICc      BIC \n2917.921 2918.593 2935.218 \n```\n\n\n:::\n:::\n\n\n\n## Checking for results\n\nCheck the model assumptions with residuals plots.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngg_tsresiduals(vietnam_H)\n```\n\n::: {.cell-output-display}\n![](In-class_Ex07_files/figure-html/unnamed-chunk-32-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngg_tsresiduals(vietnam_HAd)\n```\n\n::: {.cell-output-display}\n![](In-class_Ex07_files/figure-html/unnamed-chunk-33-1.png){width=672}\n:::\n:::\n\n\n\n## Fitting ETS Methods with Season: Holt-Winters\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nVietnam_WH <- vietnam_train %>%\n  model(\n    Additive = ETS(Arrivals ~ error(\"A\") \n                   + trend(\"A\") \n                   + season(\"A\")),\n    Multiplicative = ETS(Arrivals ~ error(\"M\") \n                         + trend(\"A\") \n                         + season(\"M\"))\n    )\n\nVietnam_WH %>% report()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 10\n  Country .model          sigma2 log_lik   AIC  AICc   BIC    MSE   AMSE     MAE\n  <chr>   <chr>            <dbl>   <dbl> <dbl> <dbl> <dbl>  <dbl>  <dbl>   <dbl>\n1 Vietnam Additive       5.33e+6  -1336. 2706. 2711. 2755. 4.68e6 8.56e6 1.72e+3\n2 Vietnam Multiplicative 4.55e-3  -1300. 2635. 2640. 2684. 3.05e6 3.42e6 5.20e-2\n```\n\n\n:::\n:::\n\n\n\n## Fitting multiple ETS Models\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfit_ETS <- vietnam_train %>%\n  model(`SES` = ETS(Arrivals ~ error(\"A\") + \n                      trend(\"N\") + \n                      season(\"N\")),\n        `Holt`= ETS(Arrivals ~ error(\"A\") +\n                      trend(\"A\") +\n                      season(\"N\")),\n        `damped Holt` = \n          ETS(Arrivals ~ error(\"A\") +\n                trend(\"Ad\") + \n                season(\"N\")),\n        `WH_A` = ETS(\n          Arrivals ~ error(\"A\") + \n            trend(\"A\") + \n            season(\"A\")),\n        `WH_M` = ETS(Arrivals ~ error(\"M\") \n                         + trend(\"A\") \n                         + season(\"M\"))\n  )\n```\n:::\n\n\n\n## The model coefficient\ntidy() of fabletools is be used to extract model coefficients from a mable.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfit_ETS %>%\n  tidy()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 45 × 4\n   Country .model      term      estimate\n   <chr>   <chr>       <chr>        <dbl>\n 1 Vietnam SES         alpha     1.00    \n 2 Vietnam SES         l[0]  10313.      \n 3 Vietnam Holt        alpha     1.00    \n 4 Vietnam Holt        beta      0.000100\n 5 Vietnam Holt        l[0]  13673.      \n 6 Vietnam Holt        b[0]    526.      \n 7 Vietnam damped Holt alpha     1.00    \n 8 Vietnam damped Holt beta      0.000110\n 9 Vietnam damped Holt phi       0.978   \n10 Vietnam damped Holt l[0]  13257.      \n# ℹ 35 more rows\n```\n\n\n:::\n:::\n\n\n\n## Step 4: Model Comparison\nglance() of fabletool\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfit_ETS %>% \n  report()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 10\n  Country .model       sigma2 log_lik   AIC  AICc   BIC       MSE   AMSE     MAE\n  <chr>   <chr>         <dbl>   <dbl> <dbl> <dbl> <dbl>     <dbl>  <dbl>   <dbl>\n1 Vietnam SES         2.79e+7  -1453. 2912. 2912. 2920. 27515844. 5.99e7 3.91e+3\n2 Vietnam Holt        2.86e+7  -1453. 2917. 2917. 2931. 27718599. 6.03e7 3.92e+3\n3 Vietnam damped Holt 2.86e+7  -1453. 2918. 2919. 2935. 27556629. 5.97e7 3.92e+3\n4 Vietnam WH_A        5.33e+6  -1336. 2706. 2711. 2755.  4684271. 8.56e6 1.72e+3\n5 Vietnam WH_M        4.55e-3  -1300. 2635. 2640. 2684.  3046059. 3.42e6 5.20e-2\n```\n\n\n:::\n:::\n\n\n\n## Step 5: Forecasting future values\nTo forecast the future values, forecast() of fable will be used. Notice that the forecast period is 12 months.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfit_ETS %>%\n  forecast(h = \"12 months\") %>%\n  autoplot(vietnam_ts, \n           level = NULL)\n```\n\n::: {.cell-output-display}\n![](In-class_Ex07_files/figure-html/unnamed-chunk-38-1.png){width=672}\n:::\n:::\n\n\n\n## Fitting ETS Automatically\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfit_autoETS <- vietnam_train %>%\n  model(ETS(Arrivals))\nfit_autoETS %>% report()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSeries: Arrivals \nModel: ETS(M,A,M) \n  Smoothing parameters:\n    alpha = 0.1613503 \n    beta  = 0.0001021811 \n    gamma = 0.0001030996 \n\n  Initial states:\n     l[0]     b[0]      s[0]     s[-1]     s[-2]     s[-3]    s[-4]    s[-5]\n 15001.12 212.3552 0.9167302 0.8311728 0.8739287 0.8690543 1.104668 1.485584\n    s[-6]     s[-7]    s[-8]     s[-9]    s[-10]    s[-11]\n 1.311207 0.9917759 1.014187 0.8973028 0.8816768 0.8227129\n\n  sigma^2:  0.0046\n\n     AIC     AICc      BIC \n2634.751 2640.119 2683.759 \n```\n\n\n:::\n:::\n\n\n\n## Fitting Fitting ETS Automatically\nNext, we will check the model assumptions with residuals plots by using gg_tsresiduals() of feasts package\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngg_tsresiduals(fit_autoETS)\n```\n\n::: {.cell-output-display}\n![](In-class_Ex07_files/figure-html/unnamed-chunk-40-1.png){width=672}\n:::\n:::\n\n\n## Forecast the future values\n\nIn the code chunk below, forecast() of fable package is used to forecast the future values. Then, autoplot() of feasts package is used to see the training data along with the forecast values.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfit_autoETS %>%\n  forecast(h = \"12 months\") %>%\n  autoplot(vietnam_train)\n```\n\n::: {.cell-output-display}\n![](In-class_Ex07_files/figure-html/unnamed-chunk-41-1.png){width=672}\n:::\n:::\n\n\n\n## Visualising AutoETS model with ggplot2\nThere are time that we are interested to visualise relationship between training data and fit data and forecasted values versus the hold-out data.\n\n## Visualising AutoETS model with ggplot2\nCode chunk below is used to create the data visualisation in previous slide.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfc_autoETS <- fit_autoETS %>%\n  forecast(h = \"12 months\")\n\nvietnam_ts %>%\n  ggplot(aes(x=`Month`, \n             y=Arrivals)) +\n  autolayer(fc_autoETS, \n            alpha = 0.6) +\n  geom_line(aes(\n    color = Type), \n    alpha = 0.8) + \n  geom_line(aes(\n    y = .mean, \n    colour = \"Forecast\"), \n    data = fc_autoETS) +\n  geom_line(aes(\n    y = .fitted, \n    colour = \"Fitted\"), \n    data = augment(fit_autoETS))\n```\n\n::: {.cell-output-display}\n![](In-class_Ex07_files/figure-html/unnamed-chunk-42-1.png){width=672}\n:::\n:::\n\n\n\n## AutoRegressive Integrated Moving Average(ARIMA) Methods for Time Series Forecasting: fable (tidyverts) methods\n\n## Visualising Autocorrelations: feasts methods\n\nfeasts package provides a very handy function for visualising ACF and PACF of a time series called gg_tsdiaply().\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvietnam_train %>%\n  gg_tsdisplay(plot_type='partial')\n```\n\n::: {.cell-output-display}\n![](In-class_Ex07_files/figure-html/unnamed-chunk-43-1.png){width=672}\n:::\n:::\n\n\n\n## Visualising Autocorrelations: feasts methods\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntsibble_longer %>%\n  filter(`Country` == \"Vietnam\") %>%\n  ACF(Arrivals) %>% \n  autoplot()\n```\n\n::: {.cell-output-display}\n![](In-class_Ex07_files/figure-html/unnamed-chunk-44-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntsibble_longer %>%\n  filter(`Country` == \"United Kingdom\") %>%\n  ACF(Arrivals) %>% \n  autoplot()\n```\n\n::: {.cell-output-display}\n![](In-class_Ex07_files/figure-html/unnamed-chunk-45-1.png){width=672}\n:::\n:::\n\n\n\nBy comparing both ACF plots, it is clear that visitor arrivals from United Kingdom were very seasonal and relatively weaker trend as compare to visitor arrivals from Vietnam.\n\n## Differencing: fable methods\n\n## Trend differencing\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntsibble_longer %>%\n  filter(Country == \"Vietnam\") %>%\n  gg_tsdisplay(difference(\n    Arrivals,\n    lag = 1), \n    plot_type='partial')\n```\n\n::: {.cell-output-display}\n![](In-class_Ex07_files/figure-html/unnamed-chunk-46-1.png){width=672}\n:::\n:::\n\n\n\n## Seasonal differencing\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntsibble_longer %>%\n  filter(Country == \"Vietnam\") %>%\n  gg_tsdisplay(difference(\n    Arrivals,\n    difference = 12), \n    plot_type='partial')\n```\n\n::: {.cell-output-display}\n![](In-class_Ex07_files/figure-html/unnamed-chunk-47-1.png){width=672}\n:::\n:::\n\n\n\nThe PACF is suggestive of an AR(1) model; so an initial candidate model is an ARIMA(1,1,0). The ACF suggests an MA(1) model; so an alternative candidate is an ARIMA(0,1,1).\n\n## Fitting ARIMA models manually: fable methods\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfit_arima <- vietnam_train %>%\n  model(\n    arima200 = ARIMA(Arrivals ~ pdq(2,0,0)),\n    sarima210 = ARIMA(Arrivals ~ pdq(2,0,0) + \n                        PDQ(2,1,0))\n    )\nreport(fit_arima)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 9\n  Country .model      sigma2 log_lik   AIC  AICc   BIC ar_roots   ma_roots \n  <chr>   <chr>        <dbl>   <dbl> <dbl> <dbl> <dbl> <list>     <list>   \n1 Vietnam arima200  4173906.  -1085. 2181. 2182. 2198. <cpl [26]> <cpl [0]>\n2 Vietnam sarima210 4173906.  -1085. 2181. 2182. 2198. <cpl [26]> <cpl [0]>\n```\n\n\n:::\n:::\n\n\n\n## Fitting ARIMA models automatically: fable methods\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfit_autoARIMA <- vietnam_train %>%\n  model(ARIMA(Arrivals))\nreport(fit_autoARIMA)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSeries: Arrivals \nModel: ARIMA(2,0,0)(2,1,0)[12] w/ drift \n\nCoefficients:\n         ar1     ar2     sar1     sar2   constant\n      0.4748  0.1892  -0.5723  -0.1578  1443.2068\ns.e.  0.0924  0.0903   0.0989   0.1032   188.9468\n\nsigma^2 estimated as 4173906:  log likelihood=-1084.6\nAIC=2181.19   AICc=2181.94   BIC=2197.92\n```\n\n\n:::\n:::\n\n\n\n## Model Comparison\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbind_rows(\n    fit_autoARIMA %>% accuracy(),\n    fit_autoETS %>% accuracy(),\n    fit_autoARIMA %>% \n      forecast(h = 12) %>% \n      accuracy(vietnam_ts),\n    fit_autoETS %>% \n      forecast(h = 12) %>% \n      accuracy(vietnam_ts)) %>%\n  select(-ME, -MPE, -ACF1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 8\n  Country .model          .type     RMSE   MAE  MAPE  MASE RMSSE\n  <chr>   <chr>           <chr>    <dbl> <dbl> <dbl> <dbl> <dbl>\n1 Vietnam ARIMA(Arrivals) Training 1907. 1458.  5.37 0.491 0.517\n2 Vietnam ETS(Arrivals)   Training 1745. 1386.  5.29 0.467 0.473\n3 Vietnam ARIMA(Arrivals) Test     2647. 2136.  5.17 0.720 0.717\n4 Vietnam ETS(Arrivals)   Test     3163. 2636.  6.64 0.889 0.857\n```\n\n\n:::\n:::\n\n\n\n## Forecast Multiple Time Series\nIn this section, we will perform time series forecasting on multiple time series at one goal. For the purpose of the hand-on exercise, visitor arrivals from five selected ASEAN countries will be used.\n\nFirst, filter() is used to extract the selected countries’ data.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nASEAN <- tsibble_longer %>%\n  filter(Country == \"Vietnam\" |\n         Country == \"Malaysia\" |\n         Country == \"Indonesia\" |\n         Country == \"Thailand\" |\n         Country == \"Philippines\")\n```\n:::\n\n\n\nNext, mutate() is used to create a new field called Type and populates their respective values. Lastly, filter() is used to extract the training data set and save it as a tsibble object called ASEAN_train.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nASEAN_train <- ASEAN %>%\n  mutate(Type = if_else(\n    `Month-Year` >= \"2019-01-01\", \n    \"Hold-out\", \"Training\")) %>%\n  filter(Type == \"Training\")\n```\n:::\n\n\n\n## Fitting Mulltiple Time Series\n\nIn the code chunk below auto ETS and ARIMA models are fitted by using model().\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nASEAN_fit <- ASEAN_train %>%\n  model(\n    ets = ETS(Arrivals),\n    arima = ARIMA(Arrivals)\n  )\n```\n:::\n\n\n\n## Examining Models\nThe glance() of fabletools provides a one-row summary of each model, and commonly includes descriptions of the model’s fit such as the residual variance and information criteria.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nASEAN_fit %>%\n  glance()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 × 12\n   Country     .model  sigma2 log_lik   AIC  AICc   BIC      MSE    AMSE     MAE\n   <chr>       <chr>    <dbl>   <dbl> <dbl> <dbl> <dbl>    <dbl>   <dbl>   <dbl>\n 1 Indonesia   ets    1.02e-2  -1561. 3156. 3161. 3205.   1.74e8  1.80e8  0.0732\n 2 Indonesia   arima  1.48e+8  -1290. 2589. 2590. 2603.  NA      NA      NA     \n 3 Malaysia    ets    4.67e-3  -1430. 2894. 2899. 2943.   2.04e7  2.00e7  0.0506\n 4 Malaysia    arima  2.62e+7  -1185. 2378. 2379. 2390.  NA      NA      NA     \n 5 Philippines ets    3.56e-3  -1343. 2722. 2728. 2774.   5.28e6  7.58e6  0.0461\n 6 Philippines arima  8.04e+6  -1122. 2260. 2262. 2283.  NA      NA      NA     \n 7 Thailand    ets    6.63e-3  -1343. 2722. 2728. 2774.   5.40e6  6.33e6  0.0584\n 8 Thailand    arima  8.51e+6  -1127. 2269. 2270. 2288.  NA      NA      NA     \n 9 Vietnam     ets    4.55e-3  -1300. 2635. 2640. 2684.   3.05e6  3.42e6  0.0520\n10 Vietnam     arima  4.17e+6  -1085. 2181. 2182. 2198.  NA      NA      NA     \n# ℹ 2 more variables: ar_roots <list>, ma_roots <list>\n```\n\n\n:::\n:::\n\n\n\nBe wary though, as information criteria (AIC, AICc, BIC) are only comparable between the same model class and only if those models share the same response (after transformations and differencing).\n\n## Extracting fitted and residual values\nThe fitted values and residuals from a model can obtained using fitted() and residuals() respectively. Additionally, the augment() function may be more convenient, which provides the original data along with both fitted values and their residuals.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nASEAN_fit %>%\n  augment()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tsibble: 1,320 x 7 [1M]\n# Key:       Country, .model [10]\n   Country   .model     Month Arrivals .fitted  .resid  .innov\n   <chr>     <chr>      <mth>    <dbl>   <dbl>   <dbl>   <dbl>\n 1 Indonesia ets     2008 Jan    62683  56534.   6149.  0.109 \n 2 Indonesia ets     2008 Feb    47834  46417.   1417.  0.0305\n 3 Indonesia ets     2008 Mar    64688  62660.   2028.  0.0324\n 4 Indonesia ets     2008 Apr    58074  61045.  -2971. -0.0487\n 5 Indonesia ets     2008 May    57089  62280.  -5191. -0.0833\n 6 Indonesia ets     2008 Jun    70118  75791.  -5673. -0.0749\n 7 Indonesia ets     2008 Jul    73805  78691.  -4886. -0.0621\n 8 Indonesia ets     2008 Aug    58015  61910.  -3895. -0.0629\n 9 Indonesia ets    2008 Sept    63730  74518. -10788. -0.145 \n10 Indonesia ets     2008 Oct    71206  67869.   3337.  0.0492\n# ℹ 1,310 more rows\n```\n\n\n:::\n:::\n\n\n\n## Comparing Fit Models\nIn the code chunk below, accuracy() is used to compare the performances of the models.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nASEAN_fit %>%\n  accuracy() %>%\n  arrange(Country)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 × 11\n   Country   .model .type      ME   RMSE   MAE    MPE  MAPE  MASE RMSSE     ACF1\n   <chr>     <chr>  <chr>   <dbl>  <dbl> <dbl>  <dbl> <dbl> <dbl> <dbl>    <dbl>\n 1 Indonesia ets    Trai… -1.81e3 13187. 9665. -1.83   7.57 0.556 0.619 -0.236  \n 2 Indonesia arima  Trai… -9.54e1 11351. 8382. -0.136  6.38 0.482 0.533 -0.00802\n 3 Malaysia  ets    Trai… -6.78e2  4515. 3538. -1.25   5.15 0.529 0.527 -0.288  \n 4 Malaysia  arima  Trai… -2.33e1  4801. 3684. -0.109  5.20 0.551 0.561 -0.00933\n 5 Philippi… ets    Trai… -2.35e0  2298. 1897. -0.334  4.64 0.464 0.408  0.0400 \n 6 Philippi… arima  Trai…  9.53e0  2624. 1934. -0.269  4.60 0.473 0.466  0.00717\n 7 Thailand  ets    Trai…  1.97e1  2323. 1773. -0.511  5.89 0.489 0.485 -0.0812 \n 8 Thailand  arima  Trai…  5.88e1  2710. 1932. -0.562  6.16 0.532 0.565 -0.0112 \n 9 Vietnam   ets    Trai… -3.52e1  1745. 1386. -0.728  5.29 0.467 0.473  0.279  \n10 Vietnam   arima  Trai…  1.95e0  1907. 1458. -0.671  5.37 0.491 0.517  0.0136 \n```\n\n\n:::\n:::\n\n\n\n## Forecast Future Values\nForecasts from these models can be produced directly as our specified models do not require any additional data.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nASEAN_fc <- ASEAN_fit %>%\n  forecast(h = \"12 months\")\n```\n:::\n\n\n\n## Visualising the forecasted values\nIn the code chunk below autoplot() of feasts package is used to plot the raw and fitted values.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nASEAN_fc %>%\n  autoplot(ASEAN)\n```\n\n::: {.cell-output-display}\n![](In-class_Ex07_files/figure-html/unnamed-chunk-58-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "In-class_Ex07_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}