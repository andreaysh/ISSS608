[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ISSS608 - Visual Analytics and Applications",
    "section": "",
    "text": "The future of analytics"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "In this webpage, you will find my learning journey and deliverables of ISSS608 Visual Analytics and Applications. I am Godzilla. This is the course page of ISSS608 whereby I share my Hands-on Exercises, In-class Exercises, Take-Home Exercises and Project\nDo Linkledin page, and brief introduction ```"
  },
  {
    "objectID": "New.html",
    "href": "New.html",
    "title": "New",
    "section": "",
    "text": "Data science hoepfully is easy"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex00.html",
    "href": "Hands-on_Ex/Hands-on_Ex00.html",
    "title": "Hands-on Exercise 00: Working with tidyverse",
    "section": "",
    "text": "Loading tidyverse onto r environment by using the code chunk below\n\npacman:: p_load(tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex00.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex00.html#getting-started",
    "title": "Hands-on Exercise 00: Working with tidyverse",
    "section": "",
    "text": "Loading tidyverse onto r environment by using the code chunk below\n\npacman:: p_load(tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex00.html#importing-data",
    "href": "Hands-on_Ex/Hands-on_Ex00.html#importing-data",
    "title": "Hands-on Exercise 00: Working with tidyverse",
    "section": "Importing Data",
    "text": "Importing Data\nCode chunk below uses read_csv() of readr to import REALIS2019.csv into r environment as a tibble data.frame.\n\nrealis2019 &lt;- read_csv(\"data/REALIS2019.csv\")\npopdata_fat &lt;- read_csv(\"data/PopData2019_fat.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex00.html#pivoting-data",
    "href": "Hands-on_Ex/Hands-on_Ex00.html#pivoting-data",
    "title": "Hands-on Exercise 00: Working with tidyverse",
    "section": "Pivoting Data",
    "text": "Pivoting Data\n\n#pivot_longer() \"lengthens\" data, increasing the number of rows and decreasing the number of columns\n\npopdata_long &lt;- popdata_fat %&gt;% #pipe: to combine diff functions tgt\n  pivot_longer(c(3:21), #column\n               names_to = \"Age Group\", #column headers to rows\n               values_to = \"Population\") #values to rows\n\n\nwrite_rds(popdata_long, \"rds/popdata_long.rds\") #rds: compact r file"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex00.html#selecting-data",
    "href": "Hands-on_Ex/Hands-on_Ex00.html#selecting-data",
    "title": "Hands-on Exercise 00: Working with tidyverse",
    "section": "Selecting Data",
    "text": "Selecting Data\n\nrealis2019_selected &lt;- realis2019 %&gt;%\n  select(`Project Name`,\n         `Transacted Price ($)`,\n         `Type of Sale`,\n         `Unit Price ($ psm)`,\n         `Property Type`)\nrealis2019_selected\n\n# A tibble: 19,515 × 5\n   `Project Name`     `Transacted Price ($)` `Type of Sale` `Unit Price ($ psm)`\n   &lt;chr&gt;                               &lt;dbl&gt; &lt;chr&gt;                         &lt;dbl&gt;\n 1 PEIRCE VIEW                        840000 Resale                         7434\n 2 FLORIDA PARK                      3040000 Resale                         9737\n 3 BULLION PARK                       860000 Resale                        11467\n 4 CASTLE GREEN                      1000000 Resale                         9346\n 5 HAPPY ESTATE                      7000000 Resale                        10183\n 6 TEACHER'S HOUSING…                2880000 Resale                        12659\n 7 THE PANORAMA                      1510000 Resale                        16064\n 8 THE PANORAMA                       710000 Resale                        16905\n 9 CHIP THYE GARDEN                  2800000 Resale                        13500\n10 TEACHER'S HOUSING…                2300000 Resale                         9935\n# ℹ 19,505 more rows\n# ℹ 1 more variable: `Property Type` &lt;chr&gt;"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex00.html#filtering-data-using-dplyr-package",
    "href": "Hands-on_Ex/Hands-on_Ex00.html#filtering-data-using-dplyr-package",
    "title": "Hands-on Exercise 00: Working with tidyverse",
    "section": "Filtering Data using dplyr package",
    "text": "Filtering Data using dplyr package\n\nrealis2019_filtered &lt;- realis2019_selected %&gt;%\n  filter (`Property Type` == \"Condominium\" |\n            `Property Type` == \"Apartment\") %&gt;%\n  filter (`Type of Sale` == \"New Sale\") %&gt;%\n  filter (`Unit Price ($ psm)` &lt;= 13000)\n\nrealis2019_filtered\n\n# A tibble: 87 × 5\n   `Project Name`     `Transacted Price ($)` `Type of Sale` `Unit Price ($ psm)`\n   &lt;chr&gt;                               &lt;dbl&gt; &lt;chr&gt;                         &lt;dbl&gt;\n 1 RIVERFRONT RESIDE…                1029000 New Sale                      12863\n 2 RIVERFRONT RESIDE…                 871000 New Sale                      12809\n 3 RIVERFRONT RESIDE…                1940000 New Sale                      12848\n 4 RIVERFRONT RESIDE…                1030000 New Sale                      12875\n 5 RIVERFRONT RESIDE…                2061000 New Sale                      12962\n 6 RIVERFRONT RESIDE…                 762000 New Sale                      12915\n 7 RIVERFRONT RESIDE…                1001000 New Sale                      12513\n 8 RIVERFRONT RESIDE…                1271000 New Sale                      12838\n 9 RIVERFRONT RESIDE…                1310000 New Sale                      12970\n10 RIVERFRONT RESIDE…                1339000 New Sale                      13000\n# ℹ 77 more rows\n# ℹ 1 more variable: `Property Type` &lt;chr&gt;\n\n\n\nPutting all together\n\nrealis2019_end &lt;- realis2019 %&gt;%\n  select(`Project Name`,\n         `Transacted Price ($)`,\n         `Type of Sale`,\n         `Unit Price ($ psm)`,\n         `Property Type`)   %&gt;%\n  filter (`Property Type` == \"Condominium\" |\n            `Property Type` == \"Apartment\") %&gt;%\n  filter (`Type of Sale` == \"New Sale\") %&gt;%\n  filter (`Unit Price ($ psm)` &lt;= 13000)\n\nrealis2019_end\n\n# A tibble: 87 × 5\n   `Project Name`     `Transacted Price ($)` `Type of Sale` `Unit Price ($ psm)`\n   &lt;chr&gt;                               &lt;dbl&gt; &lt;chr&gt;                         &lt;dbl&gt;\n 1 RIVERFRONT RESIDE…                1029000 New Sale                      12863\n 2 RIVERFRONT RESIDE…                 871000 New Sale                      12809\n 3 RIVERFRONT RESIDE…                1940000 New Sale                      12848\n 4 RIVERFRONT RESIDE…                1030000 New Sale                      12875\n 5 RIVERFRONT RESIDE…                2061000 New Sale                      12962\n 6 RIVERFRONT RESIDE…                 762000 New Sale                      12915\n 7 RIVERFRONT RESIDE…                1001000 New Sale                      12513\n 8 RIVERFRONT RESIDE…                1271000 New Sale                      12838\n 9 RIVERFRONT RESIDE…                1310000 New Sale                      12970\n10 RIVERFRONT RESIDE…                1339000 New Sale                      13000\n# ℹ 77 more rows\n# ℹ 1 more variable: `Property Type` &lt;chr&gt;\n\n\nNotes: eval (display the code but does not run it), echo (runs the code but does not display it), %&gt;% (used to combine multiple functions together)\n#Change environmental variables if needed"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex00.html#working-with-dplyr",
    "href": "Hands-on_Ex/Hands-on_Ex00.html#working-with-dplyr",
    "title": "Hands-on Exercise 00: Working with tidyverse",
    "section": "Working with dplyr",
    "text": "Working with dplyr\n\nrealis2019_selected &lt;- realis2019 %&gt;% \n  select(`Project Name`, \n         `Transacted Price ($)`, \n         `Property Type`,\n         `Type of Sale`,\n         `Unit Price ($ psm)`) \nrealis2019_selected\n\n# A tibble: 19,515 × 5\n   `Project Name`          `Transacted Price ($)` `Property Type` `Type of Sale`\n   &lt;chr&gt;                                    &lt;dbl&gt; &lt;chr&gt;           &lt;chr&gt;         \n 1 PEIRCE VIEW                             840000 Condominium     Resale        \n 2 FLORIDA PARK                           3040000 Semi-Detached … Resale        \n 3 BULLION PARK                            860000 Condominium     Resale        \n 4 CASTLE GREEN                           1000000 Condominium     Resale        \n 5 HAPPY ESTATE                           7000000 Semi-Detached … Resale        \n 6 TEACHER'S HOUSING ESTA…                2880000 Terrace House   Resale        \n 7 THE PANORAMA                           1510000 Condominium     Resale        \n 8 THE PANORAMA                            710000 Condominium     Resale        \n 9 CHIP THYE GARDEN                       2800000 Terrace House   Resale        \n10 TEACHER'S HOUSING ESTA…                2300000 Terrace House   Resale        \n# ℹ 19,505 more rows\n# ℹ 1 more variable: `Unit Price ($ psm)` &lt;dbl&gt;"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex00.html#working-with-filter-of-dplyr",
    "href": "Hands-on_Ex/Hands-on_Ex00.html#working-with-filter-of-dplyr",
    "title": "Hands-on-Exercise 00: working with tidyverse",
    "section": "working with filter() of dplyr",
    "text": "working with filter() of dplyr\n\nrealis2019_filtered &lt;- realis2019_selected %&gt;% \n  filter(`Property Type` ==\"Condominium\" | \n           `Property Type`== \"Apartment\") %&gt;% \n  filter(`Type of Sale` == \"New Sale\") %&gt;% \n  filter(`Unit Price ($ psm)` &lt;= 13000)\n\n\nPutting all together\n\nrealis2019_selected &lt;- realis2019 %&gt;% \n  select(`Project Name`, \n         `Transacted Price ($)`, \n         `Type of Sale`,\n         `Unit Price ($ psm)`,\n         `Property Type`) %&gt;% \n  filter(`Property Type` ==\"Condominium\" | \n           `Property Type`== \"Apartment\") %&gt;% \n  filter(`Type of Sale` == \"New Sale\") %&gt;% \n  filter(`Unit Price ($ psm)` &lt;= 13000)"
  },
  {
    "objectID": "index.html#welcome-to-iss608---visual-analytics-and-applications-ay20242025-jan-class",
    "href": "index.html#welcome-to-iss608---visual-analytics-and-applications-ay20242025-jan-class",
    "title": "ISSS608 - Visual Analytics and Applications",
    "section": "Welcome to ISS608 - Visual Analytics and Applications, AY2024/2025 Jan class!",
    "text": "Welcome to ISS608 - Visual Analytics and Applications, AY2024/2025 Jan class!\n\nOverview\nThis page documents my learning journey of creating data visualization beyond default, using R and Tableau.This is part of the ISSS608 course by SMU MITB program, by Prof Kam Tin Seong\nIf you have any feedback or need any clarification, you may contact me at andrea.yeo.2023@mitb.smu.edu.sg\nI hope you enjoy it!\n\n\nLearning journey\nMy journey into programming felt like starring in a drama-comedy series\n- nervously stared at the code like it was ancient hieroglyphs\n- hours of debugging only to realize I missed a semicolon/indentation\n- the code worked (or so I thought).\n- proudly watching my quarto run smoothly… until the next bug sneaked in"
  },
  {
    "objectID": "index.html#find-out-what-i-have-learnt",
    "href": "index.html#find-out-what-i-have-learnt",
    "title": "ISSS608 - Visual Analytics and Applications",
    "section": "Find out what I have learnt",
    "text": "Find out what I have learnt\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn-class Exercise\nHands-on Exercise\nTake-home Exercise"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01.html",
    "href": "Hands-on_Ex/Hands-on_Ex01.html",
    "title": "Hands-on Exercise 01",
    "section": "",
    "text": "In this chapter, we will learn the basic principles and key components of ggplot2. we will get hands-on experience using these components to create statistical graphics based on the principles of the Layered Grammar of Graphics. By the end, we will be able to apply ggplot2’s essential graphical elements to create elegant and functional statistical visualizations.\n\n\n\n\n\nThe code chunk below uses p_load() from the pacman package to check if the tidyverse packages are installed on my computer. If they are, they will be loaded into the R environment.If not, we will proceed to install pacman first.\n\npacman::p_load(tidyverse)\n\n\n\n\nWe will import exam_data.csv into R environment by using the read.csv()function and assign it to exam_data\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\", show_col_types = FALSE)\n\nWe will check the dataset using below\n\nglimpse(): provides a transposed overview of a dataset, showing variables and their types in a concise format.\nhead(): displays the first few rows of a dataset (default is 6 rows) to give a quick preview of the data.\nsummary(): generates a statistical summary of each variable, including measures like mean, median, and range for numeric data.\n\n\nglimpse()head()summary()\n\n\n\nglimpse(exam_data)\n\nRows: 322\nColumns: 7\n$ ID      &lt;chr&gt; \"Student321\", \"Student305\", \"Student289\", \"Student227\", \"Stude…\n$ CLASS   &lt;chr&gt; \"3I\", \"3I\", \"3H\", \"3F\", \"3I\", \"3I\", \"3I\", \"3I\", \"3I\", \"3H\", \"3…\n$ GENDER  &lt;chr&gt; \"Male\", \"Female\", \"Male\", \"Male\", \"Male\", \"Female\", \"Male\", \"M…\n$ RACE    &lt;chr&gt; \"Malay\", \"Malay\", \"Chinese\", \"Chinese\", \"Malay\", \"Malay\", \"Chi…\n$ ENGLISH &lt;dbl&gt; 21, 24, 26, 27, 27, 31, 31, 31, 33, 34, 34, 36, 36, 36, 37, 38…\n$ MATHS   &lt;dbl&gt; 9, 22, 16, 77, 11, 16, 21, 18, 19, 49, 39, 35, 23, 36, 49, 30,…\n$ SCIENCE &lt;dbl&gt; 15, 16, 16, 31, 25, 16, 25, 27, 15, 37, 42, 22, 32, 36, 35, 45…\n\n\n\n\n\nhead(exam_data)\n\n# A tibble: 6 × 7\n  ID         CLASS GENDER RACE    ENGLISH MATHS SCIENCE\n  &lt;chr&gt;      &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;     &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt;\n1 Student321 3I    Male   Malay        21     9      15\n2 Student305 3I    Female Malay        24    22      16\n3 Student289 3H    Male   Chinese      26    16      16\n4 Student227 3F    Male   Chinese      27    77      31\n5 Student318 3I    Male   Malay        27    11      25\n6 Student306 3I    Female Malay        31    16      16\n\n\n\n\n\nsummary(exam_data)\n\n      ID               CLASS              GENDER              RACE          \n Length:322         Length:322         Length:322         Length:322        \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n    ENGLISH          MATHS          SCIENCE     \n Min.   :21.00   Min.   : 9.00   Min.   :15.00  \n 1st Qu.:59.00   1st Qu.:58.00   1st Qu.:49.25  \n Median :70.00   Median :74.00   Median :65.00  \n Mean   :67.18   Mean   :69.33   Mean   :61.16  \n 3rd Qu.:78.00   3rd Qu.:85.00   3rd Qu.:74.75  \n Max.   :96.00   Max.   :99.00   Max.   :96.00  \n\n\n\n\n\n\n\n\n\n\n\nReflection\n\n\n\n\nLearnt how to load libraries, import/ read excel files\n\n\n\n\n\n\n\nggplot2 is an R package for creating data-driven graphics based on The Grammar of Graphics. It is also part of the tidyverse family specially designed for visual exploration and communication.\nFor more information, visit ggplot2\n\n\nLets compare how R Graphics, the core graphical functions of Base R and ggplot plot a simple histogram.\n\nR Graphicsggplot2\n\n\n\nhist(exam_data$MATHS,col = \"#4169e1\")\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, aes(x = MATHS)) +\n  geom_histogram(bins=10, \n                 boundary = 100,\n                 color=\"black\", \n                 fill=\"#4169e1\") +\n  ggtitle(\"Distribution of Maths scores\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nReflection\n\n\n\n\nWhile R Graphics offers simpler syntax, Hadley Wickham emphasizes that the true value of ggplot2 lies not in its specific plotting syntax, but in the transformative way it approaches visualization. It enables users to think of visualizations as a method of mapping variables to the visual attributes of geometric objects, creating a powerful framework for understanding and perceiving data.\n\n\n\n\n\n\n\nThe Grammar of Graphics, introduced by Leland Wilkinson in 1999, provides a structured approach to creating meaningful data visualizations. It breaks graphs into semantic components like scales and layers, offering a framework to answer the question: What is a statistical graphic?\nThe key principles I’ve learned are:\n\nGraphics are built from distinct layers of grammatical elements.\nMeaningful plots are achieved through aesthetic mapping.\n\nThis grammar helps me see how complex graphics are composed, uncover connections between seemingly different visuals, and understand the foundation of diverse visualizations. It also guides me toward recognizing well-formed, meaningful graphics while acknowledging that not all grammatically correct visuals will make sense.\n\n\nFigure shows the seven grammars of ggplot2: A layered grammar of graphics\n\n\n\nA layered grammar of graphics\n\n\nThe building blocks of the Grammar of Graphics are:\n\nData: The dataset being visualized.\nAesthetics: Attributes like position, color, size, shape, or transparency that map data to visual elements.\nGeometries: Visual elements representing data, such as points, bars, or lines.\nFacets: Subsets of data used to create multiple variations of a graph (e.g., panels).\nStatistics: Transformations summarizing data, such as means or confidence intervals.\nCoordinate Systems: The plane where data is plotted (e.g., Cartesian or polar).\nThemes: Non-data components like titles, axis labels, or legend formatting.\n\n\n\n\n\nLet us call the ggplot( ) function using the code chunk below.\n\nggplot(data=exam_data)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nA blank canvas is created with ggplot().\nggplot() initializes a ggplot object.\nThe data argument specifies the dataset for plotting.\nIf the dataset is not already a data.frame, it will be converted to one by fortify().\n\n\n\n\n\n\nAesthetic mappings link data attributes to visual characteristics like position, color, size, shape, or transparency, allowing each characteristic to represent information. These mappings are defined using the aes() function, and each geom layer can have its own aes() specification.\nThe code below adds the aesthetic element into the plot.\n\nggplot(data=exam_data,\n       aes(x=MATHS,\n           y=ENGLISH))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nggplot includes the x/y axis and the axis’s label\n\n\n\n\n\n\nGeometric objects are the visual marks on a plot. A layer combines data, aesthetic mappings, a geometric object (geom), statistical transformations (stat), and position adjustments. Layers are typically created using geom_ functions, with options to override default stat or position settings. Every plot requires at least one geom, and additional geoms can be added using the + operator.\nRefer here for a more comprehensive list.\nBelow are some examples of geom_:\n\ngeom_point: for drawing individual points (e.g., a scatter plot)\ngeom_line: for drawing lines (e.g., for a line charts)\ngeom_col: for drawing bars with heights mapped to values in the data (e.g., bar charts).\ngeom_boxplot: for drawing box-and-whisker plots to visualize data distribution and outliers.\ngeom_histogram: for drawing binned values to represent the distribution of a numeric variable (e.g., histograms).\ngeom_density: for drawing smoothed density estimates to visualize the distribution of a numeric variable.\n\n\n\n\nThe code below plots a bar chart by using geom_bar().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()\n\n\n\n\n\n\n\n\n\n\n\nIn a dot plot, the dot width represents the bin width (or maximum width, depending on the binning method), and dots are stacked, with each dot signifying one observation.\nThe code below plots a dot plot chart by using geom_dotplot().\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(dotsize = 0.5)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nReflection\n\n\n\n\nLearnt how to load ggplot package and to create a bar chart using geom_bar()\n\n\n\nlibrary(ggplot2)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01.html#a-layered-grammar-of-graphics-ggplot2-methods",
    "href": "Hands-on_Ex/Hands-on_Ex01.html#a-layered-grammar-of-graphics-ggplot2-methods",
    "title": "Hands-on Exercise 01",
    "section": "",
    "text": "In this chapter, we will learn the basic principles and key components of ggplot2. we will get hands-on experience using these components to create statistical graphics based on the principles of the Layered Grammar of Graphics. By the end, we will be able to apply ggplot2’s essential graphical elements to create elegant and functional statistical visualizations.\n\n\n\n\n\nThe code chunk below uses p_load() from the pacman package to check if the tidyverse packages are installed on my computer. If they are, they will be loaded into the R environment.If not, we will proceed to install pacman first.\n\npacman::p_load(tidyverse)\n\n\n\n\nWe will import exam_data.csv into R environment by using the read.csv()function and assign it to exam_data\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\", show_col_types = FALSE)\n\nWe will check the dataset using below\n\nglimpse(): provides a transposed overview of a dataset, showing variables and their types in a concise format.\nhead(): displays the first few rows of a dataset (default is 6 rows) to give a quick preview of the data.\nsummary(): generates a statistical summary of each variable, including measures like mean, median, and range for numeric data.\n\n\nglimpse()head()summary()\n\n\n\nglimpse(exam_data)\n\nRows: 322\nColumns: 7\n$ ID      &lt;chr&gt; \"Student321\", \"Student305\", \"Student289\", \"Student227\", \"Stude…\n$ CLASS   &lt;chr&gt; \"3I\", \"3I\", \"3H\", \"3F\", \"3I\", \"3I\", \"3I\", \"3I\", \"3I\", \"3H\", \"3…\n$ GENDER  &lt;chr&gt; \"Male\", \"Female\", \"Male\", \"Male\", \"Male\", \"Female\", \"Male\", \"M…\n$ RACE    &lt;chr&gt; \"Malay\", \"Malay\", \"Chinese\", \"Chinese\", \"Malay\", \"Malay\", \"Chi…\n$ ENGLISH &lt;dbl&gt; 21, 24, 26, 27, 27, 31, 31, 31, 33, 34, 34, 36, 36, 36, 37, 38…\n$ MATHS   &lt;dbl&gt; 9, 22, 16, 77, 11, 16, 21, 18, 19, 49, 39, 35, 23, 36, 49, 30,…\n$ SCIENCE &lt;dbl&gt; 15, 16, 16, 31, 25, 16, 25, 27, 15, 37, 42, 22, 32, 36, 35, 45…\n\n\n\n\n\nhead(exam_data)\n\n# A tibble: 6 × 7\n  ID         CLASS GENDER RACE    ENGLISH MATHS SCIENCE\n  &lt;chr&gt;      &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;     &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt;\n1 Student321 3I    Male   Malay        21     9      15\n2 Student305 3I    Female Malay        24    22      16\n3 Student289 3H    Male   Chinese      26    16      16\n4 Student227 3F    Male   Chinese      27    77      31\n5 Student318 3I    Male   Malay        27    11      25\n6 Student306 3I    Female Malay        31    16      16\n\n\n\n\n\nsummary(exam_data)\n\n      ID               CLASS              GENDER              RACE          \n Length:322         Length:322         Length:322         Length:322        \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n    ENGLISH          MATHS          SCIENCE     \n Min.   :21.00   Min.   : 9.00   Min.   :15.00  \n 1st Qu.:59.00   1st Qu.:58.00   1st Qu.:49.25  \n Median :70.00   Median :74.00   Median :65.00  \n Mean   :67.18   Mean   :69.33   Mean   :61.16  \n 3rd Qu.:78.00   3rd Qu.:85.00   3rd Qu.:74.75  \n Max.   :96.00   Max.   :99.00   Max.   :96.00  \n\n\n\n\n\n\n\n\n\n\n\nReflection\n\n\n\n\nLearnt how to load libraries, import/ read excel files\n\n\n\n\n\n\n\nggplot2 is an R package for creating data-driven graphics based on The Grammar of Graphics. It is also part of the tidyverse family specially designed for visual exploration and communication.\nFor more information, visit ggplot2\n\n\nLets compare how R Graphics, the core graphical functions of Base R and ggplot plot a simple histogram.\n\nR Graphicsggplot2\n\n\n\nhist(exam_data$MATHS,col = \"#4169e1\")\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, aes(x = MATHS)) +\n  geom_histogram(bins=10, \n                 boundary = 100,\n                 color=\"black\", \n                 fill=\"#4169e1\") +\n  ggtitle(\"Distribution of Maths scores\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nReflection\n\n\n\n\nWhile R Graphics offers simpler syntax, Hadley Wickham emphasizes that the true value of ggplot2 lies not in its specific plotting syntax, but in the transformative way it approaches visualization. It enables users to think of visualizations as a method of mapping variables to the visual attributes of geometric objects, creating a powerful framework for understanding and perceiving data.\n\n\n\n\n\n\n\nThe Grammar of Graphics, introduced by Leland Wilkinson in 1999, provides a structured approach to creating meaningful data visualizations. It breaks graphs into semantic components like scales and layers, offering a framework to answer the question: What is a statistical graphic?\nThe key principles I’ve learned are:\n\nGraphics are built from distinct layers of grammatical elements.\nMeaningful plots are achieved through aesthetic mapping.\n\nThis grammar helps me see how complex graphics are composed, uncover connections between seemingly different visuals, and understand the foundation of diverse visualizations. It also guides me toward recognizing well-formed, meaningful graphics while acknowledging that not all grammatically correct visuals will make sense.\n\n\nFigure shows the seven grammars of ggplot2: A layered grammar of graphics\n\n\n\nA layered grammar of graphics\n\n\nThe building blocks of the Grammar of Graphics are:\n\nData: The dataset being visualized.\nAesthetics: Attributes like position, color, size, shape, or transparency that map data to visual elements.\nGeometries: Visual elements representing data, such as points, bars, or lines.\nFacets: Subsets of data used to create multiple variations of a graph (e.g., panels).\nStatistics: Transformations summarizing data, such as means or confidence intervals.\nCoordinate Systems: The plane where data is plotted (e.g., Cartesian or polar).\nThemes: Non-data components like titles, axis labels, or legend formatting.\n\n\n\n\n\nLet us call the ggplot( ) function using the code chunk below.\n\nggplot(data=exam_data)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nA blank canvas is created with ggplot().\nggplot() initializes a ggplot object.\nThe data argument specifies the dataset for plotting.\nIf the dataset is not already a data.frame, it will be converted to one by fortify().\n\n\n\n\n\n\nAesthetic mappings link data attributes to visual characteristics like position, color, size, shape, or transparency, allowing each characteristic to represent information. These mappings are defined using the aes() function, and each geom layer can have its own aes() specification.\nThe code below adds the aesthetic element into the plot.\n\nggplot(data=exam_data,\n       aes(x=MATHS,\n           y=ENGLISH))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nggplot includes the x/y axis and the axis’s label\n\n\n\n\n\n\nGeometric objects are the visual marks on a plot. A layer combines data, aesthetic mappings, a geometric object (geom), statistical transformations (stat), and position adjustments. Layers are typically created using geom_ functions, with options to override default stat or position settings. Every plot requires at least one geom, and additional geoms can be added using the + operator.\nRefer here for a more comprehensive list.\nBelow are some examples of geom_:\n\ngeom_point: for drawing individual points (e.g., a scatter plot)\ngeom_line: for drawing lines (e.g., for a line charts)\ngeom_col: for drawing bars with heights mapped to values in the data (e.g., bar charts).\ngeom_boxplot: for drawing box-and-whisker plots to visualize data distribution and outliers.\ngeom_histogram: for drawing binned values to represent the distribution of a numeric variable (e.g., histograms).\ngeom_density: for drawing smoothed density estimates to visualize the distribution of a numeric variable.\n\n\n\n\nThe code below plots a bar chart by using geom_bar().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()\n\n\n\n\n\n\n\n\n\n\n\nIn a dot plot, the dot width represents the bin width (or maximum width, depending on the binning method), and dots are stacked, with each dot signifying one observation.\nThe code below plots a dot plot chart by using geom_dotplot().\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(dotsize = 0.5)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nReflection\n\n\n\n\nLearnt how to load ggplot package and to create a bar chart using geom_bar()\n\n\n\nlibrary(ggplot2)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01.html#installing-and-loading-the-required-libraries",
    "href": "Hands-on_Ex/Hands-on_Ex01.html#installing-and-loading-the-required-libraries",
    "title": "Hands-on Exercise 01",
    "section": "1.2.1 Installing and loading the required libraries",
    "text": "1.2.1 Installing and loading the required libraries\nThe code chunk below uses p_load() from the pacman package to check if the tidyverse packages are installed on my computer. If they are, they will be loaded into the R environment.If not, we will proceed to install pacman first.\n\npacman::p_load(tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01.html#base-r",
    "href": "Hands-on_Ex/Hands-on_Ex01.html#base-r",
    "title": "Hands-on Exercise 01",
    "section": "Base R",
    "text": "Base R\n\nBase R\nContent about Base R plotting.\n\n\nggplot\nContent about ggplot plotting.\nThis is green text for HTML."
  }
]