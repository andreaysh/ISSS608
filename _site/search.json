[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ISSS608 - Visual Analytics and Applications",
    "section": "",
    "text": "The future of analytics"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "In this webpage, you will find my learning journey and deliverables of ISSS608 Visual Analytics and Applications. I am Godzilla. This is the course page of ISSS608 whereby I share my Hands-on Exercises, In-class Exercises, Take-Home Exercises and Project\nDo Linkledin page, and brief introduction ```"
  },
  {
    "objectID": "New.html",
    "href": "New.html",
    "title": "New",
    "section": "",
    "text": "Data science hoepfully is easy"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex00.html",
    "href": "Hands-on_Ex/Hands-on_Ex00.html",
    "title": "Hands-on Exercise 00: Working with tidyverse",
    "section": "",
    "text": "Loading tidyverse onto r environment by using the code chunk below\n\npacman:: p_load(tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex00.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex00.html#getting-started",
    "title": "Hands-on Exercise 00: Working with tidyverse",
    "section": "",
    "text": "Loading tidyverse onto r environment by using the code chunk below\n\npacman:: p_load(tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex00.html#importing-data",
    "href": "Hands-on_Ex/Hands-on_Ex00.html#importing-data",
    "title": "Hands-on Exercise 00: Working with tidyverse",
    "section": "Importing Data",
    "text": "Importing Data\nCode chunk below uses read_csv() of readr to import REALIS2019.csv into r environment as a tibble data.frame.\n\nrealis2019 &lt;- read_csv(\"data/REALIS2019.csv\")\npopdata_fat &lt;- read_csv(\"data/PopData2019_fat.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex00.html#pivoting-data",
    "href": "Hands-on_Ex/Hands-on_Ex00.html#pivoting-data",
    "title": "Hands-on Exercise 00: Working with tidyverse",
    "section": "Pivoting Data",
    "text": "Pivoting Data\n\n#pivot_longer() \"lengthens\" data, increasing the number of rows and decreasing the number of columns\n\npopdata_long &lt;- popdata_fat %&gt;% #pipe: to combine diff functions tgt\n  pivot_longer(c(3:21), #column\n               names_to = \"Age Group\", #column headers to rows\n               values_to = \"Population\") #values to rows\n\n\nwrite_rds(popdata_long, \"rds/popdata_long.rds\") #rds: compact r file"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex00.html#selecting-data",
    "href": "Hands-on_Ex/Hands-on_Ex00.html#selecting-data",
    "title": "Hands-on Exercise 00: Working with tidyverse",
    "section": "Selecting Data",
    "text": "Selecting Data\n\nrealis2019_selected &lt;- realis2019 %&gt;%\n  select(`Project Name`,\n         `Transacted Price ($)`,\n         `Type of Sale`,\n         `Unit Price ($ psm)`,\n         `Property Type`)\nrealis2019_selected\n\n# A tibble: 19,515 × 5\n   `Project Name`     `Transacted Price ($)` `Type of Sale` `Unit Price ($ psm)`\n   &lt;chr&gt;                               &lt;dbl&gt; &lt;chr&gt;                         &lt;dbl&gt;\n 1 PEIRCE VIEW                        840000 Resale                         7434\n 2 FLORIDA PARK                      3040000 Resale                         9737\n 3 BULLION PARK                       860000 Resale                        11467\n 4 CASTLE GREEN                      1000000 Resale                         9346\n 5 HAPPY ESTATE                      7000000 Resale                        10183\n 6 TEACHER'S HOUSING…                2880000 Resale                        12659\n 7 THE PANORAMA                      1510000 Resale                        16064\n 8 THE PANORAMA                       710000 Resale                        16905\n 9 CHIP THYE GARDEN                  2800000 Resale                        13500\n10 TEACHER'S HOUSING…                2300000 Resale                         9935\n# ℹ 19,505 more rows\n# ℹ 1 more variable: `Property Type` &lt;chr&gt;"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex00.html#filtering-data-using-dplyr-package",
    "href": "Hands-on_Ex/Hands-on_Ex00.html#filtering-data-using-dplyr-package",
    "title": "Hands-on Exercise 00: Working with tidyverse",
    "section": "Filtering Data using dplyr package",
    "text": "Filtering Data using dplyr package\n\nrealis2019_filtered &lt;- realis2019_selected %&gt;%\n  filter (`Property Type` == \"Condominium\" |\n            `Property Type` == \"Apartment\") %&gt;%\n  filter (`Type of Sale` == \"New Sale\") %&gt;%\n  filter (`Unit Price ($ psm)` &lt;= 13000)\n\nrealis2019_filtered\n\n# A tibble: 87 × 5\n   `Project Name`     `Transacted Price ($)` `Type of Sale` `Unit Price ($ psm)`\n   &lt;chr&gt;                               &lt;dbl&gt; &lt;chr&gt;                         &lt;dbl&gt;\n 1 RIVERFRONT RESIDE…                1029000 New Sale                      12863\n 2 RIVERFRONT RESIDE…                 871000 New Sale                      12809\n 3 RIVERFRONT RESIDE…                1940000 New Sale                      12848\n 4 RIVERFRONT RESIDE…                1030000 New Sale                      12875\n 5 RIVERFRONT RESIDE…                2061000 New Sale                      12962\n 6 RIVERFRONT RESIDE…                 762000 New Sale                      12915\n 7 RIVERFRONT RESIDE…                1001000 New Sale                      12513\n 8 RIVERFRONT RESIDE…                1271000 New Sale                      12838\n 9 RIVERFRONT RESIDE…                1310000 New Sale                      12970\n10 RIVERFRONT RESIDE…                1339000 New Sale                      13000\n# ℹ 77 more rows\n# ℹ 1 more variable: `Property Type` &lt;chr&gt;\n\n\n\nPutting all together\n\nrealis2019_end &lt;- realis2019 %&gt;%\n  select(`Project Name`,\n         `Transacted Price ($)`,\n         `Type of Sale`,\n         `Unit Price ($ psm)`,\n         `Property Type`)   %&gt;%\n  filter (`Property Type` == \"Condominium\" |\n            `Property Type` == \"Apartment\") %&gt;%\n  filter (`Type of Sale` == \"New Sale\") %&gt;%\n  filter (`Unit Price ($ psm)` &lt;= 13000)\n\nrealis2019_end\n\n# A tibble: 87 × 5\n   `Project Name`     `Transacted Price ($)` `Type of Sale` `Unit Price ($ psm)`\n   &lt;chr&gt;                               &lt;dbl&gt; &lt;chr&gt;                         &lt;dbl&gt;\n 1 RIVERFRONT RESIDE…                1029000 New Sale                      12863\n 2 RIVERFRONT RESIDE…                 871000 New Sale                      12809\n 3 RIVERFRONT RESIDE…                1940000 New Sale                      12848\n 4 RIVERFRONT RESIDE…                1030000 New Sale                      12875\n 5 RIVERFRONT RESIDE…                2061000 New Sale                      12962\n 6 RIVERFRONT RESIDE…                 762000 New Sale                      12915\n 7 RIVERFRONT RESIDE…                1001000 New Sale                      12513\n 8 RIVERFRONT RESIDE…                1271000 New Sale                      12838\n 9 RIVERFRONT RESIDE…                1310000 New Sale                      12970\n10 RIVERFRONT RESIDE…                1339000 New Sale                      13000\n# ℹ 77 more rows\n# ℹ 1 more variable: `Property Type` &lt;chr&gt;\n\n\n\n\n\n\n\n\nTakeaway\n\n\n\n\necho: controls whether the code is displayed\n\nIf echo = TRUE (default), the code is shown in the rendered document.\nIf echo = FALSE, the code is hidden, but the output or results (if any) are still included.\n\neval: controls whether the code is executed\n\nIf eval = TRUE (default), the code in the chunk is executed, and its results (e.g., output, plots) are included in the document.\nIf eval = FALSE, the code is not executed, and no output or results are included, though the code may still be visible if echo = TRUE.\n\n%&gt;%: used to combine multiple functions together\nChange environmental variables if needed"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex00.html#working-with-dplyr",
    "href": "Hands-on_Ex/Hands-on_Ex00.html#working-with-dplyr",
    "title": "Hands-on Exercise 00: Working with tidyverse",
    "section": "Working with dplyr",
    "text": "Working with dplyr\n\nrealis2019_selected &lt;- realis2019 %&gt;% \n  select(`Project Name`, \n         `Transacted Price ($)`, \n         `Property Type`,\n         `Type of Sale`,\n         `Unit Price ($ psm)`) \nrealis2019_selected\n\n# A tibble: 19,515 × 5\n   `Project Name`          `Transacted Price ($)` `Property Type` `Type of Sale`\n   &lt;chr&gt;                                    &lt;dbl&gt; &lt;chr&gt;           &lt;chr&gt;         \n 1 PEIRCE VIEW                             840000 Condominium     Resale        \n 2 FLORIDA PARK                           3040000 Semi-Detached … Resale        \n 3 BULLION PARK                            860000 Condominium     Resale        \n 4 CASTLE GREEN                           1000000 Condominium     Resale        \n 5 HAPPY ESTATE                           7000000 Semi-Detached … Resale        \n 6 TEACHER'S HOUSING ESTA…                2880000 Terrace House   Resale        \n 7 THE PANORAMA                           1510000 Condominium     Resale        \n 8 THE PANORAMA                            710000 Condominium     Resale        \n 9 CHIP THYE GARDEN                       2800000 Terrace House   Resale        \n10 TEACHER'S HOUSING ESTA…                2300000 Terrace House   Resale        \n# ℹ 19,505 more rows\n# ℹ 1 more variable: `Unit Price ($ psm)` &lt;dbl&gt;"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex00.html#working-with-filter-of-dplyr",
    "href": "Hands-on_Ex/Hands-on_Ex00.html#working-with-filter-of-dplyr",
    "title": "Hands-on-Exercise 00: working with tidyverse",
    "section": "working with filter() of dplyr",
    "text": "working with filter() of dplyr\n\nrealis2019_filtered &lt;- realis2019_selected %&gt;% \n  filter(`Property Type` ==\"Condominium\" | \n           `Property Type`== \"Apartment\") %&gt;% \n  filter(`Type of Sale` == \"New Sale\") %&gt;% \n  filter(`Unit Price ($ psm)` &lt;= 13000)\n\n\nPutting all together\n\nrealis2019_selected &lt;- realis2019 %&gt;% \n  select(`Project Name`, \n         `Transacted Price ($)`, \n         `Type of Sale`,\n         `Unit Price ($ psm)`,\n         `Property Type`) %&gt;% \n  filter(`Property Type` ==\"Condominium\" | \n           `Property Type`== \"Apartment\") %&gt;% \n  filter(`Type of Sale` == \"New Sale\") %&gt;% \n  filter(`Unit Price ($ psm)` &lt;= 13000)"
  },
  {
    "objectID": "index.html#welcome-to-iss608---visual-analytics-and-applications-ay20242025-jan-class",
    "href": "index.html#welcome-to-iss608---visual-analytics-and-applications-ay20242025-jan-class",
    "title": "ISSS608 - Visual Analytics and Applications",
    "section": "Welcome to ISS608 - Visual Analytics and Applications, AY2024/2025 Jan class!",
    "text": "Welcome to ISS608 - Visual Analytics and Applications, AY2024/2025 Jan class!\n\nOverview\nThis page documents my learning journey of creating data visualization beyond default, using R and Tableau.This is part of the ISSS608 course by SMU MITB program, by Prof Kam Tin Seong\nIf you have any feedback or need any clarification, you may contact me at andrea.yeo.2023@mitb.smu.edu.sg\nI hope you enjoy it!\n\n\nLearning journey\nMy journey into programming felt like starring in a drama-comedy series\n- nervously stared at the code like it was ancient hieroglyphs\n- hours of debugging only to realize I missed a semicolon/indentation\n- the code worked (or so I thought).\n- proudly watching my quarto run smoothly… until the next bug sneaked in"
  },
  {
    "objectID": "index.html#find-out-what-i-have-learnt",
    "href": "index.html#find-out-what-i-have-learnt",
    "title": "ISSS608 - Visual Analytics and Applications",
    "section": "Find out what I have learnt",
    "text": "Find out what I have learnt\n\n\n\n\n\n\n\n\nIn-class Exercise\nHands-on Exercise\nTake-home Exercise"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01.html",
    "href": "Hands-on_Ex/Hands-on_Ex01.html",
    "title": "Hands-on Exercise 01",
    "section": "",
    "text": "In this chapter, we will learn the basic principles and key components of ggplot2. we will get hands-on experience using these components to create statistical graphics based on the principles of the Layered Grammar of Graphics. By the end, we will be able to apply ggplot2’s essential graphical elements to create elegant and functional statistical visualizations.\n\n\n\n\n\nThe code chunk below uses p_load() from the pacman package to check if the tidyverse packages are installed on my computer. If they are, they will be loaded into the R environment.If not, we will proceed to install pacman first.\n\npacman::p_load(tidyverse)\n\n\n\n\nWe will import exam_data.csv into R environment by using the read.csv()function and assign it to exam_data\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\", show_col_types = FALSE)\n\nWe will check the dataset using below\n\nglimpse(): provides a transposed overview of a dataset, showing variables and their types in a concise format.\nhead(): displays the first few rows of a dataset (default is 6 rows) to give a quick preview of the data.\nsummary(): generates a statistical summary of each variable, including measures like mean, median, and range for numeric data.\nduplicated():Returns a logical vector indicating which elements or rows in a vector or data frame are duplicates.\ncolSums(is.na()): Counts the number of missing values (NA) in each column of the data frame.\n\n\nglimpse()head()summary()duplicated()colSum(is.na(dataset))\n\n\n\nglimpse(exam_data)\n\nRows: 322\nColumns: 7\n$ ID      &lt;chr&gt; \"Student321\", \"Student305\", \"Student289\", \"Student227\", \"Stude…\n$ CLASS   &lt;chr&gt; \"3I\", \"3I\", \"3H\", \"3F\", \"3I\", \"3I\", \"3I\", \"3I\", \"3I\", \"3H\", \"3…\n$ GENDER  &lt;chr&gt; \"Male\", \"Female\", \"Male\", \"Male\", \"Male\", \"Female\", \"Male\", \"M…\n$ RACE    &lt;chr&gt; \"Malay\", \"Malay\", \"Chinese\", \"Chinese\", \"Malay\", \"Malay\", \"Chi…\n$ ENGLISH &lt;dbl&gt; 21, 24, 26, 27, 27, 31, 31, 31, 33, 34, 34, 36, 36, 36, 37, 38…\n$ MATHS   &lt;dbl&gt; 9, 22, 16, 77, 11, 16, 21, 18, 19, 49, 39, 35, 23, 36, 49, 30,…\n$ SCIENCE &lt;dbl&gt; 15, 16, 16, 31, 25, 16, 25, 27, 15, 37, 42, 22, 32, 36, 35, 45…\n\n\n\n\n\nhead(exam_data)\n\n# A tibble: 6 × 7\n  ID         CLASS GENDER RACE    ENGLISH MATHS SCIENCE\n  &lt;chr&gt;      &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;     &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt;\n1 Student321 3I    Male   Malay        21     9      15\n2 Student305 3I    Female Malay        24    22      16\n3 Student289 3H    Male   Chinese      26    16      16\n4 Student227 3F    Male   Chinese      27    77      31\n5 Student318 3I    Male   Malay        27    11      25\n6 Student306 3I    Female Malay        31    16      16\n\n\n\n\n\nsummary(exam_data)\n\n      ID               CLASS              GENDER              RACE          \n Length:322         Length:322         Length:322         Length:322        \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n    ENGLISH          MATHS          SCIENCE     \n Min.   :21.00   Min.   : 9.00   Min.   :15.00  \n 1st Qu.:59.00   1st Qu.:58.00   1st Qu.:49.25  \n Median :70.00   Median :74.00   Median :65.00  \n Mean   :67.18   Mean   :69.33   Mean   :61.16  \n 3rd Qu.:78.00   3rd Qu.:85.00   3rd Qu.:74.75  \n Max.   :96.00   Max.   :99.00   Max.   :96.00  \n\n\n\n\n\nexam_data[duplicated(exam_data),]\n\n# A tibble: 0 × 7\n# ℹ 7 variables: ID &lt;chr&gt;, CLASS &lt;chr&gt;, GENDER &lt;chr&gt;, RACE &lt;chr&gt;,\n#   ENGLISH &lt;dbl&gt;, MATHS &lt;dbl&gt;, SCIENCE &lt;dbl&gt;\n\n\n\n\n\ncolSums(is.na(exam_data))\n\n     ID   CLASS  GENDER    RACE ENGLISH   MATHS SCIENCE \n      0       0       0       0       0       0       0 \n\n\n\n\n\n\n\n\n\n\n\nReflection\n\n\n\n\nLearnt how to load libraries, import/ read excel files\n\n\n\n\n\n\n\nggplot2 is an R package for creating data-driven graphics based on The Grammar of Graphics. It is also part of the tidyverse family specially designed for visual exploration and communication.\nFor more information, visit ggplot2\n\n\nLets compare how R Graphics, the core graphical functions of Base R and ggplot plot a simple histogram.\n\nR Graphicsggplot2\n\n\n\nhist(exam_data$MATHS,col = \"#4169e1\")\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, aes(x = MATHS)) +\n  geom_histogram(bins=10, \n                 boundary = 100,\n                 color=\"black\", \n                 fill=\"#4169e1\") +\n  ggtitle(\"Distribution of Maths scores\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nReflection\n\n\n\n\nWhile R Graphics offers simpler syntax, Hadley Wickham emphasizes that the true value of ggplot2 lies not in its specific plotting syntax, but in the transformative way it approaches visualization. It enables users to think of visualizations as a method of mapping variables to the visual attributes of geometric objects, creating a powerful framework for understanding and perceiving data.\n\n\n\n\n\n\n\nThe Grammar of Graphics, introduced by Leland Wilkinson in 1999, provides a structured approach to creating meaningful data visualizations. It breaks graphs into semantic components like scales and layers, offering a framework to answer the question: What is a statistical graphic?\nThe key principles I’ve learned are:\n\nGraphics are built from distinct layers of grammatical elements.\nMeaningful plots are achieved through aesthetic mapping.\n\nThis grammar helps me see how complex graphics are composed, uncover connections between seemingly different visuals, and understand the foundation of diverse visualizations. It also guides me toward recognizing well-formed, meaningful graphics while acknowledging that not all grammatically correct visuals will make sense.\n\n\nFigure shows the seven grammars of ggplot2: A layered grammar of graphics\n\n\n\nA layered grammar of graphics\n\n\nThe building blocks of the Grammar of Graphics are:\n\nData: The dataset being visualized.\nAesthetics: Attributes like position, color, size, shape, or transparency that map data to visual elements.\nGeometries: Visual elements representing data, such as points, bars, or lines.\nFacets: Subsets of data used to create multiple variations of a graph (e.g., panels).\nStatistics: Transformations summarizing data, such as means or confidence intervals.\nCoordinate Systems: The plane where data is plotted (e.g., Cartesian or polar).\nThemes: Non-data components like titles, axis labels, or legend formatting.\n\n\n\n\n\nLet us call the ggplot( ) function using the code chunk below.\n\nggplot(data=exam_data)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nA blank canvas is created with ggplot().\nggplot() initializes a ggplot object.\nThe data argument specifies the dataset for plotting.\nIf the dataset is not already a data.frame, it will be converted to one by fortify().\n\n\n\n\n\n\nAesthetic mappings link data attributes to visual characteristics like position, color, size, shape, or transparency, allowing each characteristic to represent information. These mappings are defined using the aes() function, and each geom layer can have its own aes() specification.\nThe code below adds the aesthetic element into the plot.\n\nggplot(data=exam_data,\n       aes(x=MATHS,\n           y=ENGLISH))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nggplot includes the x/y axis and the axis’s label\n\n\n\n\n\n\nGeometric objects are the visual marks on a plot. A layer combines data, aesthetic mappings, a geometric object (geom), statistical transformations (stat), and position adjustments. Layers are typically created using geom_ functions, with options to override default stat or position settings. Every plot requires at least one geom, and additional geoms can be added using the + operator.\nRefer here for a more comprehensive list.\nBelow are some examples of geom_:\n\ngeom_point: for drawing individual points (e.g., a scatter plot)\ngeom_line: for drawing lines (e.g., for a line charts)\ngeom_col: for drawing bars with heights mapped to values in the data (e.g., bar charts).\ngeom_boxplot: for drawing box-and-whisker plots to visualize data distribution and outliers.\ngeom_histogram: for drawing binned values to represent the distribution of a numeric variable (e.g., histograms).\ngeom_density: for drawing smoothed density estimates to visualize the distribution of a numeric variable.\n\n\n\n\nThe code below plots a bar chart by using geom_bar().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()\n\n\n\n\n\n\n\n\n\n\n\nIn a dot plot, the dot width represents the bin width (or maximum width, depending on the binning method), and dots are stacked, with each dot signifying one observation.\nThe code below plots a dot plot chart by using geom_dotplot().\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(dotsize = 0.5)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWarning\n\n\n\nTo note that the y scale is not very useful, and can be misleading in this case.\n\n\nTo enhance the dotplot visualization, the below (non exhaustive) are some arguments that has been added:\n\nscale_y_continuous()- to turn off the y-axis by setting it to NULL\nbinwidth - specifies the width of the bins or interval used to group the data to - 3.0\ndotsize - adjusts the size of the dots in the plot to - 0.8\nfill - specifies the fill color of the dots to - red\ncolor - specifies the outline color of the dots to - yellow\nalpha - specifies the transparency level of the dots to - 0.5\n\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(binwidth=3.0,         \n               dotsize = 0.8,\n               fill=\"#E15841\",\n               color=\"#E1B941\",\n               alpha=0.5 ) +      \n  scale_y_continuous(NULL,           \n                     breaks = NULL)  \n\n\n\n\n\n\n\n\n\n\n\ngeom_histogram()in ggplot creates a bar plot that displays the distribution of a continuous variable by dividing the data into bins and counting the number of observations in each bin.\nThe code below plots a simple histogram by using values in MATHS field of exam_data.\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_histogram()  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe default number of bins is 30, however one can always adjust the number of bins manually by using the bins() argument.\n\n\n\n\n\nTo enhance the histogram visualization, the below (non exhaustive) are some arguments that has been added:\n\nbins - to change the number of bins to - 20\nfill - specifies the fill color of the histogram to - red\ncolor - specifies the outline color of the histogram to - green\n\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20,            \n                 color=\"#A8E141\",      \n                 fill=\"#E15841\")\n\n\n\n\n\n\n\n\n\n\n\nThe code below changes the interior colour of the histogram (i.e. fill) by using a sub-group of aes().\nIn this case, the fill is based on GENDER.\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           fill = GENDER)) +\n  geom_histogram(bins=20, \n                 color=\"grey30\")\n\n\n\n\n\n\n\n\nWe can also specify the color of the fill based on GENDER.\nIn this case, we used the scale_fill_manual() function to assign specific colors to each gender. E.g.:\n\n\nPink for Female\n\n\nBlue for Male\n\nwhile keeping the outline grey\n\n\nggplot(data = exam_data, \n       aes(x = MATHS, \n           fill = GENDER)) +\n  geom_histogram(bins = 20, \n                 color = \"grey30\") +\n  scale_fill_manual(values = c(\"Female\" = \"pink\", \"Male\" = \"blue\"))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThis approach can be used to color, fill and alpha of the geometric.\n\n\n\n\n\nThe geom_density() function computes and visualizes a kernel density estimate, which provides a smooth approximation of the data’s distribution.\nIt serves as a useful alternative to histograms for continuous data, particularly when the data originates from an underlying smooth distribution.\nThe code below plots the distribution of Maths scores in a kernel density plot.\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_density()\n\n\n\n\n\n\n\n\nThe code below plots two kernel density lines by using color or fill arguments of aes()\n\nggplot(data=exam_data, \n       aes(x = MATHS, \n           colour = GENDER)) +\n  geom_density()\n\n\n\n\n\n\n\n\nLikewise, by using scale_color_manual() function, we can map the colors of each gender explicitly, where\n\n\nPink for Female\n\n\nBlue for Male\n\n\n\nggplot(data = exam_data, \n       aes(x = MATHS, \n           colour = GENDER)) +\n  geom_density() +\n  scale_color_manual(values = c(\"Female\" = \"pink\", \"Male\" = \"blue\"))\n\n\n\n\n\n\n\n\n\n\n\ngeom_boxplot() function visualizes continuous data by displaying five key summary statistics: the median, the upper and lower hinges (quartiles), the whiskers, and individual outliers.\n\nggplot(data=exam_data, \n       aes(y = MATHS,       \n           x= GENDER)) +    \n  geom_boxplot()    \n\n\n\n\n\n\n\n\nTo enhance the boxplot visualization, the below (non exhaustive) are some arguments that has been added:\n\nfill - fills the boxplot with different colors based on a grouping variable - purple\ncolor - specifies the color of the boxplot borders to - green\noutlier.color - specifies the outlier color of the boxplot to - red\noutlier.shape - specifies the shape of the outlier points to - 16\nalpha - adjust the transparency of the boxplot fill - 0.7\nwidth - adjusts the width of the boxplots to - 0.7\n\n\nggplot(data = exam_data, \n       aes(y = MATHS,       \n           x = GENDER)) +    \n  geom_boxplot(fill = \"#6A5ACD\",      # Fills the boxes with a color\n               color = \"#ABE141\",     # Sets the border color of the boxes\n               outlier.color = \"red\",  # Colors the outliers\n               outlier.shape = 16,     # Sets the shape of the outliers\n               alpha = 0.7,            # Adjusts the transparency of the boxes\n               width = 0.7)            # Sets the width of the boxes\n\n\n\n\n\n\n\n\nLikewise, to specify different fill colors for female and male, we need to map the fill aesthetic to the Gender variable inside aes() and then define the specifc colors using scale_fill_manual().\n\n\nPink for Female\n\n\nBlue for Male\n\n\n\nggplot(data = exam_data, \n       aes(y = MATHS,       \n           x = GENDER, \n           fill = GENDER)) +   # Map fill aesthetic to GENDER\n  geom_boxplot(color = \"#ABE141\",      # Sets the border color of the boxes\n               outlier.color = \"red\",  # Colors the outliers\n               outlier.shape = 16,     # Sets the shape of the outliers\n               alpha = 0.7,            # Adjusts the transparency of the boxes\n               width = 0.7) +          # Sets the width of the boxes\n  scale_fill_manual(values = c(\"Female\" = \"pink\", \"Male\" = \"blue\"))  # Custom colors\n\n\n\n\n\n\n\n\nNotches in box plots help visually determine if the medians of distributions differ. Non-overlapping notches indicate distinct medians.\nThe code below plots the distribution of Maths scores by gender in notched plot instead of boxplot.\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot(notch=TRUE)\n\n\n\n\n\n\n\n\nLikewise, additional arguments can be added to improve the overall visualization of the notched plot\n\nfill - fills the notched plot with different colors based on a grouping variable\ncolor - specifies the color of the notched plot borders to - black\noutlier.color - specifies the outlier color of the boxplot to - red\noutlier.shape - specifies the shape of the outlier points to - 8\nalpha - adjust the transparency of the boxplot fill - 0.9\nnotchwidth - adjusts the width of the notches for improved clarity - 0.5\n\n\nggplot(data = exam_data, \n       aes(y = MATHS, \n           x = GENDER, \n           fill = GENDER)) +  # Add fill to differentiate genders\n  geom_boxplot(notch = TRUE, \n               outlier.colour = \"red\",   # Highlight outliers in red\n               outlier.shape = 8,       # Use a different shape for outliers\n               notchwidth = 0.5,        # Adjust the notch width for emphasis\n               color = \"black\",\n               alpha = 0.9) +      \n  scale_fill_manual(values = c(\"Female\" = \"pink\", \"Male\" = \"blue\"))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nTo refer to here for ggplot point shapes best tips and tricks\n\n\n\n\n\ngeom_violin creates violin plots, which are useful for comparing multiple data distributions. Unlike density curves, which can overlap and become hard to interpret, violin plots place distributions side by side, making comparisons clearer and more visually accessible.\nThe code below plots the distribution of Maths score by gender using violin plots.\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_violin()\n\n\n\n\n\n\n\n\nLikewise, additional arguments can be added to improve the overall visualization of the violin plot\n\nfill - maps the violin fill color to gender\nscale_fill_manual() - assigns custom colors for Female and Male\ntrim - ensures the plot displayes the full range of data, even for smaller distributions\ncolor - adds an outline to make the violins visually distinct\n\n\nggplot(data = exam_data, \n       aes(y = MATHS, \n           x = GENDER, \n           fill = GENDER)) +  # Map fill to GENDER\n  geom_violin(trim = FALSE,   # Show the full range of the data\n              scale = \"width\", # Adjust width for comparability\n              color = \"black\") +  # Add a black outline to the violins\n  scale_fill_manual(values = c(\"Female\" = \"pink\", \n                               \"Male\" = \"blue\"))\n\n\n\n\n\n\n\n\n\n\n\ngeom_point() is useful for creating scatterplot.\nThe code below plots a scatterplot showing the Maths and English grades of pupils by using geom_point()\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() \n\n\n\n\n\n\n\n\nLikewise, additional arguments can be added to improve the overall visualization of the scatter plot\n\ncolor - set all points to a fixed blue color\nsize - set the size of the points to a fixed value (adjustable) to - 3\nalpha - adds transparency to reduce overlap if points are cluttered\nshape - set the apperance of the points in the scatter plot (e.g.: square, circle, triangle)\n\n\nggplot(data = exam_data, \n       aes(x = MATHS, \n           y = ENGLISH)) +\n  geom_point(color = \"blue\", size = 3, alpha = 0.5, shape = 20)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nTo refer to here for ggplot point shapes best tips and tricks\n\n\n\n\n\nThe code below plots the data points on the boxplots by using both geom_boxplot() and geom_point().\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot() +                    \n  geom_point(position=\"jitter\", \n             size = 0.5)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nReflection\n\n\n\n\nLearnt about the different geometric objects such as geom_bar,geom_dotplot,geom_histogram,geom_density, geom_boxplot,geom_violin,geom_point etc.\nLearnt about how to combine different geometric objects together in one chart - e.g.: geom_boxplot and geom_point\n\n\n\n\n\n\n\nThe Statistics functions statistically transforms data, as a form of summary.\nExample include: - calculating the frequency of variable values - calculating the mean - determing confidence limits\nThere are two ways to use these functions: - add a stat_() function and override the default geom, or - add a geom_() function and override the default stat.\n\n\nThe boxplots below are incomplete because the means are not shown.\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot()\n\n\n\n\n\n\n\n\n\n\n\nThe code below uses the stat_summary() function to add mean values by replacing the default geometric layer (geom).\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  stat_summary(geom = \"point\",       \n               fun = \"mean\",         \n               colour =\"blue\",        \n               size=4) \n\n\n\n\n\n\n\n\n\n\n\nThe code below uses the geom() function to add mean values by replacing the default geometric layer (geom).\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  geom_point(stat=\"summary\",        \n             fun=\"mean\",           \n             colour=\"blue\",          \n             size=4)          \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nReflection\n\n\n\n\nBoth codes achieve the same result - boxplot with mean values as blue points overlaid on the plot\nThe first code uses stat_summary explicitly where summary is calculated fun = \"mean\", and then visualized using the geometry geom=\"point\". It provides more flexibility if one want to switch the geometry.\nThe second code uses geom_point with stat=\"summary\", where it computes the mean and plots it directly.\nOverall, I would prefer the second code as it feel more intuitive and focuses on using a geometry geom_point and overridding its default statistical transformation.\n\n\n\n\n\n\nThe scatterplot below illustrates the relationship between Maths and English grades.\nAdding a best-fit curve can enhance its interpretability.\n\necho=FALSE\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() \n\n\n\n\n\n\n\n\ngeom_smooth() is used to plot a best fit curve on the scatterplot.\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(size=0.5)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe default method used is LOESS - Locally Estimted Scatterplot Smoothing which refers to a regression method used for smoothing data points in a scatterplot, useful for capturing non-linear trends in the data.\n\n\nThe default method can be overriden as shown below:\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              linewidth=0.5)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nIn this case, method = \"lm\" specifies that a linear regression line should be fitted to the data.\nRefer here for more information on the different methods available in geom_smooth().\n\n\nLikewise, additional arguments can be added to improve the overall visualization of the scatter plot\n\ncolor - sets the color of the regression line\nsize - adjusts the thickness of the line\n\n\nggplot(data = exam_data, \n       aes(x = MATHS, y = ENGLISH)) +\n  geom_point() +\n  geom_smooth(method = \"lm\", color = \"red\", size = 1)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nReflection\n\n\n\n\nLearnt the two ways to add statistical functions to ggplot2 - stat_() and geom_()\nLearnt how to incorporate a best fit curve on to the scatterplot geom_smooth()\nLearnt the different regression methods available ingeom_smooth()\n\n\n\n\n\n\n\nFacetting in ggplot2 creates small multiples, or trellis plots, to display different subsets of data. This approach is an alternative to using aesthetics (such as color or shape) for displaying additional variables. There are two main types of faceting in ggplot2:\n\nfacet_wrap() : wraps multiple plots into a single panel, typically based on a single categorical variable. It will automatically arranges the plots into a grid.\nfacet_grid() : organizes plots into a grid based on the values of two categorical variables, one for rows and the other for columns.\n\n\n\nfacet_wrap arranges a 1D sequence of panels into a 2D layout, making better use of screen space, especially on rectangular displays. It is often more efficient than facet_grid() for displaying a variable across multiple categories\nThe code below produces a 2D matrix of ‘MATHS’ histograms grouped by variable ‘CLASS’ using facet_wrap(~CLASS).\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_wrap(~ CLASS)\n\n\n\n\n\n\n\n\n\n\n\nfacet_grid creates a matrix of panels based on two discrete variables, one for rows and the other for columns. It is most useful when both variables have all possible combinations in the data.\nThe code below plots a trellis plot using facet_grid().\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_grid(~ CLASS)\n\n\n\n\n\n\n\n\n\n\n\n\nThe Coordinates functions map the position of objects onto the plane of the plot.\nThere are a number of different possible coordinate systems to use:\n\ncoord_cartesian(): the default cartesian coordinate systems, where you specify x and y values (e.g. allows you to zoom in or out).\ncoord_flip(): a cartesian system with the x and y flipped.\ncoord_fixed(): a cartesian system with a “fixed” aspect ratio (e.g. 1.78 for a “widescreen” plot).\ncoord_quickmap(): a coordinate system that approximates a good aspect ratio for maps.\n\n\n\nBy default the bar charts in ggplot2 are vertical, as shown:\n\n\n\n\n\n\n\n\n\nUsing coord_flip(), we can flip the vertical bar chart to a horizontal one.\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip()\n\n\n\n\n\n\n\n\n\n\n\nThe scatterplot below is misleading as the x and y axes are not equal. This can create confusion to the readers.\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, size=0.5)\n\n\n\n\n\n\n\n\nThe code below will set both the x and y axis range to 0-100.\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\n\n\n\n\n\n\n\n\n\n\n\nThemes control elements of the graph which are not related to the data such as\n\nbackground color\nfonts size\ngridlines\nlabels color\n\nSome of the Built-in themes include:\n\ntheme_gray(): default theme, with a light gray background and white gridlines.\ntheme_bw(): theme with a black-and-white color scheme - white background, black gridlines and axis lines\ntheme_classic(): theme with a minimalist look - white background and no gridlines\n\nThe list of all other themes available can be found at this link\n\n\nThe code below plot a horizontal bar chart using theme_gray()\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_gray()\n\n\n\n\n\n\n\n\nThe code below plot a horizontal bar chart using theme_bw()\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_bw()\n\n\n\n\n\n\n\n\nThe code below plot a horizontal bar chart using theme_classic()\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_classic()\n\n\n\n\n\n\n\n\nWe can further customize the chart by additional arguments using theme().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar(fill=\"skyblue\", color=\"black\", size=0.7) +  \n  coord_flip() +\n  theme_minimal() +\n   theme(panel.background = element_rect(fill = \"lightgrey\",\n                                         color = \"white\"))\n\n\n\n\n\n\n\n\n\n\n\n\n\nKam, T.S. (2023).A Layered Grammar of Graphics: ggplot2 methods.\nHadley Wickham (2023) ggplot2: Elegant Graphics for Data Analysis.Online 3rd edition.\nWinston Chang (2013) R Graphics Cookbook 2nd edition. Online version.\nHealy, Kieran (2019) Data Visualization: A practical introduction. Online version\nLearning ggplot2 on Paper – Components\nLearning ggplot2 on Paper – Layer\nLearning ggplot2 on Paper – Scale\n\n\n\n\nQuarto_overall_guide\nQuarto_markdown_basic\nQuarto_interactive_layout\n\n\n\n\n\n\n\n\n\n\n\nTakeaway\n\n\n\n\nUnderstand the foundational principles of ggplot2 for creating graphics.\nLearn to set up the environment by installing necessary R packages. E.g.: library(ggplot2)\nUnderstand the concept of aesthetic mappings and geometric objects.\nExplore how to layer different elements like stats, facets, and coordinates.\nLearnt the importance of various themes in customizing the appearance of plots.\nApply practical examples to reinforce the concepts and improve visual analytics skills.\necho=FALSE: Hides the code while executing it to display the plot in the final output"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01.html#a-layered-grammar-of-graphics-ggplot2-methods",
    "href": "Hands-on_Ex/Hands-on_Ex01.html#a-layered-grammar-of-graphics-ggplot2-methods",
    "title": "Hands-on Exercise 01",
    "section": "",
    "text": "In this chapter, we will learn the basic principles and key components of ggplot2. we will get hands-on experience using these components to create statistical graphics based on the principles of the Layered Grammar of Graphics. By the end, we will be able to apply ggplot2’s essential graphical elements to create elegant and functional statistical visualizations.\n\n\n\n\n\nThe code chunk below uses p_load() from the pacman package to check if the tidyverse packages are installed on my computer. If they are, they will be loaded into the R environment.If not, we will proceed to install pacman first.\n\npacman::p_load(tidyverse)\n\n\n\n\nWe will import exam_data.csv into R environment by using the read.csv()function and assign it to exam_data\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\", show_col_types = FALSE)\n\nWe will check the dataset using below\n\nglimpse(): provides a transposed overview of a dataset, showing variables and their types in a concise format.\nhead(): displays the first few rows of a dataset (default is 6 rows) to give a quick preview of the data.\nsummary(): generates a statistical summary of each variable, including measures like mean, median, and range for numeric data.\nduplicated():Returns a logical vector indicating which elements or rows in a vector or data frame are duplicates.\ncolSums(is.na()): Counts the number of missing values (NA) in each column of the data frame.\n\n\nglimpse()head()summary()duplicated()colSum(is.na(dataset))\n\n\n\nglimpse(exam_data)\n\nRows: 322\nColumns: 7\n$ ID      &lt;chr&gt; \"Student321\", \"Student305\", \"Student289\", \"Student227\", \"Stude…\n$ CLASS   &lt;chr&gt; \"3I\", \"3I\", \"3H\", \"3F\", \"3I\", \"3I\", \"3I\", \"3I\", \"3I\", \"3H\", \"3…\n$ GENDER  &lt;chr&gt; \"Male\", \"Female\", \"Male\", \"Male\", \"Male\", \"Female\", \"Male\", \"M…\n$ RACE    &lt;chr&gt; \"Malay\", \"Malay\", \"Chinese\", \"Chinese\", \"Malay\", \"Malay\", \"Chi…\n$ ENGLISH &lt;dbl&gt; 21, 24, 26, 27, 27, 31, 31, 31, 33, 34, 34, 36, 36, 36, 37, 38…\n$ MATHS   &lt;dbl&gt; 9, 22, 16, 77, 11, 16, 21, 18, 19, 49, 39, 35, 23, 36, 49, 30,…\n$ SCIENCE &lt;dbl&gt; 15, 16, 16, 31, 25, 16, 25, 27, 15, 37, 42, 22, 32, 36, 35, 45…\n\n\n\n\n\nhead(exam_data)\n\n# A tibble: 6 × 7\n  ID         CLASS GENDER RACE    ENGLISH MATHS SCIENCE\n  &lt;chr&gt;      &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;     &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt;\n1 Student321 3I    Male   Malay        21     9      15\n2 Student305 3I    Female Malay        24    22      16\n3 Student289 3H    Male   Chinese      26    16      16\n4 Student227 3F    Male   Chinese      27    77      31\n5 Student318 3I    Male   Malay        27    11      25\n6 Student306 3I    Female Malay        31    16      16\n\n\n\n\n\nsummary(exam_data)\n\n      ID               CLASS              GENDER              RACE          \n Length:322         Length:322         Length:322         Length:322        \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n    ENGLISH          MATHS          SCIENCE     \n Min.   :21.00   Min.   : 9.00   Min.   :15.00  \n 1st Qu.:59.00   1st Qu.:58.00   1st Qu.:49.25  \n Median :70.00   Median :74.00   Median :65.00  \n Mean   :67.18   Mean   :69.33   Mean   :61.16  \n 3rd Qu.:78.00   3rd Qu.:85.00   3rd Qu.:74.75  \n Max.   :96.00   Max.   :99.00   Max.   :96.00  \n\n\n\n\n\nexam_data[duplicated(exam_data),]\n\n# A tibble: 0 × 7\n# ℹ 7 variables: ID &lt;chr&gt;, CLASS &lt;chr&gt;, GENDER &lt;chr&gt;, RACE &lt;chr&gt;,\n#   ENGLISH &lt;dbl&gt;, MATHS &lt;dbl&gt;, SCIENCE &lt;dbl&gt;\n\n\n\n\n\ncolSums(is.na(exam_data))\n\n     ID   CLASS  GENDER    RACE ENGLISH   MATHS SCIENCE \n      0       0       0       0       0       0       0 \n\n\n\n\n\n\n\n\n\n\n\nReflection\n\n\n\n\nLearnt how to load libraries, import/ read excel files\n\n\n\n\n\n\n\nggplot2 is an R package for creating data-driven graphics based on The Grammar of Graphics. It is also part of the tidyverse family specially designed for visual exploration and communication.\nFor more information, visit ggplot2\n\n\nLets compare how R Graphics, the core graphical functions of Base R and ggplot plot a simple histogram.\n\nR Graphicsggplot2\n\n\n\nhist(exam_data$MATHS,col = \"#4169e1\")\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, aes(x = MATHS)) +\n  geom_histogram(bins=10, \n                 boundary = 100,\n                 color=\"black\", \n                 fill=\"#4169e1\") +\n  ggtitle(\"Distribution of Maths scores\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nReflection\n\n\n\n\nWhile R Graphics offers simpler syntax, Hadley Wickham emphasizes that the true value of ggplot2 lies not in its specific plotting syntax, but in the transformative way it approaches visualization. It enables users to think of visualizations as a method of mapping variables to the visual attributes of geometric objects, creating a powerful framework for understanding and perceiving data.\n\n\n\n\n\n\n\nThe Grammar of Graphics, introduced by Leland Wilkinson in 1999, provides a structured approach to creating meaningful data visualizations. It breaks graphs into semantic components like scales and layers, offering a framework to answer the question: What is a statistical graphic?\nThe key principles I’ve learned are:\n\nGraphics are built from distinct layers of grammatical elements.\nMeaningful plots are achieved through aesthetic mapping.\n\nThis grammar helps me see how complex graphics are composed, uncover connections between seemingly different visuals, and understand the foundation of diverse visualizations. It also guides me toward recognizing well-formed, meaningful graphics while acknowledging that not all grammatically correct visuals will make sense.\n\n\nFigure shows the seven grammars of ggplot2: A layered grammar of graphics\n\n\n\nA layered grammar of graphics\n\n\nThe building blocks of the Grammar of Graphics are:\n\nData: The dataset being visualized.\nAesthetics: Attributes like position, color, size, shape, or transparency that map data to visual elements.\nGeometries: Visual elements representing data, such as points, bars, or lines.\nFacets: Subsets of data used to create multiple variations of a graph (e.g., panels).\nStatistics: Transformations summarizing data, such as means or confidence intervals.\nCoordinate Systems: The plane where data is plotted (e.g., Cartesian or polar).\nThemes: Non-data components like titles, axis labels, or legend formatting.\n\n\n\n\n\nLet us call the ggplot( ) function using the code chunk below.\n\nggplot(data=exam_data)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nA blank canvas is created with ggplot().\nggplot() initializes a ggplot object.\nThe data argument specifies the dataset for plotting.\nIf the dataset is not already a data.frame, it will be converted to one by fortify().\n\n\n\n\n\n\nAesthetic mappings link data attributes to visual characteristics like position, color, size, shape, or transparency, allowing each characteristic to represent information. These mappings are defined using the aes() function, and each geom layer can have its own aes() specification.\nThe code below adds the aesthetic element into the plot.\n\nggplot(data=exam_data,\n       aes(x=MATHS,\n           y=ENGLISH))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nggplot includes the x/y axis and the axis’s label\n\n\n\n\n\n\nGeometric objects are the visual marks on a plot. A layer combines data, aesthetic mappings, a geometric object (geom), statistical transformations (stat), and position adjustments. Layers are typically created using geom_ functions, with options to override default stat or position settings. Every plot requires at least one geom, and additional geoms can be added using the + operator.\nRefer here for a more comprehensive list.\nBelow are some examples of geom_:\n\ngeom_point: for drawing individual points (e.g., a scatter plot)\ngeom_line: for drawing lines (e.g., for a line charts)\ngeom_col: for drawing bars with heights mapped to values in the data (e.g., bar charts).\ngeom_boxplot: for drawing box-and-whisker plots to visualize data distribution and outliers.\ngeom_histogram: for drawing binned values to represent the distribution of a numeric variable (e.g., histograms).\ngeom_density: for drawing smoothed density estimates to visualize the distribution of a numeric variable.\n\n\n\n\nThe code below plots a bar chart by using geom_bar().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()\n\n\n\n\n\n\n\n\n\n\n\nIn a dot plot, the dot width represents the bin width (or maximum width, depending on the binning method), and dots are stacked, with each dot signifying one observation.\nThe code below plots a dot plot chart by using geom_dotplot().\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(dotsize = 0.5)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWarning\n\n\n\nTo note that the y scale is not very useful, and can be misleading in this case.\n\n\nTo enhance the dotplot visualization, the below (non exhaustive) are some arguments that has been added:\n\nscale_y_continuous()- to turn off the y-axis by setting it to NULL\nbinwidth - specifies the width of the bins or interval used to group the data to - 3.0\ndotsize - adjusts the size of the dots in the plot to - 0.8\nfill - specifies the fill color of the dots to - red\ncolor - specifies the outline color of the dots to - yellow\nalpha - specifies the transparency level of the dots to - 0.5\n\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(binwidth=3.0,         \n               dotsize = 0.8,\n               fill=\"#E15841\",\n               color=\"#E1B941\",\n               alpha=0.5 ) +      \n  scale_y_continuous(NULL,           \n                     breaks = NULL)  \n\n\n\n\n\n\n\n\n\n\n\ngeom_histogram()in ggplot creates a bar plot that displays the distribution of a continuous variable by dividing the data into bins and counting the number of observations in each bin.\nThe code below plots a simple histogram by using values in MATHS field of exam_data.\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_histogram()  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe default number of bins is 30, however one can always adjust the number of bins manually by using the bins() argument.\n\n\n\n\n\nTo enhance the histogram visualization, the below (non exhaustive) are some arguments that has been added:\n\nbins - to change the number of bins to - 20\nfill - specifies the fill color of the histogram to - red\ncolor - specifies the outline color of the histogram to - green\n\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20,            \n                 color=\"#A8E141\",      \n                 fill=\"#E15841\")\n\n\n\n\n\n\n\n\n\n\n\nThe code below changes the interior colour of the histogram (i.e. fill) by using a sub-group of aes().\nIn this case, the fill is based on GENDER.\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           fill = GENDER)) +\n  geom_histogram(bins=20, \n                 color=\"grey30\")\n\n\n\n\n\n\n\n\nWe can also specify the color of the fill based on GENDER.\nIn this case, we used the scale_fill_manual() function to assign specific colors to each gender. E.g.:\n\n\nPink for Female\n\n\nBlue for Male\n\nwhile keeping the outline grey\n\n\nggplot(data = exam_data, \n       aes(x = MATHS, \n           fill = GENDER)) +\n  geom_histogram(bins = 20, \n                 color = \"grey30\") +\n  scale_fill_manual(values = c(\"Female\" = \"pink\", \"Male\" = \"blue\"))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThis approach can be used to color, fill and alpha of the geometric.\n\n\n\n\n\nThe geom_density() function computes and visualizes a kernel density estimate, which provides a smooth approximation of the data’s distribution.\nIt serves as a useful alternative to histograms for continuous data, particularly when the data originates from an underlying smooth distribution.\nThe code below plots the distribution of Maths scores in a kernel density plot.\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_density()\n\n\n\n\n\n\n\n\nThe code below plots two kernel density lines by using color or fill arguments of aes()\n\nggplot(data=exam_data, \n       aes(x = MATHS, \n           colour = GENDER)) +\n  geom_density()\n\n\n\n\n\n\n\n\nLikewise, by using scale_color_manual() function, we can map the colors of each gender explicitly, where\n\n\nPink for Female\n\n\nBlue for Male\n\n\n\nggplot(data = exam_data, \n       aes(x = MATHS, \n           colour = GENDER)) +\n  geom_density() +\n  scale_color_manual(values = c(\"Female\" = \"pink\", \"Male\" = \"blue\"))\n\n\n\n\n\n\n\n\n\n\n\ngeom_boxplot() function visualizes continuous data by displaying five key summary statistics: the median, the upper and lower hinges (quartiles), the whiskers, and individual outliers.\n\nggplot(data=exam_data, \n       aes(y = MATHS,       \n           x= GENDER)) +    \n  geom_boxplot()    \n\n\n\n\n\n\n\n\nTo enhance the boxplot visualization, the below (non exhaustive) are some arguments that has been added:\n\nfill - fills the boxplot with different colors based on a grouping variable - purple\ncolor - specifies the color of the boxplot borders to - green\noutlier.color - specifies the outlier color of the boxplot to - red\noutlier.shape - specifies the shape of the outlier points to - 16\nalpha - adjust the transparency of the boxplot fill - 0.7\nwidth - adjusts the width of the boxplots to - 0.7\n\n\nggplot(data = exam_data, \n       aes(y = MATHS,       \n           x = GENDER)) +    \n  geom_boxplot(fill = \"#6A5ACD\",      # Fills the boxes with a color\n               color = \"#ABE141\",     # Sets the border color of the boxes\n               outlier.color = \"red\",  # Colors the outliers\n               outlier.shape = 16,     # Sets the shape of the outliers\n               alpha = 0.7,            # Adjusts the transparency of the boxes\n               width = 0.7)            # Sets the width of the boxes\n\n\n\n\n\n\n\n\nLikewise, to specify different fill colors for female and male, we need to map the fill aesthetic to the Gender variable inside aes() and then define the specifc colors using scale_fill_manual().\n\n\nPink for Female\n\n\nBlue for Male\n\n\n\nggplot(data = exam_data, \n       aes(y = MATHS,       \n           x = GENDER, \n           fill = GENDER)) +   # Map fill aesthetic to GENDER\n  geom_boxplot(color = \"#ABE141\",      # Sets the border color of the boxes\n               outlier.color = \"red\",  # Colors the outliers\n               outlier.shape = 16,     # Sets the shape of the outliers\n               alpha = 0.7,            # Adjusts the transparency of the boxes\n               width = 0.7) +          # Sets the width of the boxes\n  scale_fill_manual(values = c(\"Female\" = \"pink\", \"Male\" = \"blue\"))  # Custom colors\n\n\n\n\n\n\n\n\nNotches in box plots help visually determine if the medians of distributions differ. Non-overlapping notches indicate distinct medians.\nThe code below plots the distribution of Maths scores by gender in notched plot instead of boxplot.\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot(notch=TRUE)\n\n\n\n\n\n\n\n\nLikewise, additional arguments can be added to improve the overall visualization of the notched plot\n\nfill - fills the notched plot with different colors based on a grouping variable\ncolor - specifies the color of the notched plot borders to - black\noutlier.color - specifies the outlier color of the boxplot to - red\noutlier.shape - specifies the shape of the outlier points to - 8\nalpha - adjust the transparency of the boxplot fill - 0.9\nnotchwidth - adjusts the width of the notches for improved clarity - 0.5\n\n\nggplot(data = exam_data, \n       aes(y = MATHS, \n           x = GENDER, \n           fill = GENDER)) +  # Add fill to differentiate genders\n  geom_boxplot(notch = TRUE, \n               outlier.colour = \"red\",   # Highlight outliers in red\n               outlier.shape = 8,       # Use a different shape for outliers\n               notchwidth = 0.5,        # Adjust the notch width for emphasis\n               color = \"black\",\n               alpha = 0.9) +      \n  scale_fill_manual(values = c(\"Female\" = \"pink\", \"Male\" = \"blue\"))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nTo refer to here for ggplot point shapes best tips and tricks\n\n\n\n\n\ngeom_violin creates violin plots, which are useful for comparing multiple data distributions. Unlike density curves, which can overlap and become hard to interpret, violin plots place distributions side by side, making comparisons clearer and more visually accessible.\nThe code below plots the distribution of Maths score by gender using violin plots.\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_violin()\n\n\n\n\n\n\n\n\nLikewise, additional arguments can be added to improve the overall visualization of the violin plot\n\nfill - maps the violin fill color to gender\nscale_fill_manual() - assigns custom colors for Female and Male\ntrim - ensures the plot displayes the full range of data, even for smaller distributions\ncolor - adds an outline to make the violins visually distinct\n\n\nggplot(data = exam_data, \n       aes(y = MATHS, \n           x = GENDER, \n           fill = GENDER)) +  # Map fill to GENDER\n  geom_violin(trim = FALSE,   # Show the full range of the data\n              scale = \"width\", # Adjust width for comparability\n              color = \"black\") +  # Add a black outline to the violins\n  scale_fill_manual(values = c(\"Female\" = \"pink\", \n                               \"Male\" = \"blue\"))\n\n\n\n\n\n\n\n\n\n\n\ngeom_point() is useful for creating scatterplot.\nThe code below plots a scatterplot showing the Maths and English grades of pupils by using geom_point()\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() \n\n\n\n\n\n\n\n\nLikewise, additional arguments can be added to improve the overall visualization of the scatter plot\n\ncolor - set all points to a fixed blue color\nsize - set the size of the points to a fixed value (adjustable) to - 3\nalpha - adds transparency to reduce overlap if points are cluttered\nshape - set the apperance of the points in the scatter plot (e.g.: square, circle, triangle)\n\n\nggplot(data = exam_data, \n       aes(x = MATHS, \n           y = ENGLISH)) +\n  geom_point(color = \"blue\", size = 3, alpha = 0.5, shape = 20)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nTo refer to here for ggplot point shapes best tips and tricks\n\n\n\n\n\nThe code below plots the data points on the boxplots by using both geom_boxplot() and geom_point().\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot() +                    \n  geom_point(position=\"jitter\", \n             size = 0.5)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nReflection\n\n\n\n\nLearnt about the different geometric objects such as geom_bar,geom_dotplot,geom_histogram,geom_density, geom_boxplot,geom_violin,geom_point etc.\nLearnt about how to combine different geometric objects together in one chart - e.g.: geom_boxplot and geom_point\n\n\n\n\n\n\n\nThe Statistics functions statistically transforms data, as a form of summary.\nExample include: - calculating the frequency of variable values - calculating the mean - determing confidence limits\nThere are two ways to use these functions: - add a stat_() function and override the default geom, or - add a geom_() function and override the default stat.\n\n\nThe boxplots below are incomplete because the means are not shown.\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot()\n\n\n\n\n\n\n\n\n\n\n\nThe code below uses the stat_summary() function to add mean values by replacing the default geometric layer (geom).\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  stat_summary(geom = \"point\",       \n               fun = \"mean\",         \n               colour =\"blue\",        \n               size=4) \n\n\n\n\n\n\n\n\n\n\n\nThe code below uses the geom() function to add mean values by replacing the default geometric layer (geom).\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  geom_point(stat=\"summary\",        \n             fun=\"mean\",           \n             colour=\"blue\",          \n             size=4)          \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nReflection\n\n\n\n\nBoth codes achieve the same result - boxplot with mean values as blue points overlaid on the plot\nThe first code uses stat_summary explicitly where summary is calculated fun = \"mean\", and then visualized using the geometry geom=\"point\". It provides more flexibility if one want to switch the geometry.\nThe second code uses geom_point with stat=\"summary\", where it computes the mean and plots it directly.\nOverall, I would prefer the second code as it feel more intuitive and focuses on using a geometry geom_point and overridding its default statistical transformation.\n\n\n\n\n\n\nThe scatterplot below illustrates the relationship between Maths and English grades.\nAdding a best-fit curve can enhance its interpretability.\n\necho=FALSE\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() \n\n\n\n\n\n\n\n\ngeom_smooth() is used to plot a best fit curve on the scatterplot.\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(size=0.5)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe default method used is LOESS - Locally Estimted Scatterplot Smoothing which refers to a regression method used for smoothing data points in a scatterplot, useful for capturing non-linear trends in the data.\n\n\nThe default method can be overriden as shown below:\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              linewidth=0.5)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nIn this case, method = \"lm\" specifies that a linear regression line should be fitted to the data.\nRefer here for more information on the different methods available in geom_smooth().\n\n\nLikewise, additional arguments can be added to improve the overall visualization of the scatter plot\n\ncolor - sets the color of the regression line\nsize - adjusts the thickness of the line\n\n\nggplot(data = exam_data, \n       aes(x = MATHS, y = ENGLISH)) +\n  geom_point() +\n  geom_smooth(method = \"lm\", color = \"red\", size = 1)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nReflection\n\n\n\n\nLearnt the two ways to add statistical functions to ggplot2 - stat_() and geom_()\nLearnt how to incorporate a best fit curve on to the scatterplot geom_smooth()\nLearnt the different regression methods available ingeom_smooth()\n\n\n\n\n\n\n\nFacetting in ggplot2 creates small multiples, or trellis plots, to display different subsets of data. This approach is an alternative to using aesthetics (such as color or shape) for displaying additional variables. There are two main types of faceting in ggplot2:\n\nfacet_wrap() : wraps multiple plots into a single panel, typically based on a single categorical variable. It will automatically arranges the plots into a grid.\nfacet_grid() : organizes plots into a grid based on the values of two categorical variables, one for rows and the other for columns.\n\n\n\nfacet_wrap arranges a 1D sequence of panels into a 2D layout, making better use of screen space, especially on rectangular displays. It is often more efficient than facet_grid() for displaying a variable across multiple categories\nThe code below produces a 2D matrix of ‘MATHS’ histograms grouped by variable ‘CLASS’ using facet_wrap(~CLASS).\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_wrap(~ CLASS)\n\n\n\n\n\n\n\n\n\n\n\nfacet_grid creates a matrix of panels based on two discrete variables, one for rows and the other for columns. It is most useful when both variables have all possible combinations in the data.\nThe code below plots a trellis plot using facet_grid().\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_grid(~ CLASS)\n\n\n\n\n\n\n\n\n\n\n\n\nThe Coordinates functions map the position of objects onto the plane of the plot.\nThere are a number of different possible coordinate systems to use:\n\ncoord_cartesian(): the default cartesian coordinate systems, where you specify x and y values (e.g. allows you to zoom in or out).\ncoord_flip(): a cartesian system with the x and y flipped.\ncoord_fixed(): a cartesian system with a “fixed” aspect ratio (e.g. 1.78 for a “widescreen” plot).\ncoord_quickmap(): a coordinate system that approximates a good aspect ratio for maps.\n\n\n\nBy default the bar charts in ggplot2 are vertical, as shown:\n\n\n\n\n\n\n\n\n\nUsing coord_flip(), we can flip the vertical bar chart to a horizontal one.\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip()\n\n\n\n\n\n\n\n\n\n\n\nThe scatterplot below is misleading as the x and y axes are not equal. This can create confusion to the readers.\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, size=0.5)\n\n\n\n\n\n\n\n\nThe code below will set both the x and y axis range to 0-100.\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\n\n\n\n\n\n\n\n\n\n\n\nThemes control elements of the graph which are not related to the data such as\n\nbackground color\nfonts size\ngridlines\nlabels color\n\nSome of the Built-in themes include:\n\ntheme_gray(): default theme, with a light gray background and white gridlines.\ntheme_bw(): theme with a black-and-white color scheme - white background, black gridlines and axis lines\ntheme_classic(): theme with a minimalist look - white background and no gridlines\n\nThe list of all other themes available can be found at this link\n\n\nThe code below plot a horizontal bar chart using theme_gray()\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_gray()\n\n\n\n\n\n\n\n\nThe code below plot a horizontal bar chart using theme_bw()\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_bw()\n\n\n\n\n\n\n\n\nThe code below plot a horizontal bar chart using theme_classic()\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_classic()\n\n\n\n\n\n\n\n\nWe can further customize the chart by additional arguments using theme().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar(fill=\"skyblue\", color=\"black\", size=0.7) +  \n  coord_flip() +\n  theme_minimal() +\n   theme(panel.background = element_rect(fill = \"lightgrey\",\n                                         color = \"white\"))\n\n\n\n\n\n\n\n\n\n\n\n\n\nKam, T.S. (2023).A Layered Grammar of Graphics: ggplot2 methods.\nHadley Wickham (2023) ggplot2: Elegant Graphics for Data Analysis.Online 3rd edition.\nWinston Chang (2013) R Graphics Cookbook 2nd edition. Online version.\nHealy, Kieran (2019) Data Visualization: A practical introduction. Online version\nLearning ggplot2 on Paper – Components\nLearning ggplot2 on Paper – Layer\nLearning ggplot2 on Paper – Scale\n\n\n\n\nQuarto_overall_guide\nQuarto_markdown_basic\nQuarto_interactive_layout\n\n\n\n\n\n\n\n\n\n\n\nTakeaway\n\n\n\n\nUnderstand the foundational principles of ggplot2 for creating graphics.\nLearn to set up the environment by installing necessary R packages. E.g.: library(ggplot2)\nUnderstand the concept of aesthetic mappings and geometric objects.\nExplore how to layer different elements like stats, facets, and coordinates.\nLearnt the importance of various themes in customizing the appearance of plots.\nApply practical examples to reinforce the concepts and improve visual analytics skills.\necho=FALSE: Hides the code while executing it to display the plot in the final output"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01.html#installing-and-loading-the-required-libraries",
    "href": "Hands-on_Ex/Hands-on_Ex01.html#installing-and-loading-the-required-libraries",
    "title": "Hands-on Exercise 01",
    "section": "1.2.1 Installing and loading the required libraries",
    "text": "1.2.1 Installing and loading the required libraries\nThe code chunk below uses p_load() from the pacman package to check if the tidyverse packages are installed on my computer. If they are, they will be loaded into the R environment.If not, we will proceed to install pacman first.\n\npacman::p_load(tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01.html#base-r",
    "href": "Hands-on_Ex/Hands-on_Ex01.html#base-r",
    "title": "Hands-on Exercise 01",
    "section": "Base R",
    "text": "Base R\n\nBase R\nContent about Base R plotting.\n\n\nggplot\nContent about ggplot plotting.\nThis is green text for HTML."
  }
]