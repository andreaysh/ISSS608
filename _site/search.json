[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ISSS608 - Visual Analytics and Applications",
    "section": "",
    "text": "The future of analytics"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "In this webpage, you will find my learning journey and deliverables of ISSS608 Visual Analytics and Applications. I am Godzilla. This is the course page of ISSS608 whereby I share my Hands-on Exercises, In-class Exercises, Take-Home Exercises and Project\nDo Linkledin page, and brief introduction ```"
  },
  {
    "objectID": "New.html",
    "href": "New.html",
    "title": "New",
    "section": "",
    "text": "Data science hoepfully is easy"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex00.html",
    "href": "Hands-on_Ex/Hands-on_Ex00.html",
    "title": "Hands-on Exercise 00: Working with tidyverse",
    "section": "",
    "text": "Loading tidyverse onto r environment by using the code chunk below\n\npacman:: p_load(tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex00.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex00.html#getting-started",
    "title": "Hands-on Exercise 00: Working with tidyverse",
    "section": "",
    "text": "Loading tidyverse onto r environment by using the code chunk below\n\npacman:: p_load(tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex00.html#importing-data",
    "href": "Hands-on_Ex/Hands-on_Ex00.html#importing-data",
    "title": "Hands-on Exercise 00: Working with tidyverse",
    "section": "Importing Data",
    "text": "Importing Data\nCode chunk below uses read_csv() of readr to import REALIS2019.csv into r environment as a tibble data.frame.\n\nrealis2019 &lt;- read_csv(\"data/REALIS2019.csv\")\npopdata_fat &lt;- read_csv(\"data/PopData2019_fat.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex00.html#pivoting-data",
    "href": "Hands-on_Ex/Hands-on_Ex00.html#pivoting-data",
    "title": "Hands-on Exercise 00: Working with tidyverse",
    "section": "Pivoting Data",
    "text": "Pivoting Data\n\n#pivot_longer() \"lengthens\" data, increasing the number of rows and decreasing the number of columns\n\npopdata_long &lt;- popdata_fat %&gt;% #pipe: to combine diff functions tgt\n  pivot_longer(c(3:21), #column\n               names_to = \"Age Group\", #column headers to rows\n               values_to = \"Population\") #values to rows\n\n\nwrite_rds(popdata_long, \"rds/popdata_long.rds\") #rds: compact r file"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex00.html#selecting-data",
    "href": "Hands-on_Ex/Hands-on_Ex00.html#selecting-data",
    "title": "Hands-on Exercise 00: Working with tidyverse",
    "section": "Selecting Data",
    "text": "Selecting Data\n\nrealis2019_selected &lt;- realis2019 %&gt;%\n  select(`Project Name`,\n         `Transacted Price ($)`,\n         `Type of Sale`,\n         `Unit Price ($ psm)`,\n         `Property Type`)\nrealis2019_selected\n\n# A tibble: 19,515 × 5\n   `Project Name`     `Transacted Price ($)` `Type of Sale` `Unit Price ($ psm)`\n   &lt;chr&gt;                               &lt;dbl&gt; &lt;chr&gt;                         &lt;dbl&gt;\n 1 PEIRCE VIEW                        840000 Resale                         7434\n 2 FLORIDA PARK                      3040000 Resale                         9737\n 3 BULLION PARK                       860000 Resale                        11467\n 4 CASTLE GREEN                      1000000 Resale                         9346\n 5 HAPPY ESTATE                      7000000 Resale                        10183\n 6 TEACHER'S HOUSING…                2880000 Resale                        12659\n 7 THE PANORAMA                      1510000 Resale                        16064\n 8 THE PANORAMA                       710000 Resale                        16905\n 9 CHIP THYE GARDEN                  2800000 Resale                        13500\n10 TEACHER'S HOUSING…                2300000 Resale                         9935\n# ℹ 19,505 more rows\n# ℹ 1 more variable: `Property Type` &lt;chr&gt;"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex00.html#filtering-data-using-dplyr-package",
    "href": "Hands-on_Ex/Hands-on_Ex00.html#filtering-data-using-dplyr-package",
    "title": "Hands-on Exercise 00: Working with tidyverse",
    "section": "Filtering Data using dplyr package",
    "text": "Filtering Data using dplyr package\n\nrealis2019_filtered &lt;- realis2019_selected %&gt;%\n  filter (`Property Type` == \"Condominium\" |\n            `Property Type` == \"Apartment\") %&gt;%\n  filter (`Type of Sale` == \"New Sale\") %&gt;%\n  filter (`Unit Price ($ psm)` &lt;= 13000)\n\nrealis2019_filtered\n\n# A tibble: 87 × 5\n   `Project Name`     `Transacted Price ($)` `Type of Sale` `Unit Price ($ psm)`\n   &lt;chr&gt;                               &lt;dbl&gt; &lt;chr&gt;                         &lt;dbl&gt;\n 1 RIVERFRONT RESIDE…                1029000 New Sale                      12863\n 2 RIVERFRONT RESIDE…                 871000 New Sale                      12809\n 3 RIVERFRONT RESIDE…                1940000 New Sale                      12848\n 4 RIVERFRONT RESIDE…                1030000 New Sale                      12875\n 5 RIVERFRONT RESIDE…                2061000 New Sale                      12962\n 6 RIVERFRONT RESIDE…                 762000 New Sale                      12915\n 7 RIVERFRONT RESIDE…                1001000 New Sale                      12513\n 8 RIVERFRONT RESIDE…                1271000 New Sale                      12838\n 9 RIVERFRONT RESIDE…                1310000 New Sale                      12970\n10 RIVERFRONT RESIDE…                1339000 New Sale                      13000\n# ℹ 77 more rows\n# ℹ 1 more variable: `Property Type` &lt;chr&gt;\n\n\n\nPutting all together\n\nrealis2019_end &lt;- realis2019 %&gt;%\n  select(`Project Name`,\n         `Transacted Price ($)`,\n         `Type of Sale`,\n         `Unit Price ($ psm)`,\n         `Property Type`)   %&gt;%\n  filter (`Property Type` == \"Condominium\" |\n            `Property Type` == \"Apartment\") %&gt;%\n  filter (`Type of Sale` == \"New Sale\") %&gt;%\n  filter (`Unit Price ($ psm)` &lt;= 13000)\n\nrealis2019_end\n\n# A tibble: 87 × 5\n   `Project Name`     `Transacted Price ($)` `Type of Sale` `Unit Price ($ psm)`\n   &lt;chr&gt;                               &lt;dbl&gt; &lt;chr&gt;                         &lt;dbl&gt;\n 1 RIVERFRONT RESIDE…                1029000 New Sale                      12863\n 2 RIVERFRONT RESIDE…                 871000 New Sale                      12809\n 3 RIVERFRONT RESIDE…                1940000 New Sale                      12848\n 4 RIVERFRONT RESIDE…                1030000 New Sale                      12875\n 5 RIVERFRONT RESIDE…                2061000 New Sale                      12962\n 6 RIVERFRONT RESIDE…                 762000 New Sale                      12915\n 7 RIVERFRONT RESIDE…                1001000 New Sale                      12513\n 8 RIVERFRONT RESIDE…                1271000 New Sale                      12838\n 9 RIVERFRONT RESIDE…                1310000 New Sale                      12970\n10 RIVERFRONT RESIDE…                1339000 New Sale                      13000\n# ℹ 77 more rows\n# ℹ 1 more variable: `Property Type` &lt;chr&gt;\n\n\n\n\n\n\n\n\nTakeaway\n\n\n\n\necho: controls whether the code is displayed\n\nIf echo = TRUE (default), the code is shown in the rendered document.\nIf echo = FALSE, the code is hidden, but the output or results (if any) are still included.\n\neval: controls whether the code is executed\n\nIf eval = TRUE (default), the code in the chunk is executed, and its results (e.g., output, plots) are included in the document.\nIf eval = FALSE, the code is not executed, and no output or results are included, though the code may still be visible if echo = TRUE.\n\n%&gt;%: used to combine multiple functions together\nChange environmental variables if needed"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex00.html#working-with-dplyr",
    "href": "Hands-on_Ex/Hands-on_Ex00.html#working-with-dplyr",
    "title": "Hands-on Exercise 00: Working with tidyverse",
    "section": "Working with dplyr",
    "text": "Working with dplyr\n\nrealis2019_selected &lt;- realis2019 %&gt;% \n  select(`Project Name`, \n         `Transacted Price ($)`, \n         `Property Type`,\n         `Type of Sale`,\n         `Unit Price ($ psm)`) \nrealis2019_selected\n\n# A tibble: 19,515 × 5\n   `Project Name`          `Transacted Price ($)` `Property Type` `Type of Sale`\n   &lt;chr&gt;                                    &lt;dbl&gt; &lt;chr&gt;           &lt;chr&gt;         \n 1 PEIRCE VIEW                             840000 Condominium     Resale        \n 2 FLORIDA PARK                           3040000 Semi-Detached … Resale        \n 3 BULLION PARK                            860000 Condominium     Resale        \n 4 CASTLE GREEN                           1000000 Condominium     Resale        \n 5 HAPPY ESTATE                           7000000 Semi-Detached … Resale        \n 6 TEACHER'S HOUSING ESTA…                2880000 Terrace House   Resale        \n 7 THE PANORAMA                           1510000 Condominium     Resale        \n 8 THE PANORAMA                            710000 Condominium     Resale        \n 9 CHIP THYE GARDEN                       2800000 Terrace House   Resale        \n10 TEACHER'S HOUSING ESTA…                2300000 Terrace House   Resale        \n# ℹ 19,505 more rows\n# ℹ 1 more variable: `Unit Price ($ psm)` &lt;dbl&gt;"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex00.html#working-with-filter-of-dplyr",
    "href": "Hands-on_Ex/Hands-on_Ex00.html#working-with-filter-of-dplyr",
    "title": "Hands-on-Exercise 00: working with tidyverse",
    "section": "working with filter() of dplyr",
    "text": "working with filter() of dplyr\n\nrealis2019_filtered &lt;- realis2019_selected %&gt;% \n  filter(`Property Type` ==\"Condominium\" | \n           `Property Type`== \"Apartment\") %&gt;% \n  filter(`Type of Sale` == \"New Sale\") %&gt;% \n  filter(`Unit Price ($ psm)` &lt;= 13000)\n\n\nPutting all together\n\nrealis2019_selected &lt;- realis2019 %&gt;% \n  select(`Project Name`, \n         `Transacted Price ($)`, \n         `Type of Sale`,\n         `Unit Price ($ psm)`,\n         `Property Type`) %&gt;% \n  filter(`Property Type` ==\"Condominium\" | \n           `Property Type`== \"Apartment\") %&gt;% \n  filter(`Type of Sale` == \"New Sale\") %&gt;% \n  filter(`Unit Price ($ psm)` &lt;= 13000)"
  },
  {
    "objectID": "index.html#welcome-to-iss608---visual-analytics-and-applications-ay20242025-jan-class",
    "href": "index.html#welcome-to-iss608---visual-analytics-and-applications-ay20242025-jan-class",
    "title": "ISSS608 - Visual Analytics and Applications",
    "section": "Welcome to ISS608 - Visual Analytics and Applications, AY2024/2025 Jan class!",
    "text": "Welcome to ISS608 - Visual Analytics and Applications, AY2024/2025 Jan class!\n\nOverview\nThis page documents my learning journey of creating data visualization beyond default, using R and Tableau.This is part of the ISSS608 course by SMU MITB program, by Prof Kam Tin Seong\nIf you have any feedback or need any clarification, you may contact me at andrea.yeo.2023@mitb.smu.edu.sg\nI hope you enjoy it!\n\n\nLearning journey\nMy journey into programming felt like starring in a drama-comedy series\n- nervously stared at the code like it was ancient hieroglyphs\n- hours of debugging only to realize I missed a semicolon/indentation\n- the code worked (or so I thought).\n- proudly watching my quarto run smoothly… until the next bug sneaked in"
  },
  {
    "objectID": "index.html#find-out-what-i-have-learnt",
    "href": "index.html#find-out-what-i-have-learnt",
    "title": "ISSS608 - Visual Analytics and Applications",
    "section": "Find out what I have learnt",
    "text": "Find out what I have learnt\n\n\n\n\n\n\n\n\nIn-class Exercise\nHands-on Exercise\nTake-home Exercise"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01.html",
    "href": "Hands-on_Ex/Hands-on_Ex01.html",
    "title": "Hands-on Exercise 01",
    "section": "",
    "text": "With the assistance of ChatGPT"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01.html#a-layered-grammar-of-graphics-ggplot2-methods",
    "href": "Hands-on_Ex/Hands-on_Ex01.html#a-layered-grammar-of-graphics-ggplot2-methods",
    "title": "Hands-on Exercise 01",
    "section": "1. A Layered Grammar of Graphics: ggplot2 methods",
    "text": "1. A Layered Grammar of Graphics: ggplot2 methods\n\n1.1 Learning Outcome\nIn this chapter, we will learn the basic principles and key components of ggplot2. we will get hands-on experience using these components to create statistical graphics based on the principles of the Layered Grammar of Graphics. By the end, we will be able to apply ggplot2’s essential graphical elements to create elegant and functional statistical visualizations.\n\n\n1.2 Getting started\n\n1.2.1 Installing and loading the required libraries\nThe code chunk below uses p_load() from the pacman package to check if the tidyverse packages are installed on my computer. If they are, they will be loaded into the R environment.If not, we will proceed to install pacman first.\n\n\nCode\npacman::p_load(tidyverse)\n\n\n\n\n1.2.2 Importing data\nWe will import exam_data.csv into R environment by using the read.csv()function and assign it to exam_data\n\n\nCode\nexam_data &lt;- read_csv(\"data/Exam_data.csv\", show_col_types = FALSE)\n\n\nWe will check the dataset using below\n\nglimpse(): provides a transposed overview of a dataset, showing variables and their types in a concise format.\nhead(): displays the first few rows of a dataset (default is 6 rows) to give a quick preview of the data.\nsummary(): generates a statistical summary of each variable, including measures like mean, median, and range for numeric data.\nduplicated():Returns a logical vector indicating which elements or rows in a vector or data frame are duplicates.\ncolSums(is.na()): Counts the number of missing values (NA) in each column of the data frame.\n\n\nglimpse()head()summary()duplicated()colSum(is.na(dataset))\n\n\n\n\nCode\nglimpse(exam_data)\n\n\nRows: 322\nColumns: 7\n$ ID      &lt;chr&gt; \"Student321\", \"Student305\", \"Student289\", \"Student227\", \"Stude…\n$ CLASS   &lt;chr&gt; \"3I\", \"3I\", \"3H\", \"3F\", \"3I\", \"3I\", \"3I\", \"3I\", \"3I\", \"3H\", \"3…\n$ GENDER  &lt;chr&gt; \"Male\", \"Female\", \"Male\", \"Male\", \"Male\", \"Female\", \"Male\", \"M…\n$ RACE    &lt;chr&gt; \"Malay\", \"Malay\", \"Chinese\", \"Chinese\", \"Malay\", \"Malay\", \"Chi…\n$ ENGLISH &lt;dbl&gt; 21, 24, 26, 27, 27, 31, 31, 31, 33, 34, 34, 36, 36, 36, 37, 38…\n$ MATHS   &lt;dbl&gt; 9, 22, 16, 77, 11, 16, 21, 18, 19, 49, 39, 35, 23, 36, 49, 30,…\n$ SCIENCE &lt;dbl&gt; 15, 16, 16, 31, 25, 16, 25, 27, 15, 37, 42, 22, 32, 36, 35, 45…\n\n\n\n\n\n\nCode\nhead(exam_data)\n\n\n# A tibble: 6 × 7\n  ID         CLASS GENDER RACE    ENGLISH MATHS SCIENCE\n  &lt;chr&gt;      &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;     &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt;\n1 Student321 3I    Male   Malay        21     9      15\n2 Student305 3I    Female Malay        24    22      16\n3 Student289 3H    Male   Chinese      26    16      16\n4 Student227 3F    Male   Chinese      27    77      31\n5 Student318 3I    Male   Malay        27    11      25\n6 Student306 3I    Female Malay        31    16      16\n\n\n\n\n\n\nCode\nsummary(exam_data)\n\n\n      ID               CLASS              GENDER              RACE          \n Length:322         Length:322         Length:322         Length:322        \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n    ENGLISH          MATHS          SCIENCE     \n Min.   :21.00   Min.   : 9.00   Min.   :15.00  \n 1st Qu.:59.00   1st Qu.:58.00   1st Qu.:49.25  \n Median :70.00   Median :74.00   Median :65.00  \n Mean   :67.18   Mean   :69.33   Mean   :61.16  \n 3rd Qu.:78.00   3rd Qu.:85.00   3rd Qu.:74.75  \n Max.   :96.00   Max.   :99.00   Max.   :96.00  \n\n\n\n\n\n\nCode\nexam_data[duplicated(exam_data),]\n\n\n# A tibble: 0 × 7\n# ℹ 7 variables: ID &lt;chr&gt;, CLASS &lt;chr&gt;, GENDER &lt;chr&gt;, RACE &lt;chr&gt;,\n#   ENGLISH &lt;dbl&gt;, MATHS &lt;dbl&gt;, SCIENCE &lt;dbl&gt;\n\n\n\n\n\n\nCode\ncolSums(is.na(exam_data))\n\n\n     ID   CLASS  GENDER    RACE ENGLISH   MATHS SCIENCE \n      0       0       0       0       0       0       0 \n\n\n\n\n\n\n\n\n\n\n\nReflection\n\n\n\n\nLearnt how to load libraries, import/ read excel files\n\n\n\n\n\n\n1.3 Introducing ggplot\nggplot2 is an R package for creating data-driven graphics based on The Grammar of Graphics. It is also part of the tidyverse family specially designed for visual exploration and communication.\nFor more information, visit ggplot2\n\n1.3.1 R Graphics VS ggplot\nLets compare how R Graphics, the core graphical functions of Base R and ggplot plot a simple histogram.\n\nR Graphicsggplot2\n\n\n\n\nCode\nhist(exam_data$MATHS,col = \"#4169e1\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot(data=exam_data, aes(x = MATHS)) +\n  geom_histogram(bins=10, \n                 boundary = 100,\n                 color=\"black\", \n                 fill=\"#4169e1\") +\n  ggtitle(\"Distribution of Maths scores\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nReflection\n\n\n\n\nWhile R Graphics offers simpler syntax, Hadley Wickham emphasizes that the true value of ggplot2 lies not in its specific plotting syntax, but in the transformative way it approaches visualization. It enables users to think of visualizations as a method of mapping variables to the visual attributes of geometric objects, creating a powerful framework for understanding and perceiving data.\n\n\n\n\n\n\n1.4 Grammar of Graphics\nThe Grammar of Graphics, introduced by Leland Wilkinson in 1999, provides a structured approach to creating meaningful data visualizations. It breaks graphs into semantic components like scales and layers, offering a framework to answer the question: What is a statistical graphic?\nThe key principles I’ve learned are:\n\nGraphics are built from distinct layers of grammatical elements.\nMeaningful plots are achieved through aesthetic mapping.\n\nThis grammar helps me see how complex graphics are composed, uncover connections between seemingly different visuals, and understand the foundation of diverse visualizations. It also guides me toward recognizing well-formed, meaningful graphics while acknowledging that not all grammatically correct visuals will make sense.\n\n1.4.1 A layered grammar of graphics\nFigure shows the seven grammars of ggplot2: A layered grammar of graphics\n\n\n\nA layered grammar of graphics\n\n\nThe building blocks of the Grammar of Graphics are:\n\nData: The dataset being visualized.\nAesthetics: Attributes like position, color, size, shape, or transparency that map data to visual elements.\nGeometries: Visual elements representing data, such as points, bars, or lines.\nFacets: Subsets of data used to create multiple variations of a graph (e.g., panels).\nStatistics: Transformations summarizing data, such as means or confidence intervals.\nCoordinate Systems: The plane where data is plotted (e.g., Cartesian or polar).\nThemes: Non-data components like titles, axis labels, or legend formatting.\n\n\n\n\n1.5 Essential Grammatical Elements in ggplot2: data\nLet us call the ggplot( ) function using the code chunk below.\n\n\nCode\nggplot(data=exam_data)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nA blank canvas is created with ggplot().\nggplot() initializes a ggplot object.\nThe data argument specifies the dataset for plotting.\nIf the dataset is not already a data.frame, it will be converted to one by fortify().\n\n\n\n\n\n1.6 Essential Grammatical Elements in ggplot2: aesthetic mappings\nAesthetic mappings link data attributes to visual characteristics like position, color, size, shape, or transparency, allowing each characteristic to represent information. These mappings are defined using the aes() function, and each geom layer can have its own aes() specification.\nThe code below adds the aesthetic element into the plot.\n\n\nCode\nggplot(data=exam_data,\n       aes(x=MATHS,\n           y=ENGLISH))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nggplot includes the x/y axis and the axis’s label\n\n\n\n\n\n1.7 Essential Grammatical Elements in ggplot2: geom\nGeometric objects are the visual marks on a plot. A layer combines data, aesthetic mappings, a geometric object (geom), statistical transformations (stat), and position adjustments. Layers are typically created using geom_ functions, with options to override default stat or position settings. Every plot requires at least one geom, and additional geoms can be added using the + operator.\nRefer here for a more comprehensive list.\nBelow are some examples of geom_:\n\ngeom_point: for drawing individual points (e.g., a scatter plot)\ngeom_line: for drawing lines (e.g., for a line charts)\ngeom_col: for drawing bars with heights mapped to values in the data (e.g., bar charts).\ngeom_boxplot: for drawing box-and-whisker plots to visualize data distribution and outliers.\ngeom_histogram: for drawing binned values to represent the distribution of a numeric variable (e.g., histograms).\ngeom_density: for drawing smoothed density estimates to visualize the distribution of a numeric variable.\n\n\n\n1.7.1 Geometric objects: geom_bar\nThe code below plots a bar chart by using geom_bar().\n\n\nCode\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()\n\n\n\n\n\n\n\n\n\n\n\n1.7.2 Geometric objects: geom_dotplot\nIn a dot plot, the dot width represents the bin width (or maximum width, depending on the binning method), and dots are stacked, with each dot signifying one observation.\nThe code below plots a dot plot chart by using geom_dotplot().\n\n\nCode\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(dotsize = 0.5)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWarning\n\n\n\nTo note that the y scale is not very useful, and can be misleading in this case.\n\n\nTo enhance the dotplot visualization, the below (non exhaustive) are some arguments that has been added:\n\nscale_y_continuous()- to turn off the y-axis by setting it to NULL\nbinwidth - specifies the width of the bins or interval used to group the data to - 3.0\ndotsize - adjusts the size of the dots in the plot to - 0.8\nfill - specifies the fill color of the dots to - red\ncolor - specifies the outline color of the dots to - yellow\nalpha - specifies the transparency level of the dots to - 0.5\n\n\n\nCode\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(binwidth=3.0,         \n               dotsize = 0.8,\n               fill=\"#E15841\",\n               color=\"#E1B941\",\n               alpha=0.5 ) +      \n  scale_y_continuous(NULL,           \n                     breaks = NULL)  \n\n\n\n\n\n\n\n\n\n\n\n1.7.3 Geometric objects: geom_histogram\ngeom_histogram()in ggplot creates a bar plot that displays the distribution of a continuous variable by dividing the data into bins and counting the number of observations in each bin.\nThe code below plots a simple histogram by using values in MATHS field of exam_data.\n\n\nCode\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_histogram()  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe default number of bins is 30, however one can always adjust the number of bins manually by using the bins() argument.\n\n\n\n\n1.7.4 Modifying a geometric object by changing geom()\nTo enhance the histogram visualization, the below (non exhaustive) are some arguments that has been added:\n\nbins - to change the number of bins to - 20\nfill - specifies the fill color of the histogram to - red\ncolor - specifies the outline color of the histogram to - green\n\n\n\nCode\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20,            \n                 color=\"#A8E141\",      \n                 fill=\"#E15841\")\n\n\n\n\n\n\n\n\n\n\n\n1.7.5 Modifying a geometric object by changing aes()\nThe code below changes the interior colour of the histogram (i.e. fill) by using a sub-group of aes().\nIn this case, the fill is based on GENDER.\n\n\nCode\nggplot(data=exam_data, \n       aes(x= MATHS, \n           fill = GENDER)) +\n  geom_histogram(bins=20, \n                 color=\"grey30\")\n\n\n\n\n\n\n\n\n\nWe can also specify the color of the fill based on GENDER.\nIn this case, we used the scale_fill_manual() function to assign specific colors to each gender. E.g.:\n\n\nPink for Female\n\n\nBlue for Male\n\nwhile keeping the outline grey\n\n\n\nCode\nggplot(data = exam_data, \n       aes(x = MATHS, \n           fill = GENDER)) +\n  geom_histogram(bins = 20, \n                 color = \"grey30\") +\n  scale_fill_manual(values = c(\"Female\" = \"pink\", \"Male\" = \"blue\"))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThis approach can be used to color, fill and alpha of the geometric.\n\n\n\n\n1.7.6 Geometric objects: geom_density\nThe geom_density() function computes and visualizes a kernel density estimate, which provides a smooth approximation of the data’s distribution.\nIt serves as a useful alternative to histograms for continuous data, particularly when the data originates from an underlying smooth distribution.\nThe code below plots the distribution of Maths scores in a kernel density plot.\n\n\nCode\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_density()\n\n\n\n\n\n\n\n\n\nThe code below plots two kernel density lines by using color or fill arguments of aes()\n\n\nCode\nggplot(data=exam_data, \n       aes(x = MATHS, \n           colour = GENDER)) +\n  geom_density()\n\n\n\n\n\n\n\n\n\nLikewise, by using scale_color_manual() function, we can map the colors of each gender explicitly, where\n\n\nPink for Female\n\n\nBlue for Male\n\n\n\n\nCode\nggplot(data = exam_data, \n       aes(x = MATHS, \n           colour = GENDER)) +\n  geom_density() +\n  scale_color_manual(values = c(\"Female\" = \"pink\", \"Male\" = \"blue\"))\n\n\n\n\n\n\n\n\n\n\n\n1.7.7 Geometric objects: geom_boxplot\ngeom_boxplot() function visualizes continuous data by displaying five key summary statistics: the median, the upper and lower hinges (quartiles), the whiskers, and individual outliers.\n\n\nCode\nggplot(data=exam_data, \n       aes(y = MATHS,       \n           x= GENDER)) +    \n  geom_boxplot()    \n\n\n\n\n\n\n\n\n\nTo enhance the boxplot visualization, the below (non exhaustive) are some arguments that has been added:\n\nfill - fills the boxplot with different colors based on a grouping variable - purple\ncolor - specifies the color of the boxplot borders to - green\noutlier.color - specifies the outlier color of the boxplot to - red\noutlier.shape - specifies the shape of the outlier points to - 16\nalpha - adjust the transparency of the boxplot fill - 0.7\nwidth - adjusts the width of the boxplots to - 0.7\n\n\n\nCode\nggplot(data = exam_data, \n       aes(y = MATHS,       \n           x = GENDER)) +    \n  geom_boxplot(fill = \"#6A5ACD\",      # Fills the boxes with a color\n               color = \"#ABE141\",     # Sets the border color of the boxes\n               outlier.color = \"red\",  # Colors the outliers\n               outlier.shape = 16,     # Sets the shape of the outliers\n               alpha = 0.7,            # Adjusts the transparency of the boxes\n               width = 0.7)            # Sets the width of the boxes\n\n\n\n\n\n\n\n\n\nLikewise, to specify different fill colors for female and male, we need to map the fill aesthetic to the Gender variable inside aes() and then define the specifc colors using scale_fill_manual().\n\n\nPink for Female\n\n\nBlue for Male\n\n\n\n\nCode\nggplot(data = exam_data, \n       aes(y = MATHS,       \n           x = GENDER, \n           fill = GENDER)) +   # Map fill aesthetic to GENDER\n  geom_boxplot(color = \"#ABE141\",      # Sets the border color of the boxes\n               outlier.color = \"red\",  # Colors the outliers\n               outlier.shape = 16,     # Sets the shape of the outliers\n               alpha = 0.7,            # Adjusts the transparency of the boxes\n               width = 0.7) +          # Sets the width of the boxes\n  scale_fill_manual(values = c(\"Female\" = \"pink\", \"Male\" = \"blue\"))  # Custom colors\n\n\n\n\n\n\n\n\n\nNotches in box plots help visually determine if the medians of distributions differ. Non-overlapping notches indicate distinct medians.\nThe code below plots the distribution of Maths scores by gender in notched plot instead of boxplot.\n\n\nCode\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot(notch=TRUE)\n\n\n\n\n\n\n\n\n\nLikewise, additional arguments can be added to improve the overall visualization of the notched plot\n\nfill - fills the notched plot with different colors based on a grouping variable\ncolor - specifies the color of the notched plot borders to - black\noutlier.color - specifies the outlier color of the boxplot to - red\noutlier.shape - specifies the shape of the outlier points to - 8\nalpha - adjust the transparency of the boxplot fill - 0.9\nnotchwidth - adjusts the width of the notches for improved clarity - 0.5\n\n\n\nCode\nggplot(data = exam_data, \n       aes(y = MATHS, \n           x = GENDER, \n           fill = GENDER)) +  # Add fill to differentiate genders\n  geom_boxplot(notch = TRUE, \n               outlier.colour = \"red\",   # Highlight outliers in red\n               outlier.shape = 8,       # Use a different shape for outliers\n               notchwidth = 0.5,        # Adjust the notch width for emphasis\n               color = \"black\",\n               alpha = 0.9) +      \n  scale_fill_manual(values = c(\"Female\" = \"pink\", \"Male\" = \"blue\"))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nTo refer to here for ggplot point shapes best tips and tricks\n\n\n\n\n1.7.8 Geometric objects: geom_violin\ngeom_violin creates violin plots, which are useful for comparing multiple data distributions. Unlike density curves, which can overlap and become hard to interpret, violin plots place distributions side by side, making comparisons clearer and more visually accessible.\nThe code below plots the distribution of Maths score by gender using violin plots.\n\n\nCode\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_violin()\n\n\n\n\n\n\n\n\n\nLikewise, additional arguments can be added to improve the overall visualization of the violin plot\n\nfill - maps the violin fill color to gender\nscale_fill_manual() - assigns custom colors for Female and Male\ntrim - ensures the plot displayes the full range of data, even for smaller distributions\ncolor - adds an outline to make the violins visually distinct\n\n\n\nCode\nggplot(data = exam_data, \n       aes(y = MATHS, \n           x = GENDER, \n           fill = GENDER)) +  # Map fill to GENDER\n  geom_violin(trim = FALSE,   # Show the full range of the data\n              scale = \"width\", # Adjust width for comparability\n              color = \"black\") +  # Add a black outline to the violins\n  scale_fill_manual(values = c(\"Female\" = \"pink\", \n                               \"Male\" = \"blue\"))\n\n\n\n\n\n\n\n\n\n\n\n1.7.9 Geometric objects: geom_point\ngeom_point() is useful for creating scatterplot.\nThe code below plots a scatterplot showing the Maths and English grades of pupils by using geom_point()\n\n\nCode\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() \n\n\n\n\n\n\n\n\n\nLikewise, additional arguments can be added to improve the overall visualization of the scatter plot\n\ncolor - set all points to a fixed blue color\nsize - set the size of the points to a fixed value (adjustable) to - 3\nalpha - adds transparency to reduce overlap if points are cluttered\nshape - set the apperance of the points in the scatter plot (e.g.: square, circle, triangle)\n\n\n\nCode\nggplot(data = exam_data, \n       aes(x = MATHS, \n           y = ENGLISH)) +\n  geom_point(color = \"blue\", size = 3, alpha = 0.5, shape = 20)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nTo refer to here for ggplot point shapes best tips and tricks\n\n\n\n\n1.7.10 Combining geometric objects\nThe code below plots the data points on the boxplots by using both geom_boxplot() and geom_point().\n\n\nCode\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot() +                    \n  geom_point(position=\"jitter\", \n             size = 0.5)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nReflection\n\n\n\n\nLearnt about the different geometric objects such as geom_bar,geom_dotplot,geom_histogram,geom_density, geom_boxplot,geom_violin,geom_point etc.\nLearnt about how to combine different geometric objects together in one chart - e.g.: geom_boxplot and geom_point\n\n\n\n\n\n\n1.8 Essential grammatical elements in ggplot2: stat\nThe Statistics functions statistically transforms data, as a form of summary.\nExample include: - calculating the frequency of variable values - calculating the mean - determing confidence limits\nThere are two ways to use these functions: - add a stat_() function and override the default geom, or - add a geom_() function and override the default stat.\n\n1.8.1 Working with stat()\nThe boxplots below are incomplete because the means are not shown.\n\n\nCode\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot()\n\n\n\n\n\n\n\n\n\n\n\n1.8.2 Working with stat_summary()\nThe code below uses the stat_summary() function to add mean values by replacing the default geometric layer (geom).\n\n\nCode\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  stat_summary(geom = \"point\",       \n               fun = \"mean\",         \n               colour =\"blue\",        \n               size=4) \n\n\n\n\n\n\n\n\n\n\n\n1.8.3 Working with geom() method\nThe code below uses the geom() function to add mean values by replacing the default geometric layer (geom).\n\n\nCode\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  geom_point(stat=\"summary\",        \n             fun=\"mean\",           \n             colour=\"blue\",          \n             size=4)          \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nReflection\n\n\n\n\nBoth codes achieve the same result - boxplot with mean values as blue points overlaid on the plot\nThe first code uses stat_summary explicitly where summary is calculated fun = \"mean\", and then visualized using the geometry geom=\"point\". It provides more flexibility if one want to switch the geometry.\nThe second code uses geom_point with stat=\"summary\", where it computes the mean and plots it directly.\nOverall, I would prefer the second code as it feel more intuitive and focuses on using a geometry geom_point and overridding its default statistical transformation.\n\n\n\n\n\n1.8.4 Adding a best fit curve on a scatterplot?\nThe scatterplot below illustrates the relationship between Maths and English grades.\nAdding a best-fit curve can enhance its interpretability.\n\n\nCode\necho=FALSE\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() \n\n\n\n\n\n\n\n\n\ngeom_smooth() is used to plot a best fit curve on the scatterplot.\n\n\nCode\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(size=0.5)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe default method used is LOESS - Locally Estimted Scatterplot Smoothing which refers to a regression method used for smoothing data points in a scatterplot, useful for capturing non-linear trends in the data.\n\n\nThe default method can be overriden as shown below:\n\n\nCode\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              linewidth=0.5)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nIn this case, method = \"lm\" specifies that a linear regression line should be fitted to the data.\nRefer here for more information on the different methods available in geom_smooth().\n\n\nLikewise, additional arguments can be added to improve the overall visualization of the scatter plot\n\ncolor - sets the color of the regression line\nsize - adjusts the thickness of the line\n\n\n\nCode\nggplot(data = exam_data, \n       aes(x = MATHS, y = ENGLISH)) +\n  geom_point() +\n  geom_smooth(method = \"lm\", color = \"red\", size = 1)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nReflection\n\n\n\n\nLearnt the two ways to add statistical functions to ggplot2 - stat_() and geom_()\nLearnt how to incorporate a best fit curve on to the scatterplot geom_smooth()\nLearnt the different regression methods available ingeom_smooth()\n\n\n\n\n\n\n1.9 Essential grammatical elements in ggplot2: Facets\nFacetting in ggplot2 creates small multiples, or trellis plots, to display different subsets of data. This approach is an alternative to using aesthetics (such as color or shape) for displaying additional variables. There are two main types of faceting in ggplot2:\n\nfacet_wrap() : wraps multiple plots into a single panel, typically based on a single categorical variable. It will automatically arranges the plots into a grid.\nfacet_grid() : organizes plots into a grid based on the values of two categorical variables, one for rows and the other for columns.\n\n\n1.9.1 Working with facet_wrap()\nfacet_wrap arranges a 1D sequence of panels into a 2D layout, making better use of screen space, especially on rectangular displays. It is often more efficient than facet_grid() for displaying a variable across multiple categories\nThe code below produces a 2D matrix of ‘MATHS’ histograms grouped by variable ‘CLASS’ using facet_wrap(~CLASS).\n\n\nCode\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_wrap(~ CLASS)\n\n\n\n\n\n\n\n\n\n\n\n1.9.2 Working with facet_grid()\nfacet_grid creates a matrix of panels based on two discrete variables, one for rows and the other for columns. It is most useful when both variables have all possible combinations in the data.\nThe code below plots a trellis plot using facet_grid().\n\n\nCode\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_grid(~ CLASS)\n\n\n\n\n\n\n\n\n\n\n\n\n1.10 Essential grammatical elements in ggplot2: Coordinates\nThe Coordinates functions map the position of objects onto the plane of the plot.\nThere are a number of different possible coordinate systems to use:\n\ncoord_cartesian(): the default cartesian coordinate systems, where you specify x and y values (e.g. allows you to zoom in or out).\ncoord_flip(): a cartesian system with the x and y flipped.\ncoord_fixed(): a cartesian system with a “fixed” aspect ratio (e.g. 1.78 for a “widescreen” plot).\ncoord_quickmap(): a coordinate system that approximates a good aspect ratio for maps.\n\n\n1.10.1 Working with Coordinate\nBy default the bar charts in ggplot2 are vertical, as shown:\n\n\n\n\n\n\n\n\n\nUsing coord_flip(), we can flip the vertical bar chart to a horizontal one.\n\n\nCode\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip()\n\n\n\n\n\n\n\n\n\n\n\n1.10.2 Changing the x and y axis range\nThe scatterplot below is misleading as the x and y axes are not equal. This can create confusion to the readers.\n\n\nCode\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, size=0.5)\n\n\n\n\n\n\n\n\n\nThe code below will set both the x and y axis range to 0-100.\n\n\nCode\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\n\n\n\n\n\n\n\n\n\n\n\n1.11 Essential grammatical elements in ggplot2: Themes\nThemes control elements of the graph which are not related to the data such as\n\nbackground color\nfonts size\ngridlines\nlabels color\n\nSome of the Built-in themes include:\n\ntheme_gray(): default theme, with a light gray background and white gridlines.\ntheme_bw(): theme with a black-and-white color scheme - white background, black gridlines and axis lines\ntheme_classic(): theme with a minimalist look - white background and no gridlines\n\nThe list of all other themes available can be found at this link\n\n1.11.1 Working with Themes\nThe code below plot a horizontal bar chart using theme_gray()\n\n\nCode\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_gray()\n\n\n\n\n\n\n\n\n\nThe code below plot a horizontal bar chart using theme_bw()\n\n\nCode\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_bw()\n\n\n\n\n\n\n\n\n\nThe code below plot a horizontal bar chart using theme_classic()\n\n\nCode\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_classic()\n\n\n\n\n\n\n\n\n\nWe can further customize the chart by additional arguments using theme().\n\n\nCode\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar(fill=\"skyblue\", color=\"black\", size=0.7) +  \n  coord_flip() +\n  theme_minimal() +\n   theme(panel.background = element_rect(fill = \"lightgrey\",\n                                         color = \"white\"))\n\n\n\n\n\n\n\n\n\n\n\n\n1.12 References\n\nKam, T.S. (2023).A Layered Grammar of Graphics: ggplot2 methods.\nHadley Wickham (2023) ggplot2: Elegant Graphics for Data Analysis.Online 3rd edition.\nWinston Chang (2013) R Graphics Cookbook 2nd edition. Online version.\nHealy, Kieran (2019) Data Visualization: A practical introduction. Online version\nLearning ggplot2 on Paper – Components\nLearning ggplot2 on Paper – Layer\nLearning ggplot2 on Paper – Scale\n\n\n1.12.1 Additional references\n\nQuarto_overall_guide\nQuarto_markdown_basic\nQuarto_interactive_layout\n\n\n\n\n1.13 Takeaway\n\n\n\n\n\n\nTakeaway\n\n\n\n\nUnderstand the foundational principles of ggplot2 for creating graphics.\nLearn to set up the environment by installing necessary R packages. E.g.: library(ggplot2)\nUnderstand the concept of aesthetic mappings and geometric objects.\nExplore how to layer different elements like stats, facets, and coordinates.\nLearnt the importance of various themes in customizing the appearance of plots.\nApply practical examples to reinforce the concepts and improve visual analytics skills.\necho=FALSE: Hides the code while executing it to display the plot in the final output\n\n\n\n\n1.13.1 Further exploration\n1. Is it possible to add mean, median and a title on histogram?\nBefore:\n\n\nCode\nggplot(data=exam_data, aes(x = MATHS)) +\n  geom_histogram(bins=10, \n                 boundary = 100,\n                 color=\"black\", \n                 fill=\"#4169e1\") +\n  ggtitle(\"Distribution of Maths scores\")\n\n\n\n\n\n\n\n\n\nAfter:\n\ngeom_vline(): adds vertical lines for mean and median\nlabs(): used to set the title and add a label for the legend\nscale_color_manual(): set the colors for mean and median\n\n\n\nCode\n# Calculate mean and median\nmean_value &lt;- mean(exam_data$MATHS, na.rm = TRUE)\nmedian_value &lt;- median(exam_data$MATHS, na.rm = TRUE)\n\n# Create a data frame for the mean and median lines\nline_data &lt;- data.frame(\n  value = c(mean_value, median_value),\n  type = factor(c(\"Mean\", \"Median\"))\n)\n\n# Create the histogram with mean and median lines and a legend\nggplot(data = exam_data, aes(x = MATHS)) +\n  geom_histogram(bins = 10, \n                 boundary = 100, \n                 color = \"black\", \n                 fill = \"#4169e1\") +\n  geom_vline(data = line_data, aes(xintercept = value, color = type), \n             linetype = \"dashed\", \n             size = 1) +\n  scale_color_manual(values = c(\"Mean\" = \"red\", \"Median\" = \"green\")) +\n  labs(title = \"Distribution of Maths Scores\",\n       x = \"Maths Scores\",\n       y = \"Frequency\",\n       color = \"Statistics\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n2. Exploring other useful combinations of geometric objects in ggplot2?\n\nBox plot with jittered points (geom_boxplot()+ geom_jitter())\nUse case: To see the spread of ENGLISH scores across Gender, and identify any outliers.\n\n\n\nCode\nggplot(data=exam_data, aes(x=GENDER, y=ENGLISH)) +\n  geom_boxplot(fill=\"lightblue\") +   # Box plot for distribution\n  geom_jitter(width=0.1, size=1, alpha=0.7)  # Jittered points for individual data\n\n\n\n\n\n\n\n\n\nConclusion:\n\nFemale students tend to have a slightly higher median English score compared to male students.\nMale students exhibit greater variability in their English scores, with a wider range of scores observed compared to female students.\n\n\n\n\n\nlibrary(ggplot2)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01.html#installing-and-loading-the-required-libraries",
    "href": "Hands-on_Ex/Hands-on_Ex01.html#installing-and-loading-the-required-libraries",
    "title": "Hands-on Exercise 01",
    "section": "1.2.1 Installing and loading the required libraries",
    "text": "1.2.1 Installing and loading the required libraries\nThe code chunk below uses p_load() from the pacman package to check if the tidyverse packages are installed on my computer. If they are, they will be loaded into the R environment.If not, we will proceed to install pacman first.\n\npacman::p_load(tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01.html#base-r",
    "href": "Hands-on_Ex/Hands-on_Ex01.html#base-r",
    "title": "Hands-on Exercise 01",
    "section": "Base R",
    "text": "Base R\n\nBase R\nContent about Base R plotting.\n\n\nggplot\nContent about ggplot plotting.\nThis is green text for HTML."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02.html",
    "href": "Hands-on_Ex/Hands-on_Ex02.html",
    "title": "Hands-on Exercise 02",
    "section": "",
    "text": "With the assistance of ChatGPT"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02.html#beyond-ggplot2-fundamentals",
    "href": "Hands-on_Ex/Hands-on_Ex02.html#beyond-ggplot2-fundamentals",
    "title": "Hands-on Exercise 02",
    "section": "2. Beyond ggplot2 Fundamentals",
    "text": "2. Beyond ggplot2 Fundamentals\n\n2.1 Learning Outcome\nIn this chapter, we will be exploring several ggplot2 extensions to enhance the elegance and effectiveness of statistical graphics. The objectives will be to:\n\nUse the ggrepel package to control annotation placement on graphs.\nCreate publication-quality visuals with ggthemes and hrbrthemes.\nCombine multiple ggplot2 graphs into composite figures using the patchwork package.\n\n\n\n2.2 Getting started\n\n2.2.1 Installing and loading the required libraries\nBeside tidyverse, below are the four packages that will be used.\n\nggrepel: provides geoms for avoiding overlapping text labels in ggplot2.\nggthemes: offers additional themes, geoms, and scales for enhancing ggplot2 visuals.\nhrbrthemes: focuses on typography-centric themes and components for ggplot2.\npatchwork: allow for the creation of composite figures using ggplot2\n\nCode to check if the packages have been installed, and to load them into our R environment.\n\n\nCode\npacman::p_load(ggrepel, patchwork,\n               ggthemes, hrbrthemes,\n               tidyverse)\n\n\n\n\n2.2.2 Importing data\n\n\n\n\n\n\nNote\n\n\n\n\nThis section data is the same dataset used in Hands-on_Ex01\n\n\n\nWe will use a data file called Exam_data.csv which contains the year-end exam results of a group of Primary 3 students from a local school.\nThe code below will be used to import the “exam_data.csv” file into the R environment using the read_csv() function from the readr package, which is part of the tidyverse.\n\n\nCode\nexam_data &lt;- read_csv(\"data/Exam_data.csv\", show_col_types = FALSE)\n\n\nWe will check the dataset using below\n\nglimpse(): provides a transposed overview of a dataset, showing variables and their types in a concise format.\nhead(): displays the first few rows of a dataset (default is 6 rows) to give a quick preview of the data.\nsummary(): generates a statistical summary of each variable, including measures like mean, median, and range for numeric data.\nduplicated():returns a logical vector indicating which elements or rows in a vector or data frame are duplicates.\ncolSums(is.na()): counts the number of missing values (NA) in each column of the data frame.\nspec(): use spec() to quickly inspect the column\n\n\nglimpse()head()summary()duplicated()colSum(is.na(dataset))\n\n\n\n\nCode\nglimpse(exam_data)\n\n\nRows: 322\nColumns: 7\n$ ID      &lt;chr&gt; \"Student321\", \"Student305\", \"Student289\", \"Student227\", \"Stude…\n$ CLASS   &lt;chr&gt; \"3I\", \"3I\", \"3H\", \"3F\", \"3I\", \"3I\", \"3I\", \"3I\", \"3I\", \"3H\", \"3…\n$ GENDER  &lt;chr&gt; \"Male\", \"Female\", \"Male\", \"Male\", \"Male\", \"Female\", \"Male\", \"M…\n$ RACE    &lt;chr&gt; \"Malay\", \"Malay\", \"Chinese\", \"Chinese\", \"Malay\", \"Malay\", \"Chi…\n$ ENGLISH &lt;dbl&gt; 21, 24, 26, 27, 27, 31, 31, 31, 33, 34, 34, 36, 36, 36, 37, 38…\n$ MATHS   &lt;dbl&gt; 9, 22, 16, 77, 11, 16, 21, 18, 19, 49, 39, 35, 23, 36, 49, 30,…\n$ SCIENCE &lt;dbl&gt; 15, 16, 16, 31, 25, 16, 25, 27, 15, 37, 42, 22, 32, 36, 35, 45…\n\n\n\n\n\n\nCode\nhead(exam_data)\n\n\n# A tibble: 6 × 7\n  ID         CLASS GENDER RACE    ENGLISH MATHS SCIENCE\n  &lt;chr&gt;      &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;     &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt;\n1 Student321 3I    Male   Malay        21     9      15\n2 Student305 3I    Female Malay        24    22      16\n3 Student289 3H    Male   Chinese      26    16      16\n4 Student227 3F    Male   Chinese      27    77      31\n5 Student318 3I    Male   Malay        27    11      25\n6 Student306 3I    Female Malay        31    16      16\n\n\n\n\n\n\nCode\nsummary(exam_data)\n\n\n      ID               CLASS              GENDER              RACE          \n Length:322         Length:322         Length:322         Length:322        \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n    ENGLISH          MATHS          SCIENCE     \n Min.   :21.00   Min.   : 9.00   Min.   :15.00  \n 1st Qu.:59.00   1st Qu.:58.00   1st Qu.:49.25  \n Median :70.00   Median :74.00   Median :65.00  \n Mean   :67.18   Mean   :69.33   Mean   :61.16  \n 3rd Qu.:78.00   3rd Qu.:85.00   3rd Qu.:74.75  \n Max.   :96.00   Max.   :99.00   Max.   :96.00  \n\n\n\n\n\n\nCode\nexam_data[duplicated(exam_data),]\n\n\n# A tibble: 0 × 7\n# ℹ 7 variables: ID &lt;chr&gt;, CLASS &lt;chr&gt;, GENDER &lt;chr&gt;, RACE &lt;chr&gt;,\n#   ENGLISH &lt;dbl&gt;, MATHS &lt;dbl&gt;, SCIENCE &lt;dbl&gt;\n\n\n\n\n\n\nCode\ncolSums(is.na(exam_data))\n\n\n     ID   CLASS  GENDER    RACE ENGLISH   MATHS SCIENCE \n      0       0       0       0       0       0       0 \n\n\n\n\nCode\nspec(exam_data)\n\n\ncols(\n  ID = col_character(),\n  CLASS = col_character(),\n  GENDER = col_character(),\n  RACE = col_character(),\n  ENGLISH = col_double(),\n  MATHS = col_double(),\n  SCIENCE = col_double()\n)\n\n\n\n\n\nThe exam_data tibble contains seven attributes, as shown above:\n\nCategorical attributes: ID, CLASS, GENDER, RACE\nContinuous attributes: MATHS, ENGLISH, SCIENCE\n\n\n\n\n2.3 Beyond ggplot2 Annotation: ggrel\nAnnotating statistical graphs can be challenging, particularly when dealing with a large number of data points.\n\n\nShow the code\n ggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              linewidth=0.5) +  \n  geom_label(aes(label = ID), \n             hjust = .5, \n             vjust = -.5) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nReplaced size=0.5 with linewidth-0.5 in the geom_smooth() function to align the code with the latest ggplot2 standards.\n\n\n\nggrepel is an extension of ggplot2 that provides geoms to prevent overlapping text labels.\nIt replaces geom_text() with geom_text_repel() and geom_label() with geom_label_repel(), ensuring labels repel from each other, data points, and plot edges.This enhances the clarity and readability of the chart.\n\n2.3.1 Working with ggrepel\n\n\nShow the code\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  geom_label_repel(aes(label = ID), \n                   fontface = \"bold\") +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWarning\n\n\n\nThere is a warning message:\n\ngeom_smooth()` using formula = ‘y ~ x’\nWarning: ggrepel: 321 unlabeled data points (too many overlaps). Consider increasing max.overlaps\nthe warning message means that geom_label_repeal function was unable to place labels for 321 data points because they are too close to each other.\n\nResponse:\n\nOption 1: Increase max.overlaps\nOption 2: Label only specific points which involves creating a new column that marks points to label and passing the column into aes(label = ..)\nOption 3: Potentially to reduce the point size or transparency with geom_point()\n\n\n\n\n\n2.3.2 Further exploration with ggrepel\nLeveraging on Hands-on_Ex01, we added the below attributes:\n\ngeom_point:customize the color = “darkblue” and changed the size = 0.5, with a solid circle shape where shape = 16.\ngeom_smooth:changed the regression line, color = “red”, made thicker size = 1, and to display as a dashed line, linetype = “dashed”.\nRefer here for the different ggplot2 point shapes.\nRefer here for the different ggplot2 line types.\n\n\n\nShow the code\nlibrary(ggplot2)\nlibrary(ggrepel)\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  # Scatter plot with customized point appearance\n  geom_point(color = \"darkblue\", size = 0.5, shape = 16) +  # change point color, size, and shape\n  \n  # Linear regression line with customized color and line type\n  geom_smooth(method=lm, \n              size=1, \n              color=\"red\",    # line color\n              linetype=\"dashed\") +  # line style\n  geom_label_repel(aes(label = ID), \n                   fontface = \"bold\") +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\n\n\n\n\n\n\n\n\n\n2.4 Beyond ggplot2 themes\nThere are 8 different built-in themes within ggplot2. They are:\n\ntheme_gray():default theme in ggplot2, with a gray background with white grid lines for readability.\ntheme_bw(): clean, minimalistic theme with a white background and black grid lines.\ntheme_classic():simple theme with a white background and no grid lines.\ntheme_dark():theme with a dark background and light-colored text and grid lines.\ntheme_light():light background theme with light-colored grid lines.\ntheme_linedraw():theme that uses black lines on a white background.\ntheme_minimal():minimalist theme that reduces non-data elements.\ntheme_void():clean theme with no background, grid lines, or axes.\n\n\ntheme_gray()theme_bw()theme_classic()theme_dark()theme_light()theme_linedraw()theme_minimal()theme_void()\n\n\n\n\nCode\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  theme_gray() +\n  ggtitle(\"Distribution of Maths scores\") \n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  theme_bw() +\n  ggtitle(\"Distribution of Maths scores\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  theme_classic() +\n  ggtitle(\"Distribution of Maths scores\") \n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  theme_dark() +\n  ggtitle(\"Distribution of Maths scores\") \n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  theme_light() +\n  ggtitle(\"Distribution of Maths scores\") \n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  theme_linedraw() +\n  ggtitle(\"Distribution of Maths scores\") \n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  theme_minimal() +\n  ggtitle(\"Distribution of Maths scores\") \n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  theme_void() +\n  ggtitle(\"Distribution of Maths scores\") \n\n\n\n\n\n\n\n\n\n\n\n\nRefer to this link to learn more about ggplot2 Themes\n\n2.4.1 Working with ggtheme package\nggthemes offers a collection of ggplot2 themes that replicate the style of plots from the likes of Edward Tufte, Stephen Few, FiveThirtyEight, The Economist, Stata, Excel, and The Wall Street Journal, among others.\nBelow are some of the examples of the different themes available.\nRefer here for the comprehensive list and descrptions of all available themes.\nInstall and load ggthemespackages\n\n\nCode\ninstall.packages(\"ggthemes\")\nlibrary(ggthemes)\n\n\n\ntheme_economist()theme_wsj()theme_fivethirtyeight()theme_tufte()theme_excel()\n\n\n\n\nCode\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_economist()\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_wsj()\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_fivethirtyeight()\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_tufte()\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_excel()\n\n\n\n\n\n\n\n\n\n\n\n\nRefer to this link to learn more about the ggplot2 themes\n\n\n2.4.2 Working with hrbthemes package\nThe hrbrthemes package provides typography centric themes and theme components for ggplot2. This includes where labels are placed and the fonts used.\n\n\nShow the code\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum()\n\n\n\n\n\n\n\n\n\nThe second goal is to boost productivity in a production workflow, which is the intended setting for using the elements of hrbrthemes.\nRefer here to learn more.\n\n\nShow the code\ninstall.packages(\"hrbrthemes\")\nlibrary(hrbrthemes)\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum(axis_title_size = 18,\n              base_size = 15,\n              grid = \"Y\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWhat can we learn from the cde chunk above?\n\n\n\n\naxis_title_size: sets the font size of the axis title to 18\nbase_size: adjusts the default axis label size to 15\ngrid: remove the x-axis grid lines\n\n\n\n\n\n\n2.5 Beyond single graph\nCreating multiple graphs is often necessary to convey a compelling visual story. Several ggplot2 extensions offer functions for combining multiple graphs into a single figure.\nIn this section, we will learn how to create a composite/ combined plot by merging multiple graphs. First, let create three statistical graphics by using the codes below.\n\nHistogram 1 - distribution of Maths scoresHistogram 2 - distribution of English scoresScatterplot - English VS Maths scores\n\n\n\n\nShow the code\np1 &lt;- ggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") + \n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of Maths scores\")\n\np1\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\np2 &lt;- ggplot(data=exam_data, \n             aes(x = ENGLISH)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of English scores\")\n\np2\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\np3 &lt;- ggplot(data=exam_data, \n             aes(x= MATHS, \n                 y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              linewidth=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\np3\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nReplaced size=0.5 with linewidth-0.5 in the geom_smooth() function to align the code with the latest ggplot2 standards.\n\n\n\n\n\n\n\n2.5.1 Creating composits graphics: pathwork methods\nThere are several ggplot2 extension’s functions that support the preparation of composite figures such as grid.arrange() of gridExtra package and plot_grid() of cowplot package.\nIn this section, we will be using Patchwork, a ggplot2 extension specifically designed to combine multiple ggplot2 graphs into a single figure.\nThe Patchwork package offers a straightforward synatx, making it easy to create custom layouts. Key features include\n\nTwo column layouts using + operator\nSubplot grouping using () operator\nTwo-row layouts using / operator\nOne-row layout using | operator\n\n\n\nCode\ninstall.packages(\"patchwork\")\nlibrary(patchwork)\n\n\n\n\n2.5.2 Combining two ggplot2 graphs\n\nUsing + operatorUsing () operatorUsing / operator\n\n\n+ combines plots into a single row\n\n\nCode\np1+p2\n\n\n\n\n\n\n\n\n\n\n\n() use for grouping and layout adjustments\n\n\nCode\np1 + p2 + plot_layout(ncol=2,widths=c(1,2))\n\n\n\n\n\n\n\n\n\n\n\n/ use to stack plots into a single column\n\n\nCode\np1/p2\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2.5.3 Combining 2 or more ggplot2 graphs\nWe can also combine 2 or more ggplots graph in one composite figure.\n\nUsing +&|&() operator\n\n\n\n\nCode\n(p1/p2) | p3\n\n\n\n\n\n\n\n\n\nTo learn more about Patchwork, refer here\n\n\n\n\n\n2.5.4 Creating a composite figure with tag\nPatchwork also includes auto-tagging capabilities to label subplots within a figure, making it easier to identify them in text.\n\nNumeralsDigitsLettersCustomizing tags\n\n\n\n\nShow the code\n((p1 / p2) | p3) + \n  plot_annotation(tag_levels = 'I')\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\n((p1 / p2) | p3) + \n  plot_annotation(tag_levels = '1')\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\n((p1 / p2) | p3) + \n  plot_annotation(tag_levels = 'A')\n\n\n\n\n\n\n\n\n\n\n\n\nUsing either tag_prefix and/ or tag_suffix to format tags\nAdded the word “Figure” before each Roman numeral\n\n\n\nCode\n((p1 / p2) | p3) + \n  plot_annotation(tag_levels = \"I\", tag_prefix = \"Figure \", tag_suffix = \"\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2.5.5 Creating figure with insert\nIn addition to arranging plots side-by-side based on a specified layout, the Patchwork package provides the insert_element() function.\nThis allows user to freely place one or more plots or graphic elements over or below another plot, offering greater flexibility in design.\nRefer here for the insert_element documentation.\n\n\nCode\np3 + inset_element(p2, \n                   left = 0.02, \n                   bottom = 0.7, \n                   right = 0.5, \n                   top = 1)\n\n\n\n\n\n\n\n\n\n\n\n2.5.6 Creating a composite figure by using patchwork and ggtheme\nThe figure below is created by combining patchwork and the other ggthemes packages.\n\ntheme_econmist()theme_wsj()theme_fivethirtyeight()theme_tufte()theme_excel()\n\n\n\n\nCode\npatchwork &lt;- (p1 / p2) | p3\npatchwork & theme_economist() + \n  theme(plot.title=element_text(size =8),\n        axis.title.y=element_text(size = 9,\n                              angle = 0,\n                              vjust=0.9),\n        axis.title.x=element_text(size = 9))\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\npatchwork &lt;- (p1 / p2) | p3\npatchwork & theme_wsj() +\n  theme(plot.title=element_text(size =8),\n        axis.title.y=element_text(size = 9,\n                              angle = 0,\n                              vjust=0.9),\n        axis.title.x=element_text(size = 9))\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\npatchwork &lt;- (p1 / p2) | p3\npatchwork & theme_fivethirtyeight() +\n  theme(plot.title=element_text(size =8),\n        axis.title.y=element_text(size = 9,\n                              angle = 0,\n                              vjust=0.9),\n        axis.title.x=element_text(size = 9))\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\npatchwork &lt;- (p1 / p2) | p3\npatchwork & theme_tufte() +\n  theme(plot.title=element_text(size =8),\n        axis.title.y=element_text(size = 9,\n                              angle = 0,\n                              vjust=0.9),\n        axis.title.x=element_text(size = 9))\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\npatchwork &lt;- (p1 / p2) | p3\npatchwork & theme_excel() +\n  theme(plot.title=element_text(size =8),\n        axis.title.y=element_text(size = 9,\n                              angle = 0,\n                              vjust=0.9),\n        axis.title.x=element_text(size = 9))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nReduced the font size of the plot. title to 8 to improve plot’s readability\nReduced the font size of the axis.title.y to 9 and rotated the y-axis title to vertical (90 degrees) to improve plot’s readability\nLikewise, reduced the font size of the axis.title.x to 9 to improve plot’s readability\n\n\n\n\n\n\n2.6 References\n\nKam, T.S(2023). 2 Beyond ggplot2 Fundamentals\nggrepel\nggthemes\nhrbrthemes\nggplot tips: Arranging plots\nggplot2 Theme Elements Demostration\nggplot2 Theme Elements Reference Sheet\n\n\n2.6.1 Additional references\n\nQuarto_HTML_Code_Blocks\n\n\n\n\n2.7 Takeaway\n\n\n\n\n\n\nKey takeaways\n\n\n\n\nLearnt about the code-fold and code-summary chunk attributes to hide executable source code. where:\nValid values for code-fold include:\n\n\n\nValue\nBehavior\n\n\n\n\nfalse\nNo folding (default)\n\n\ntrue\nFold code (initially hidden)\n\n\nshow\nFold code (initially shown)\n\n\n\nLearnt about the different R packages\n\ninstall.packages(“readr”) library(readr)\ninstall.packages(“ggplot2”) library(ggplot2)\ninstall.packages(“ggrepel”) library(ggrepel)\ninstall.packages(“ggthemes”) library(ggthemes)\n\nEnhanced annotations with the use of ggrepeal - help to repel overlapping text labels, ensuring clear and readbable annotations\nIntroducing of professional themes with ggthemes and hrbrthemes - offer additional themes , geoms, and improved asthetics and typography.\nCombining plots with patchwork - allows for the creation of composite figures by combining multiple ggplot2 graphs together."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01.html",
    "href": "In-class_Ex/In-class_Ex01.html",
    "title": "In-class Exercise 01",
    "section": "",
    "text": "Welcome to my Tableau-tastic adventure!🚀, where raw data meets creativity and transforms into stunning dashboards! From bar charts to pie charts, we will be exploring the colorful world of Tableau, turning numbers into insights and dashboards into works of art.\nLeveraging on VizQL, the proprietary query language behind the Tableau product, with a few clicks, and simple drag-and-drop features, we can translates raw data into powerful visuals in just a few clicks!\nJoin me in the journey of turning data into art and numbers into stories worth sharing!"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01.html#welcome-to-my-tableau-page",
    "href": "In-class_Ex/In-class_Ex01.html#welcome-to-my-tableau-page",
    "title": "In-class Exercise 01",
    "section": "",
    "text": "Welcome to my Tableau-tastic adventure!🚀, where raw data meets creativity and transforms into stunning dashboards! From bar charts to pie charts, we will be exploring the colorful world of Tableau, turning numbers into insights and dashboards into works of art.\nLeveraging on VizQL, the proprietary query language behind the Tableau product, with a few clicks, and simple drag-and-drop features, we can translates raw data into powerful visuals in just a few clicks!\nJoin me in the journey of turning data into art and numbers into stories worth sharing!"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03a.html",
    "href": "Hands-on_Ex/Hands-on_Ex03a.html",
    "title": "Hands-on Exercise 03a",
    "section": "",
    "text": "With the assistance of ChatGPT"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03a.html#programming-interactive-data-visualisation-with-r",
    "href": "Hands-on_Ex/Hands-on_Ex03a.html#programming-interactive-data-visualisation-with-r",
    "title": "Hands-on Exercise 03a",
    "section": "3. Programming Interactive Data Visualisation with R",
    "text": "3. Programming Interactive Data Visualisation with R\n\n3.1 Learning outcome\nIn this exercise, we will be exploring how to create interactive data visualizations using the ggiraph and plotlyr packages.\n\n\n3.2 Getting started\nWe will check, install, and load the following R packages, if not already done so:\n\ngiraph: Adds interactivity to ggplot graphics.\nplotly: Enables interactive statistical plotting.\nDT: Provides an interface to the JavaScript library DataTables for interactive HTML tables.\ntidyverse: A collection of R packages for data science, including static graph creation.\npatchwork:Combines multiple ggplot2 graphs into a single figure.\n\n\n\nCode\npacman::p_load(ggiraph, plotly, \n               patchwork, DT, tidyverse) \n\n\n\n\n3.3 Importing data\nIn this section, we will use the read_csv() function from the readr package to import the Exam_data.csv file into R. The file will be loaded as a tibble data frame and saved as exam_data.\n\n\nCode\nexam_data &lt;- read_csv(\"data/Exam_data.csv\", show_col_types = FALSE)\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nThis section data is the same dataset used in Hands-on_Ex01 and Hands-on_Ex02\n\n\n\n\n\n3.4 Interactive data visualisation - ggiraph\nggiraph is an HTML widget and an extension of ggplot2, enabling interactive ggplot graphics. Interactivity is achieved using three key arguments:\n\nTooltip: Displays information when hovering over elements.\nOnclick: Executes a JavaScript function when elements are clicked.\nData_id: Associates elements with unique IDs for further interaction.\n\nIn Shiny applications, elements with data_id can be selected and manipulated on both the client and server sides. For more details, refer here.\n\n3.4.1 Tooltip effect with tooltip aesthetic\nThe code shows how to create an interactive statistical graph using the ggiraph package.\nIt consists of two steps:\n\nFirst, a ggplot object is created, and\nSecond, the girafe() function of ggiraph is used to convert it into an interactive SVG object.\n\n\n\nCode\np &lt;- ggplot(data=exam_data, \n       aes(x = ENGLISH)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE, \n    binwidth = 1, \n    method = \"histodot\") +\n  scale_y_continuous(NULL, \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nUnderstand the 2 steps\n\n1. An interactive version of ggplot2 geom (i.e. geom_dotplot_interactive()) will be used to create the basic graph.\n2. girafe() will be used to generate an svg object to be displayed on an html page.\n\n\n\n\n\n\n\n\n\nExtra\n\n\n\n\nAn SVG object is a scalable, resolution-independent graphic format used in ggiraph to render interactive plots with tooltips and click events in web-based applications.\n\n\n\n\n\n\n3.5 Interactivity\nNotice that by hovering the mouse pointer on the chart, the student’s ID will be displayed.\n\n\n\n\n\n\n\n3.5.1 Displaying multiple information on tooltip\nThe tooltip information can be customizable by including a list object as shown below.\nThe code below shows that the tooltip will reflect the Name and Class information from the ID and Class table respectively from the exam_data table.\n\n\nCode\nexam_data$tooltip &lt;- c(paste0(     \n  \"Name = \", exam_data$ID,         \n  \"\\n Class = \", exam_data$CLASS)) \n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = exam_data$tooltip), \n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 8,\n  height_svg = 8*0.618\n)\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe first three lines of code in the chunk create a new field named tooltip by combining the text from the ID and CLASS fields. This newly created tooltip field is then used to display tooltips in the plot.\n\n\n\n\n\n3.6 Interactivity with customizable tooltip\nNotice that by hovering the mouse pointer on the chart, the student’s ID and the classs details will be displayed.\n\n\n\n\n\n\n\n3.6.1 Customising tooltip style\nThe code below uses opts_tooltip() of ggiraph to customize the tooltip by adding css declarations.\n\nStyle 1Style 2Style 3\n\n\n\nTooltip aesthetic:Bold text with white background\nX axis: MATHS Score\nTooltip details: ID\n\n\n\nCode\ntooltip_css &lt;- \"background-color:white; #&lt;&lt;\nfont-style:bold; color:black;\" #&lt;&lt;\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = ID),                   \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(    #&lt;&lt;\n    opts_tooltip(    #&lt;&lt;\n      css = tooltip_css)) #&lt;&lt;\n)                                        \n\n\n\n\n\n\n\n\n\nTooltip aesthetic: Bold text with yellow background\nX axis: MATHS Score\nTooltip details: ID\n\n\n\nCode\ntooltip_css &lt;- \"background-color: yellow; \n                color: black; \n                font-weight: bold;\"\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = ID),                   \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(    #&lt;&lt;\n    opts_tooltip(    #&lt;&lt;\n      css = tooltip_css)) #&lt;&lt;\n)             \n\n\n\n\n\n\n\n\n\nTooltip aesthetic: Bold text with blue background\nX axis: ENGLISH Score\nTooltip details: Added “ID”, “CLASS”, “GENDER”, and “RACE” in tooltip\n\n\n\nCode\ntooltip_css &lt;- \"background-color: blue; \n                color: white; \n                font-weight: bold;\"\n\nexam_data$tooltip &lt;- c(paste0(     \n  \"ID = \", exam_data$ID,         \n  \"\\n Class = \", exam_data$CLASS,\n  \"\\n Gender = \", exam_data$GENDER,\n  \"\\n RACE = \", exam_data$RACE,\n  \"\\n English = \", exam_data$ENGLISH)) \n\np &lt;- ggplot(data=exam_data, \n       aes(x = ENGLISH)) +\n  geom_dotplot_interactive(\n    aes(tooltip = tooltip), \n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 8,\n  height_svg = 8*0.618,\n  options = list(\n    opts_tooltip(css = tooltip_css) # Pass the custom CSS for the tooltip\n  )\n)\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe paste0() function ensures that the column has no missing or has NA value, if not R raises the “argument is missing, with no default” error.\nAs we are using the same dataset as in Hands-on_Ex01 and Hands-on_Ex02, we have ensured that there are no NA values.\n\n\n\n\n\nRefer to “Customizing girafe objects” for instructions on customizing ggiraph visualizations.\n\n\n3.6.2 Displaying statistics on tooltip\nThe code chunk below shows an advanced method for customizing tooltips. It uses a function to calculate the 90% confidence interval of the mean, and the computed statistics are displayed in the tooltip.\n\nMaths score across racesMaths score across CLASSMaths score across GENDER\n\n\n\n\nCode\ntooltip &lt;- function(y, ymax, accuracy = .01) {\n  mean &lt;- scales::number(y, accuracy = accuracy)\n  sem &lt;- scales::number(ymax - y, accuracy = accuracy)\n  paste(\"Mean maths scores:\", mean, \"+/-\", sem)\n}\n\ngg_point &lt;- ggplot(data=exam_data, \n                   aes(x = RACE),\n) +\n  stat_summary(aes(y = MATHS, \n                   tooltip = after_stat(  \n                     tooltip(y, ymax))),  \n    fun.data = \"mean_se\", \n    geom = GeomInteractiveCol,  \n    fill = \"pink\"\n  ) +\n  stat_summary(aes(y = MATHS),\n    fun.data = mean_se,\n    geom = \"errorbar\", width = 0.2, linewidth = 0.2\n  )\n\ngirafe(ggobj = gg_point,\n       width_svg = 8,\n       height_svg = 8*0.618)\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nReplaced size=0.5 with linewidth-0.5 in the geom_smooth() function to align the code with the latest ggplot2 standards.\n\n\n\n\n\n\n\n\n\nConclusion\n\n\n\n\nThe Chinese group has the highest average Maths score compared to other groups.\nThe Malay group has the lowest average Maths score among the groups.\nNoticeable performance gap between the Chinese group (highest) and the Malay group (lowest), suggesting potential differences in educational performance across these groups.\n\n\n\n\n\n\n\nCode\nlibrary(ggplot2)\nlibrary(ggiraph)\nlibrary(scales)\n\ntooltip &lt;- function(y, ymax, accuracy = .01) {\n  mean &lt;- number(y, accuracy = accuracy)\n  sem &lt;- number(ymax - y, accuracy = accuracy)\n  paste(\"Mean maths scores:\", mean, \"+/-\", sem)\n}\n\ngg_point &lt;- ggplot(data = exam_data, \n                   aes(x = CLASS)) +  \n  stat_summary(aes(y = MATHS, \n                   tooltip = after_stat(\n                     tooltip(y, ymax))),  \n               fun.data = \"mean_se\", \n               geom = GeomInteractiveCol,  \n               fill = \"lightblue\") +  \n  stat_summary(aes(y = MATHS),\n               fun.data = mean_se,\n               geom = \"errorbar\", \n               width = 0.2, \n               linewidth = 0.2)\n\ngirafe(ggobj = gg_point,\n       width_svg = 8,\n       height_svg = 8 * 0.618)\n\n\n\n\n\n\n\n\n\n\n\n\nConclusion\n\n\n\n\nHighest Performance: Class 3A has the highest average Maths score among all classes.\nNoticeable decline in average Maths scores as you move from Class 3A to Class 3I.\nClass 3I has the lowest average Maths score, with a significant gap compared to Class 3A.\n\n\n\n\n\n\n\nCode\nlibrary(ggplot2)\nlibrary(ggiraph)\nlibrary(scales)\n\ntooltip &lt;- function(y, ymax, accuracy = .01) {\n  mean &lt;- number(y, accuracy = accuracy)\n  sem &lt;- number(ymax - y, accuracy = accuracy)\n  paste(\"Mean maths scores:\", mean, \"+/-\", sem)\n}\n\ngg_point &lt;- ggplot(data = exam_data, \n                   aes(x = GENDER)) +  \n  stat_summary(aes(y = MATHS, \n                   tooltip = after_stat(\n                     tooltip(y, ymax))),  \n               fun.data = \"mean_se\", \n               geom = GeomInteractiveCol,  \n               fill = \"lightgreen\") +  \n  stat_summary(aes(y = MATHS),\n               fun.data = mean_se,\n               geom = \"errorbar\", \n               width = 0.2, \n               linewidth = 0.2)\n\ngirafe(ggobj = gg_point,\n       width_svg = 8,\n       height_svg = 8 * 0.618)\n\n\n\n\n\n\n\n\n\n\n\n\nConclusion\n\n\n\n\nSimilar Performance: Both Female and Male groups have very similar average Maths scores, with minimal difference.\nNo Significant Gap: There is no significant performance gap between females and males in Maths scores.\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nThe same analysis can be applied to the “ENGLISH” and “SCIENCE” scores as well.\n\n\n\n\n\n\n\n\n3.6.3 Hover effect with data_id aesthetic\nThe code below shows another interactive feature of ggiraph, data_id.\n\n\nCode\np4 &lt;- ggplot(data=exam_data, \n       aes(x = SCIENCE)) +\n  geom_dotplot_interactive(           \n    aes(data_id = CLASS),             \n    stackgroups = TRUE,               \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p4,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618                      \n)                                        \n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nThe default value of the hover css is *hover_css = “fill:orange;”.\n\n\n\n\nAdded tooltip with more information: CLASS; SCIENCE score\nChanged histodots to lightgrey\nUsing opts_hover(css=\"fill:green;\"), changed the fill color of the dots to green when hovered over\n\n\n\n\n\n\n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over.\n\n\n3.6.4 Styling hover effect\nAnother highlighting effect: - Using opts_hover(css = \"fill: #202020;\"), changed the fill color of the dots to black when hovered over - Using opts_hover_inv(css = \"opacity:0.2;\") create the opacity of the dots\n\n\nCode\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n) \n\n\n\n\n\n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over.\n\n\n\n\n\n\nNote\n\n\n\n\nDifferent from previous example, in this example the ccs customisation request are encoded directly.\n\n\n\n\n\n3.6.5 Combining tooltip and hover effect\nBelow code will combine tooltip and hover effect on the interactive statistical graph:\n\n\nCode\n#| echo: true\n#| eval: false\n\np5 &lt;- ggplot(data=exam_data, \n       aes(x = SCIENCE)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = CLASS, \n        data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p5,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #E15841;\"),  \n    opts_hover_inv(css = \"opacity:0.1;\") \n  )                                      \n)\n\n\n\n\n\n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over. At the same time, the tooltip will show the CLASS.\n\n\n3.6.6 Click effect with onclick\nonclick argument of ggiraph provides hotlink interactivity on the web.\nThe code below shows an example of onclick.\nI have also incorprated both onclick and hover functionality together in an interactive plot using the ggiraph package.\n\n\nCode\nexam_data$onclick &lt;- sprintf(\n  \"window.open(\\\"%s%s\\\")\",\n  \"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school\",\n  as.character(exam_data$ID)\n)\n\np &lt;- ggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(\n      onclick = onclick,                 # Onclick functionality\n      tooltip = paste(\"ID:\", ID)         # Tooltip for hover functionality\n    ),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\",\n    fill = \"lightgreen\"                  # Default dot color\n  ) +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\n# Generate the interactive plot with hover and onclick\ngirafe(\n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6 * 0.618,\n  options = list(\n    opts_hover(css = \"fill: blue;\"),     # Change fill color on hover\n    opts_hover_inv(css = \"opacity:0.1;\") # Dim non-hovered elements\n  )\n)                                  \n\n\n\n\n\n\nInteractivity: Web document link with a data object will be displayed on the web browser upon mouse click.\nIn this case, upon clicking on the chart, it will bring user to the MOE SchoolFinder webpage.\n\n\n\n\n\n\nWarning\n\n\n\n\nNote that click actions must be a string column in the data set containing valid javascript instructions\n\n\n\n\n\n3.6.7 Coordinated multiple views with ggiraph\nThe data visualization below shows coordinated multiple views techniques.\nThe example demonstrates coordinated multiple views, where selecting a data point in one dotplot highlights the corresponding data point ID in the second visualization.\nTo implement this, the following strategy will be used: - Interactive functions from the ggiraph package will enable the creation of interative multiple views. - The patchwork function will be integrated within the girafe function to build the interactive coordinated multiple views.\n\n\nCode\np_1 &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +  \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\np_2 &lt;- ggplot(data=exam_data, \n       aes(x = SCIENCE)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") + \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\ngirafe(code = print(p_1 + p_2), \n       width_svg = 6,\n       height_svg = 3,\n       options = list(\n         opts_hover(css = \"fill: #800080;\"),\n         opts_hover_inv(css = \"opacity:0.2;\")\n         )\n       ) \n\n\n\n\n\n\nIn this case, the date_id is critical to link observations between plots and the tooltip aesthetic is optional but nice to have when we mouse over a point.\nAdded tooltip displaying the scores of MATHS and SCIENCE for each ID:\n\n\nCode\n# Plot 1: Maths Dotplot\np_1 &lt;- ggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID, \n        tooltip = paste(\"ID:\", ID, \"&lt;br&gt;Maths:\", MATHS)),  # Add tooltip for Maths\n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +  \n  coord_cartesian(xlim = c(0, 100)) + \n  scale_y_continuous(NULL, breaks = NULL)\n\n# Plot 2: Science Dotplot\np_2 &lt;- ggplot(data = exam_data, \n       aes(x = SCIENCE)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID, \n        tooltip = paste(\"ID:\", ID, \"&lt;br&gt;Science:\", SCIENCE)),  # Add tooltip for Science\n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") + \n  coord_cartesian(xlim = c(0, 100)) + \n  scale_y_continuous(NULL, breaks = NULL)\n\n# Combine plots and add interactivity\ngirafe(code = print(p_1 + p_2), \n       width_svg = 6,\n       height_svg = 3,\n       options = list(\n         opts_hover(css = \"fill: #800080;\"), \n         opts_hover_inv(css = \"opacity:0.2;\")\n       )\n)\n\n\n\n\n\n\n\n\n\n3.7 Interactive data visualization - plotly method\nPlotly’s R graphing library enables the creation of interactive web graphics using ggplot2 or a custom interface inspired by the grammar of graphics. Unlike other Plotly platforms, plotly for R is free and open-source, built on the MIT-licensed plotly.js JavaScript library.\nThere are two ways to create interactive graph by using plotly:\n\nplot_ly():A function in Plotly’s R library for building interactive visualizations from scratch.\nggplotly():A function that converts static ggplot2 visualizations into interactive Plotly graphics.\n\n\n3.7.1 Creating an interactive scatter plot: plot_ly() method\n\nPlot()Code()\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nplot_ly(data = exam_data, \n             x = ~MATHS, \n             y = ~ENGLISH)\n\n\n\n\n\n\n\n3.7.2 Working with visual variable: plot_ly() method\nThe color argument is added to a qualitative visual variable (e.g.: RACE)\n\nPlot()Code()\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nplot_ly(data = exam_data, \n        x = ~ENGLISH, \n        y = ~MATHS, \n        color = ~RACE)\n\n\n\n\n\n\n\n3.7.3 Creating an interactive scatter plot: ggplotly() method\nThe code plots an interactive scatter plot by using ggplotly().\n\nPlot()Code()\n\n\n\n\n\n\n\n\n\n\n\n\nCode\np &lt;- ggplot(data=exam_data, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nggplotly(p)\n\n\nThe only additional line required in the code chunk is ggplotly().\n\n\n\n\n\n3.7.4 Coordinated multiple views with plotly\nCreating a coordinated linked plot with plotly involves three key steps:\n\nShare Data: Use highlight_key]() from the Plotly package to create shared data.\nCreate Scatterplots: Generate two scatterplots using the ggplot2 functions.\nCombine Plots: Use subplot() from the Plotly package to arrange the plots side by side.\n\n\nPlot()Code()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nClick on a data point of one of the scatterplot and see how the corresponding point on the other scatterplot is selected.\n\n\n\n\n\n\n\nCode\nd &lt;- highlight_key(exam_data)\np1 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\np2 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = SCIENCE)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nsubplot(ggplotly(p1),\n        ggplotly(p2))\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nhighlight_key() creates an object of class crosstalk::SharedData\nVisit this link to learn more about crosstalk.\ncrosstalk::SharedData is a function provided by the Crosstalk package in R, which enables shared interactivity between multiple visualizations or widgets.\n\n\n\n\n\n\n\n\n\n3.8 Interactive data visualization - crosstalk methods!\nCrosstalk is an extension for the htmlwidgets package that provides classes, functions, and conventions to enable cross-widget interactions, such as linked brushing and filtering.\n\n3.8.1 Interactive data table: DT package\n\nDataTables is a wrapper for the JavaScript library DataTables, allowing R data objects to be displayed as interactive HTML tables.\nIt is commonly used in R Markdown or Shiny applications.\n\n\n\nCode\nDT::datatable(exam_data, class= \"compact\")\n\n\n\n\n\n\n\n\n3.8.2 Linked brushing: crosstalk method\n\nPlot()Code()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode below is used to implement the coordinated brushing shown:\n\n\nCode\nd &lt;- highlight_key(exam_data) \np &lt;- ggplot(d, \n            aes(ENGLISH, \n                MATHS)) + \n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\ngg &lt;- highlight(ggplotly(p),        \n                \"plotly_selected\")  \n\ncrosstalk::bscols(gg,               \n                  DT::datatable(d), \n                  widths = 5)        \n\n\n\n\n\n\n\n\nNote\n\n\n\nThings to learn: - [*highlight()]*(https://www.rdocumentation.org/packages/plotly/versions/4.10.4/topics/highlight) is a function of plotly package. It sets a variety of options for brushing (i.e., highlighting) multiple plots. These options are primarily designed for linking multiple plotly graphs, and may not behave as expected when linking plotly to another htmlwidget package via crosstalk. In some cases, other htmlwidgets will respect these options, such as persistent selection in leaflet.\n\nbscols() is a helper function of crosstalk package. It makes it easy to put HTML elements side by side. It can be called directly from the console but is especially designed to work in an R Markdown document. Warning: This will bring in all of Bootstrap!\n\n\n\n\n\n\n\n\n\n3.9 Reference\n\n3.9.1 ggiraph\nRefer here for the online version and useful articles of ggiraph. This link to download the pdf version of the reference guide.\n\nHow to Plot With Ggiraph\nInteractive map of France with ggiraph\nCustom interactive sunbursts with ggplot in R\nLink provides code example on how ggiraph is used to interactive graphs for Swiss Olympians - the solo specialists.\n\n\n\n3.9.2 plotly for R\n\nGetting Started with Plotly in R\nCollection of plotly R graphs are available via this link\nCarson Sievert (2020) Interactive web-based data visualization with R, plotly, and shiny, Chapman and Hall/CRC is the best resource to learn plotly for R. The online version is available via this link\nPlotly R Figure Reference provides a comprehensive discussion of each visual representations.\nPlotly R Library Fundamentals is a good place to learn the fundamental features of Plotly’s R API.\nGetting Started\nVisit this link for a very interesting implementation of gganimate by your senior.\nBuilding an animation step-by-step with gganimate.\nCreating a composite gif with multiple gganimate panels\n\n\n\n3.9.3 Overall reference\n\nKam, T.S. (2023).3 Programming Interactive Data Visualisation with R\n\n\n\n\n4.0 Takeaway\n\n\n\n\n\n\nKey takeaways\n\n\n\n\nKey packages used - ggiraph, plotly, DT,tidyverse,patchwork\nLearnt about interactive visualizations with ggiraph such as - Tooltip,Hover effects,Onclick actions, and coordinated views\nLearnt about interactive visualizations with plotly such as - using highlight_key()for shared data and subplot() to display coordinated views\nLearnt about crosstalk for cross-widget interaction such as - linked brushing and filtering\n\n\n\n\n\n5.0 Further exploration\n\nExploration of different types of interactive plots, apart from geom_dotplot_interative():\n\n\ngeom_bar_interactivegeom_density_interactive\n\n\nObservations:\n\nScore distribution:shows a right-skewed distribution, with a higher concentration of students scoring between 60 and 90 in MATHS.\nClass variability: With the tooltip tied to the CLASS variable, while hovering over the bars in the interactive chart, we can see that CLASS 3A dominate a high score ranges (i.e.: they excel in MATHS). Whereas, CLASS 3I students struggle in MATHS.\n\n\n\nCode\np &lt;- ggplot(data = exam_data, \n            aes(x = MATHS)) +\n  geom_bar_interactive(\n    aes(tooltip = CLASS, \n        data_id = CLASS), \n    width = 0.8\n  ) +\n  scale_y_continuous(NULL, breaks = NULL)\n\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6 * 0.618,\n  options = list(\n    opts_hover(css = \"fill: #202020;\"),\n    opts_hover_inv(css = \"opacity:0.2;\")\n  )\n)\n\n\n\n\n\n\n\n\nObservations:\n\nClass performance: Some classes, such as 3A and 3B, seem to have consistently higher scores compared to others like 3I and 3H.\nSpread of scores: Classes such as 3F and 3G show a broader spread of scores indicating a wider variation in student performance, as compared to 3B with a tighter range.\n\n\n\nCode\np &lt;- ggplot(data = exam_data, \n            aes(x = MATHS)) +\n  geom_density_interactive(\n    aes(tooltip = CLASS, \n        data_id = CLASS),\n    fill = \"#69b3a2\", \n    alpha = 0.5\n  ) +\n  scale_y_continuous(NULL, breaks = NULL)\n\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6 * 0.618,\n  options = list(\n    opts_hover(css = \"fill: #202020;\"),\n    opts_hover_inv(css = \"opacity:0.2;\")\n  )\n)\n\n\n\n\n\n\n\n\n\n\nUsing plot_ly method to explore setting of colors for interactive plot\n\n\nGraphCode\n\n\nObservations:\n\nPositive correlation: Positive relationship between MATHS and ENGLISH scores, as higher MATHS scores generally correspond to higher ENGLISH scores.\nClass grouping: Class 3A generally score higher in both subjects, Class 3I tend to have lower scores in both subjects.\nOutliers: A few students score relatively low in one subject while doing better in other.\n\n\n\n\n\n\n\n\n\n\n\nCode\nplot_ly(\n  data = exam_data,\n  x = ~MATHS,\n  y = ~ENGLISH,\n  type = 'scatter',\n  mode = 'markers',\n  color = ~CLASS,  # Dynamically color points based on CLASS\n  colors = colorRampPalette(c(\"blue\", \"green\", \"yellow\"))(length(unique(exam_data$CLASS))), \n  marker = list(\n    size = 10,  # Set marker size\n    opacity = 0.8  # Adjust transparency for better visual clarity\n  )\n) %&gt;%\n  layout(\n    title = \"Interactive Plot: MATHS vs ENGLISH Scores\",\n    xaxis = list(title = \"MATHS Scores\"),\n    yaxis = list(title = \"ENGLISH Scores\")\n  )\n\n\n\n\n\n\nUsing plot_ly method to explore setting of shapes for interactive plot\n\n\nGraphCode\n\n\nObservations:\n\nPositive Correlation: noticeable positive correlation between English and Math scores\nRacial Groups:\n\nChinese (green circles): Appears to be clustered among the top right corner, which suggests that most of the Chinese students performed well in both ENGLISH and MATHS scores\nMalay (blue squares): Appears to be concentrated around mid to lower ranges of ENGLISH and MATHS scores\nIndian (orange triangles): Appears less frequent, but appear in the middle range of scores\nOthers (pink crosses): Sparse, and distributed across the score ranges without clear clustering\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nTo assign different shapes for the points based on RACE variable in plot_ly, we used the symbol argument in addition to color.\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nplot_ly(data = exam_data, \n        x = ~ENGLISH, \n        y = ~MATHS, \n        color = ~RACE,       # Different colors for RACE\n        symbol = ~RACE)      # Different shapes for RACE\n\n\n\n\n\n\nUsing plot_ly method to explore coordinated multiple views with plotly - Maths score and Race\n\n\nGraphCode\n\n\nObservations:\nHistogram\n\nOverall distribution: Most students score between 60 to 80, indicating average performance\nRace-specific observations:\n\nChinese students dominate the higher score range\nMalay students fared broadly in score\nIndian students are concentrated in the middle range\nOthers contribute mostly in the mid-to-high ranges, and less frequent overall\n\n\nBox plot\n\nMedian score: Chinese students have the highest median, followed by Others, Malay, while Indian fared slightly lower.\nVariability in score: Malay students show the widest spread, while others have the most consistent performance.\n\n\n\n\n\n\n\n\n\n\n\nCode\n# Load required libraries\nlibrary(crosstalk)\nlibrary(plotly)\n\n# Ensure exam_data is a data frame\nexam_data &lt;- as.data.frame(exam_data)\n\n# Create a shared data object for interactivity\nshared_data &lt;- SharedData$new(exam_data)\n\n# Histogram for Overall Maths Scores (Colored by Race)\np1 &lt;- plot_ly(\n  data = shared_data,\n  x = ~MATHS,\n  color = ~RACE,\n  type = \"histogram\",\n  text = ~paste(\"Score:\", MATHS, \"&lt;br&gt;Race:\", RACE),  # Tooltip showing Maths Score and Race\n  hoverinfo = \"text\",  # Use the custom text for the tooltip\n  opacity = 0.7\n) %&gt;%\n  layout(\n    title = \"Overall Maths Scores Distribution\",\n    xaxis = list(\n      title = \"Maths Scores\",  # X-axis title\n      titlefont = list(size = 16),  # Larger font for better visibility\n      tickfont = list(size = 12)  # Tick label size\n    ),\n    yaxis = list(\n      title = \"Frequency\",  # Y-axis title\n      titlefont = list(size = 16),  # Larger font for better visibility\n      tickfont = list(size = 12)  # Tick label size\n    ),\n    barmode = \"stack\",  # Ensure legend is visible\n    showlegend = TRUE  # Enable legend\n  )\n\n# Box Plot for Maths Scores by Race\np2 &lt;- plot_ly(\n  data = shared_data,\n  x = ~RACE,\n  y = ~MATHS,\n  color = ~RACE,\n  type = \"box\",\n  text = ~paste(\"Race:\", RACE, \"&lt;br&gt;Score:\", MATHS),  # Tooltip showing Race and Score\n  hoverinfo = \"text\",  # Use the custom text for the tooltip\n  boxpoints = FALSE  # Removes points beside the boxplot\n) %&gt;%\n  layout(\n    title = \"Maths Scores Distribution by Race\",\n    xaxis = list(\n      title = \"Race\",  # X-axis title\n      titlefont = list(size = 16),  # Larger font for better visibility\n      tickfont = list(size = 12)  # Tick label size\n    ),\n    yaxis = list(\n      title = \"Maths Scores\",  # Y-axis title\n      titlefont = list(size = 16),  # Larger font for better visibility\n      tickfont = list(size = 12)  # Tick label size\n    ),\n    showlegend = FALSE  # Disable legend for the box plot\n  )\n\n# Combine the plots into a subplot with interactivity\nsubplot(p1, p2, nrows = 1, margin = 0.05) %&gt;%\n  highlight(on = \"plotly_click\", dynamic = TRUE)\n\n\n\n\n\ninstall.packages(“crosstalk”) library(crosstalk)\nlibrary(magrittr)"
  },
  {
    "objectID": "In-class_Ex/In-class_Outline.html",
    "href": "In-class_Ex/In-class_Outline.html",
    "title": "In-class Exercise 01",
    "section": "",
    "text": "Welcome to my Tableau-tastic adventure!🚀, where raw data meets creativity and transforms into stunning dashboards! From bar charts to pie charts, we will be exploring the colorful world of Tableau, turning numbers into insights and dashboards into works of art.\nLeveraging on VizQL, the proprietary query language behind the Tableau product, with a few clicks, and simple drag-and-drop features, we can translates raw data into powerful visuals in just a few clicks!\nJoin me in the journey of turning data into art and numbers into stories worth sharing!"
  },
  {
    "objectID": "In-class_Ex/In-class_Outline.html#welcome-to-my-tableau-page",
    "href": "In-class_Ex/In-class_Outline.html#welcome-to-my-tableau-page",
    "title": "In-class Exercise 01",
    "section": "",
    "text": "Welcome to my Tableau-tastic adventure!🚀, where raw data meets creativity and transforms into stunning dashboards! From bar charts to pie charts, we will be exploring the colorful world of Tableau, turning numbers into insights and dashboards into works of art.\nLeveraging on VizQL, the proprietary query language behind the Tableau product, with a few clicks, and simple drag-and-drop features, we can translates raw data into powerful visuals in just a few clicks!\nJoin me in the journey of turning data into art and numbers into stories worth sharing!"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03a.html#code-1",
    "href": "Hands-on_Ex/Hands-on_Ex03a.html#code-1",
    "title": "Hands-on Exercise 03a",
    "section": "Code()",
    "text": "Code()\n\n\nCode\nplot_ly(data = exam_data, \n        x = ~ENGLISH, \n        y = ~MATHS, \n        color = ~RACE)\n\n\n:::\n\n3.5 Further exploration\n\nExploration of different types of interactive plots, apart from geom_dotplot_interative():\n\n\ngeom_bar_interactivegeom_density_interactive\n\n\nObservations:\n\nScore distribution:shows a right-skewed distribution, with a higher concentration of students scoring between 60 and 90 in MATHS.\nClass variability: With the tooltip tied to the CLASS variable, while hovering over the bars in the interactive chart, we can see that CLASS 3A dominate a high score ranges (i.e.: they excel in MATHS). Whereas, CLASS 3I students struggle in MATHS.\n\n\n\nCode\np &lt;- ggplot(data = exam_data, \n            aes(x = MATHS)) +\n  geom_bar_interactive(\n    aes(tooltip = CLASS, \n        data_id = CLASS), \n    width = 0.8\n  ) +\n  scale_y_continuous(NULL, breaks = NULL)\n\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6 * 0.618,\n  options = list(\n    opts_hover(css = \"fill: #202020;\"),\n    opts_hover_inv(css = \"opacity:0.2;\")\n  )\n)\n\n\n\n\n\n\n\n\nObservations:\n\nClass performance: Some classes, such as 3A and 3B, seem to have consistently higher scores compared to others like 3I and 3H.\nSpread of scores: Classes such as 3F and 3G show a broader spread of scores indicating a wider variation in student performance, as compared to 3B with a tighter range.\n\n\n\nCode\np &lt;- ggplot(data = exam_data, \n            aes(x = MATHS)) +\n  geom_density_interactive(\n    aes(tooltip = CLASS, \n        data_id = CLASS),\n    fill = \"#69b3a2\", \n    alpha = 0.5\n  ) +\n  scale_y_continuous(NULL, breaks = NULL)\n\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6 * 0.618,\n  options = list(\n    opts_hover(css = \"fill: #202020;\"),\n    opts_hover_inv(css = \"opacity:0.2;\")\n  )\n)\n\n\n\n\n\n\n\n\n\n\nUsing plot_ly method to explore setting of colors and shapes for interactive plot\n\n\nGraphCode\n\n\nObservations:\n\nPositive correlation: Positive relationship between MATHS and ENGLISH scores, as higher MATHS scores generally correspond to higher ENGLISH scores.\nClass grouping: Class 3A generally score higher in both subjects, Class 3I tend to have lower scores in both subjects.\nOutliers: A few students score relatively low in one subject while doing better in other.\n\n\n\n\n\n\n\n\n\n\n\nCode\nplot_ly(\n  data = exam_data,\n  x = ~MATHS,\n  y = ~ENGLISH,\n  type = 'scatter',\n  mode = 'markers',\n  color = ~CLASS,  # Dynamically color points based on CLASS\n  colors = colorRampPalette(c(\"blue\", \"green\", \"yellow\"))(length(unique(exam_data$CLASS))), \n  marker = list(\n    size = 10,  # Set marker size\n    symbol = ~GENDER,  # Use GENDER to set different marker shapes\n    opacity = 0.8  # Adjust transparency for better visual clarity\n  )\n) %&gt;%\n  layout(\n    title = \"Interactive Plot: MATHS vs ENGLISH Scores\",\n    xaxis = list(title = \"MATHS Scores\"),\n    yaxis = list(title = \"ENGLISH Scores\")\n  )\n\n\n\n\n\n\nUsing plot_ly method to explore coordinated multiple views with plotly - Maths score and Race\n\n\nGraphCode\n\n\nObservations:\nHistogram\n\nOverall distribution: Most students score between 60 to 80, indicating average performance\nRace-specific observations:\n\nChinese students dominate the higher score range\nMalay students fared broadly in score\nIndian students are concentrated in the middle range\nOthers contribute mostly in the mid-to-high ranges, and less frequent overall\n\n\nBox plot\n\nMedian score: Chinese students have the highest median, followed by Malay, while Indian and Others are slightly lower.\nVariability in score: Malay students show the widest spread, while others have the most consistent performance.\n\n\n\n\n\n\n\n\n\n\n\nCode\n# Load required libraries\nlibrary(crosstalk)\nlibrary(plotly)\n\n# Ensure exam_data is a data frame\nexam_data &lt;- as.data.frame(exam_data)\n\n# Create a shared data object for interactivity\nshared_data &lt;- SharedData$new(exam_data)\n\n# Histogram for Overall Maths Scores (Colored by Race)\np1 &lt;- plot_ly(\n  data = shared_data,\n  x = ~MATHS,\n  color = ~RACE,\n  type = \"histogram\",\n  text = ~paste(\"Score:\", MATHS, \"&lt;br&gt;Race:\", RACE),  # Tooltip showing Maths Score and Race\n  hoverinfo = \"text\",  # Use the custom text for the tooltip\n  opacity = 0.7\n) %&gt;%\n  layout(\n    title = \"Overall Maths Scores Distribution\",\n    xaxis = list(\n      title = \"Maths Scores\",  # X-axis title\n      titlefont = list(size = 16),  # Larger font for better visibility\n      tickfont = list(size = 12)  # Tick label size\n    ),\n    yaxis = list(\n      title = \"Frequency\",  # Y-axis title\n      titlefont = list(size = 16),  # Larger font for better visibility\n      tickfont = list(size = 12)  # Tick label size\n    ),\n    barmode = \"stack\",  # Ensure legend is visible\n    showlegend = TRUE  # Enable legend\n  )\n\n# Box Plot for Maths Scores by Race\np2 &lt;- plot_ly(\n  data = shared_data,\n  x = ~RACE,\n  y = ~MATHS,\n  color = ~RACE,\n  type = \"box\",\n  text = ~paste(\"Race:\", RACE, \"&lt;br&gt;Score:\", MATHS),  # Tooltip showing Race and Score\n  hoverinfo = \"text\",  # Use the custom text for the tooltip\n  boxpoints = FALSE  # Removes points beside the boxplot\n) %&gt;%\n  layout(\n    title = \"Maths Scores Distribution by Race\",\n    xaxis = list(\n      title = \"Race\",  # X-axis title\n      titlefont = list(size = 16),  # Larger font for better visibility\n      tickfont = list(size = 12)  # Tick label size\n    ),\n    yaxis = list(\n      title = \"Maths Scores\",  # Y-axis title\n      titlefont = list(size = 16),  # Larger font for better visibility\n      tickfont = list(size = 12)  # Tick label size\n    ),\n    showlegend = FALSE  # Disable legend for the box plot\n  )\n\n# Combine the plots into a subplot with interactivity\nsubplot(p1, p2, nrows = 1, margin = 0.05) %&gt;%\n  highlight(on = \"plotly_click\", dynamic = TRUE)\n\n\n\n\n\ninstall.packages(“crosstalk”) library(crosstalk)\nlibrary(magrittr)"
  }
]