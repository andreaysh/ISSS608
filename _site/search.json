[
  {
    "objectID": "Take-home_Ex/Take-home_Ex01.html",
    "href": "Take-home_Ex/Take-home_Ex01.html",
    "title": "Take-home Exercise 01",
    "section": "",
    "text": "This analysis explores heart attack incidents in Japan, focusing on the differences in risk factors between youth and adult age groups. With the growing global prevalence of heart disease, understanding how age influences heart attack likelihood and identifying the strongest predictors are crucial for shaping targeted prevention strategies and healthcare interventions.\nThe dataset from Kaggle - Heart Attack in Japan Youth Vs Adult provides an opportunity to analyze these aspects, helping healthcare providers, policymakers, and researchers develop age-specific awareness campaigns, preventive measures, and resource allocation strategies tailored to reducing heart attack risks in Japan.\n\n\n\nUsing the Heart Attack in Japan: Youth vs. Adult dataset, this Take-home_Ex01 applies appropriate Exploratory Data Analysis (EDA) methods, using the tidyverse package and ggplot functions to:\n\nexplore how age influences the likelihood of heart attack incidents\nidentify the strongest predictors contributing to heart attack incidents\n\n\n\n\n\n\n\nThe following R packages will be loaded for this exercise using pacman::p_load():\n\nreadr: Part of a tidyverse package for fast and efficient reading of rectangular data (CSV, TSV, and other delimited files) into R\ndplyr: Part of a tidyverse package for efficient data manipulation, including filtering, selecting, mutating, summarizing, and grouping data in R\nggplot2: Part of a tidyverse package allowing for flexible and layered creation of complex plots\ntidyverse: A collection of R packages for data manipulation, visualization, and analysis\nknitr: Enables dynamic report generation with R Markdown\npatchwork: Combines multiple ggplot2 plots into a single layout\nggthemes: Provides additional themes and scales for ggplot2\nscales: Enhances visualization by formatting axes and legends in ggplot2\nggridges: Creates ridge plots for density visualization\nggpubr: Simplifies publication-ready ggplot2 visualizations\ngganimate: Adds animation capabilities to ggplot2 graphics\nggdist: Visualizes uncertainty and statistical distributions in ggplot2\nggtext: Enhances text rendering and formatting in ggplot2\nggalt: Provides additional geoms, including dumbbell plots and lollipop charts\ncowplot: Enhances ggplot2-based layouts and plot annotations\nggnewscale: Allows multiple color and fill scales in a single ggplot2 plot\nggrepel: Prevents overlapping text labels in ggplot2 plots\n\n\n\nCode\npacman::p_load(tidyverse, haven, knitr,\n               patchwork, ggthemes, scales,\n               ggridges, ggpubr, gganimate,\n               ggdist, ggtext, ggalt,\n               cowplot, ggnewscale)\n\n\n\n\n\n\n\n\nThe code chunk below imports the Heart Attack in Japan: Youth vs. Adult dataset, downloaded from Kaggle, using the read_csv() function from the readr package.\n\n\nCode\nheart_attack &lt;- read_csv(\"data/japan_heart_attack_dataset.csv\", show_col_types = FALSE)\n\nheart_attack\n\n\n# A tibble: 30,000 × 32\n     Age Gender Region Smoking_History Diabetes_History Hypertension_History\n   &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt;  &lt;chr&gt;           &lt;chr&gt;            &lt;chr&gt;               \n 1    56 Male   Urban  Yes             No               No                  \n 2    69 Male   Urban  No              No               No                  \n 3    46 Male   Rural  Yes             No               No                  \n 4    32 Female Urban  No              No               No                  \n 5    60 Female Rural  No              No               No                  \n 6    25 Female Rural  No              No               No                  \n 7    78 Male   Urban  No              Yes              Yes                 \n 8    38 Female Urban  Yes             No               No                  \n 9    56 Male   Rural  No              No               Yes                 \n10    75 Male   Urban  No              No               No                  \n# ℹ 29,990 more rows\n# ℹ 26 more variables: Cholesterol_Level &lt;dbl&gt;, Physical_Activity &lt;chr&gt;,\n#   Diet_Quality &lt;chr&gt;, Alcohol_Consumption &lt;chr&gt;, Stress_Levels &lt;dbl&gt;,\n#   BMI &lt;dbl&gt;, Heart_Rate &lt;dbl&gt;, Systolic_BP &lt;dbl&gt;, Diastolic_BP &lt;dbl&gt;,\n#   Family_History &lt;chr&gt;, Heart_Attack_Occurrence &lt;chr&gt;, Extra_Column_1 &lt;dbl&gt;,\n#   Extra_Column_2 &lt;dbl&gt;, Extra_Column_3 &lt;dbl&gt;, Extra_Column_4 &lt;dbl&gt;,\n#   Extra_Column_5 &lt;dbl&gt;, Extra_Column_6 &lt;dbl&gt;, Extra_Column_7 &lt;dbl&gt;, …\n\n\nThe dataset is structured as a tibble dataframe, containing 30,000 rows and 32 columns. Each observation represents an individual case, and the variables capture key medical and demographic information relevant to heart attack incidents across different age groups in Japan.\n\n\n\nWe will check the dataset using below\n\nglimpse(): provides a transposed overview of a dataset, showing variables and their types in a concise format.\nhead(): displays the first few rows of a dataset (default is 6 rows) to give a quick preview of the data.\nsummary(): generates a statistical summary of each variable, including measures like mean, median, and range for numeric data.\nduplicated():returns a logical vector indicating which elements or rows in a vector or data frame are duplicates.\ncolSums(is.na()): counts the number of missing values (NA) in each column of the data frame.\nspec(): use spec() to quickly inspect the column\n\n\nglimpse()head()summary()duplicated()colSum(is.na())spec())\n\n\n\n\nCode\nglimpse(heart_attack)\n\n\nRows: 30,000\nColumns: 32\n$ Age                     &lt;dbl&gt; 56, 69, 46, 32, 60, 25, 78, 38, 56, 75, 36, 40…\n$ Gender                  &lt;chr&gt; \"Male\", \"Male\", \"Male\", \"Female\", \"Female\", \"F…\n$ Region                  &lt;chr&gt; \"Urban\", \"Urban\", \"Rural\", \"Urban\", \"Rural\", \"…\n$ Smoking_History         &lt;chr&gt; \"Yes\", \"No\", \"Yes\", \"No\", \"No\", \"No\", \"No\", \"Y…\n$ Diabetes_History        &lt;chr&gt; \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"Yes\", \"No…\n$ Hypertension_History    &lt;chr&gt; \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"Yes\", \"No…\n$ Cholesterol_Level       &lt;dbl&gt; 186.4002, 185.1367, 210.6966, 211.1655, 223.81…\n$ Physical_Activity       &lt;chr&gt; \"Moderate\", \"Low\", \"Low\", \"Moderate\", \"High\", …\n$ Diet_Quality            &lt;chr&gt; \"Poor\", \"Good\", \"Average\", \"Good\", \"Good\", \"Go…\n$ Alcohol_Consumption     &lt;chr&gt; \"Low\", \"Low\", \"Moderate\", \"High\", \"High\", \"Hig…\n$ Stress_Levels           &lt;dbl&gt; 3.644786, 3.384056, 3.810911, 6.014878, 6.8068…\n$ BMI                     &lt;dbl&gt; 33.96135, 28.24287, 27.60121, 23.71729, 19.771…\n$ Heart_Rate              &lt;dbl&gt; 72.30153, 57.45764, 64.65870, 55.13147, 76.667…\n$ Systolic_BP             &lt;dbl&gt; 123.90209, 129.89331, 145.65490, 131.78522, 10…\n$ Diastolic_BP            &lt;dbl&gt; 85.68281, 73.52426, 71.99481, 68.21133, 92.902…\n$ Family_History          &lt;chr&gt; \"No\", \"Yes\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No…\n$ Heart_Attack_Occurrence &lt;chr&gt; \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\"…\n$ Extra_Column_1          &lt;dbl&gt; 0.40498852, 0.03627815, 0.85297888, 0.39085280…\n$ Extra_Column_2          &lt;dbl&gt; 0.43330004, 0.51256694, 0.21959083, 0.29684675…\n$ Extra_Column_3          &lt;dbl&gt; 0.62871236, 0.66839275, 0.61343656, 0.15572404…\n$ Extra_Column_4          &lt;dbl&gt; 0.70160955, 0.11552874, 0.50800995, 0.87025144…\n$ Extra_Column_5          &lt;dbl&gt; 0.49814235, 0.42381938, 0.90066981, 0.39035591…\n$ Extra_Column_6          &lt;dbl&gt; 0.007901312, 0.083932768, 0.227205241, 0.40318…\n$ Extra_Column_7          &lt;dbl&gt; 0.79458257, 0.68895108, 0.49634358, 0.74140891…\n$ Extra_Column_8          &lt;dbl&gt; 0.29077922, 0.83016364, 0.75210679, 0.22396813…\n$ Extra_Column_9          &lt;dbl&gt; 0.49719307, 0.63449028, 0.18150125, 0.32931387…\n$ Extra_Column_10         &lt;dbl&gt; 0.52199452, 0.30204337, 0.62918031, 0.14319054…\n$ Extra_Column_11         &lt;dbl&gt; 0.79965663, 0.04368285, 0.01827617, 0.90778075…\n$ Extra_Column_12         &lt;dbl&gt; 0.72239788, 0.45166789, 0.06322702, 0.54232201…\n$ Extra_Column_13         &lt;dbl&gt; 0.1487387, 0.8786714, 0.1465122, 0.9224606, 0.…\n$ Extra_Column_14         &lt;dbl&gt; 0.8340099, 0.5356022, 0.9972962, 0.6262165, 0.…\n$ Extra_Column_15         &lt;dbl&gt; 0.061632229, 0.617825340, 0.974455410, 0.22860…\n\n\n\n\n\n\nCode\nhead(heart_attack)\n\n\n# A tibble: 6 × 32\n    Age Gender Region Smoking_History Diabetes_History Hypertension_History\n  &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt;  &lt;chr&gt;           &lt;chr&gt;            &lt;chr&gt;               \n1    56 Male   Urban  Yes             No               No                  \n2    69 Male   Urban  No              No               No                  \n3    46 Male   Rural  Yes             No               No                  \n4    32 Female Urban  No              No               No                  \n5    60 Female Rural  No              No               No                  \n6    25 Female Rural  No              No               No                  \n# ℹ 26 more variables: Cholesterol_Level &lt;dbl&gt;, Physical_Activity &lt;chr&gt;,\n#   Diet_Quality &lt;chr&gt;, Alcohol_Consumption &lt;chr&gt;, Stress_Levels &lt;dbl&gt;,\n#   BMI &lt;dbl&gt;, Heart_Rate &lt;dbl&gt;, Systolic_BP &lt;dbl&gt;, Diastolic_BP &lt;dbl&gt;,\n#   Family_History &lt;chr&gt;, Heart_Attack_Occurrence &lt;chr&gt;, Extra_Column_1 &lt;dbl&gt;,\n#   Extra_Column_2 &lt;dbl&gt;, Extra_Column_3 &lt;dbl&gt;, Extra_Column_4 &lt;dbl&gt;,\n#   Extra_Column_5 &lt;dbl&gt;, Extra_Column_6 &lt;dbl&gt;, Extra_Column_7 &lt;dbl&gt;,\n#   Extra_Column_8 &lt;dbl&gt;, Extra_Column_9 &lt;dbl&gt;, Extra_Column_10 &lt;dbl&gt;, …\n\n\n\n\n\n\nCode\nsummary(heart_attack)\n\n\n      Age           Gender             Region          Smoking_History   \n Min.   :18.00   Length:30000       Length:30000       Length:30000      \n 1st Qu.:33.00   Class :character   Class :character   Class :character  \n Median :48.00   Mode  :character   Mode  :character   Mode  :character  \n Mean   :48.49                                                           \n 3rd Qu.:64.00                                                           \n Max.   :79.00                                                           \n Diabetes_History   Hypertension_History Cholesterol_Level Physical_Activity \n Length:30000       Length:30000         Min.   : 80.02    Length:30000      \n Class :character   Class :character     1st Qu.:179.55    Class :character  \n Mode  :character   Mode  :character     Median :199.77    Mode  :character  \n                                         Mean   :199.90                      \n                                         3rd Qu.:220.16                      \n                                         Max.   :336.86                      \n Diet_Quality       Alcohol_Consumption Stress_Levels         BMI       \n Length:30000       Length:30000        Min.   : 0.000   Min.   : 5.58  \n Class :character   Class :character    1st Qu.: 3.644   1st Qu.:21.63  \n Mode  :character   Mode  :character    Median : 4.993   Median :24.96  \n                                        Mean   : 5.002   Mean   :25.00  \n                                        3rd Qu.: 6.353   3rd Qu.:28.36  \n                                        Max.   :10.000   Max.   :46.10  \n   Heart_Rate      Systolic_BP      Diastolic_BP    Family_History    \n Min.   : 30.03   Min.   : 56.23   Min.   : 39.95   Length:30000      \n 1st Qu.: 63.25   1st Qu.:109.79   1st Qu.: 73.26   Class :character  \n Median : 69.95   Median :119.90   Median : 80.12   Mode  :character  \n Mean   : 69.98   Mean   :119.91   Mean   : 80.03                     \n 3rd Qu.: 76.66   3rd Qu.:130.02   3rd Qu.: 86.76                     \n Max.   :108.78   Max.   :178.77   Max.   :117.67                     \n Heart_Attack_Occurrence Extra_Column_1      Extra_Column_2     \n Length:30000            Min.   :0.0000071   Min.   :0.0000052  \n Class :character        1st Qu.:0.2533084   1st Qu.:0.2473606  \n Mode  :character        Median :0.5008204   Median :0.4961980  \n                         Mean   :0.5019388   Mean   :0.4978940  \n                         3rd Qu.:0.7505286   3rd Qu.:0.7473954  \n                         Max.   :0.9999654   Max.   :0.9999894  \n Extra_Column_3      Extra_Column_4      Extra_Column_5     \n Min.   :0.0000227   Min.   :0.0000934   Min.   :0.0001051  \n 1st Qu.:0.2483093   1st Qu.:0.2522110   1st Qu.:0.2518029  \n Median :0.4976104   Median :0.4976175   Median :0.5019871  \n Mean   :0.4981949   Mean   :0.5005952   Mean   :0.5014100  \n 3rd Qu.:0.7476807   3rd Qu.:0.7505662   3rd Qu.:0.7536569  \n Max.   :0.9999694   Max.   :0.9999869   Max.   :0.9999949  \n Extra_Column_6      Extra_Column_7      Extra_Column_8     \n Min.   :0.0000531   Min.   :0.0000678   Min.   :0.0000449  \n 1st Qu.:0.2559989   1st Qu.:0.2482839   1st Qu.:0.2509790  \n Median :0.5017726   Median :0.4988157   Median :0.4985698  \n Mean   :0.5027631   Mean   :0.4980753   Mean   :0.5003557  \n 3rd Qu.:0.7511886   3rd Qu.:0.7456378   3rd Qu.:0.7507293  \n Max.   :0.9998892   Max.   :0.9999900   Max.   :0.9999300  \n Extra_Column_9      Extra_Column_10     Extra_Column_11    \n Min.   :0.0000305   Min.   :0.0000133   Min.   :0.0000008  \n 1st Qu.:0.2502452   1st Qu.:0.2484256   1st Qu.:0.2538092  \n Median :0.4984491   Median :0.5031040   Median :0.5067589  \n Mean   :0.5002292   Mean   :0.5010694   Mean   :0.5044949  \n 3rd Qu.:0.7512186   3rd Qu.:0.7522686   3rd Qu.:0.7556257  \n Max.   :0.9999852   Max.   :0.9999928   Max.   :0.9999578  \n Extra_Column_12     Extra_Column_13     Extra_Column_14    \n Min.   :0.0000713   Min.   :0.0000204   Min.   :0.0000025  \n 1st Qu.:0.2505341   1st Qu.:0.2473108   1st Qu.:0.2482152  \n Median :0.5038609   Median :0.5041162   Median :0.4943841  \n Mean   :0.5008624   Mean   :0.5004557   Mean   :0.4976507  \n 3rd Qu.:0.7511780   3rd Qu.:0.7497094   3rd Qu.:0.7456212  \n Max.   :0.9999484   Max.   :0.9999451   Max.   :0.9999779  \n Extra_Column_15    \n Min.   :0.0000241  \n 1st Qu.:0.2482573  \n Median :0.5009406  \n Mean   :0.4999634  \n 3rd Qu.:0.7487379  \n Max.   :0.9999913  \n\n\n\n\n\n\nCode\nheart_attack[duplicated(heart_attack),]\n\n\n# A tibble: 0 × 32\n# ℹ 32 variables: Age &lt;dbl&gt;, Gender &lt;chr&gt;, Region &lt;chr&gt;, Smoking_History &lt;chr&gt;,\n#   Diabetes_History &lt;chr&gt;, Hypertension_History &lt;chr&gt;,\n#   Cholesterol_Level &lt;dbl&gt;, Physical_Activity &lt;chr&gt;, Diet_Quality &lt;chr&gt;,\n#   Alcohol_Consumption &lt;chr&gt;, Stress_Levels &lt;dbl&gt;, BMI &lt;dbl&gt;,\n#   Heart_Rate &lt;dbl&gt;, Systolic_BP &lt;dbl&gt;, Diastolic_BP &lt;dbl&gt;,\n#   Family_History &lt;chr&gt;, Heart_Attack_Occurrence &lt;chr&gt;, Extra_Column_1 &lt;dbl&gt;,\n#   Extra_Column_2 &lt;dbl&gt;, Extra_Column_3 &lt;dbl&gt;, Extra_Column_4 &lt;dbl&gt;, …\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nEnsure that there are no duplicated columns, if not will have to investigate further.\n\n\n\n\n\n\n\nCode\ncolSums(is.na(heart_attack))\n\n\n                    Age                  Gender                  Region \n                      0                       0                       0 \n        Smoking_History        Diabetes_History    Hypertension_History \n                      0                       0                       0 \n      Cholesterol_Level       Physical_Activity            Diet_Quality \n                      0                       0                       0 \n    Alcohol_Consumption           Stress_Levels                     BMI \n                      0                       0                       0 \n             Heart_Rate             Systolic_BP            Diastolic_BP \n                      0                       0                       0 \n         Family_History Heart_Attack_Occurrence          Extra_Column_1 \n                      0                       0                       0 \n         Extra_Column_2          Extra_Column_3          Extra_Column_4 \n                      0                       0                       0 \n         Extra_Column_5          Extra_Column_6          Extra_Column_7 \n                      0                       0                       0 \n         Extra_Column_8          Extra_Column_9         Extra_Column_10 \n                      0                       0                       0 \n        Extra_Column_11         Extra_Column_12         Extra_Column_13 \n                      0                       0                       0 \n        Extra_Column_14         Extra_Column_15 \n                      0                       0 \n\n\n\n\n\n\n\n\nNote\n\n\n\n\nEnsure that there are no NA values, if not will have to investigate further.\nPossibility to use drop_na() function to drop rows where any specified column contains a missing value.\n\n\n\n\n\n\n\nCode\nspec(heart_attack)\n\n\ncols(\n  Age = col_double(),\n  Gender = col_character(),\n  Region = col_character(),\n  Smoking_History = col_character(),\n  Diabetes_History = col_character(),\n  Hypertension_History = col_character(),\n  Cholesterol_Level = col_double(),\n  Physical_Activity = col_character(),\n  Diet_Quality = col_character(),\n  Alcohol_Consumption = col_character(),\n  Stress_Levels = col_double(),\n  BMI = col_double(),\n  Heart_Rate = col_double(),\n  Systolic_BP = col_double(),\n  Diastolic_BP = col_double(),\n  Family_History = col_character(),\n  Heart_Attack_Occurrence = col_character(),\n  Extra_Column_1 = col_double(),\n  Extra_Column_2 = col_double(),\n  Extra_Column_3 = col_double(),\n  Extra_Column_4 = col_double(),\n  Extra_Column_5 = col_double(),\n  Extra_Column_6 = col_double(),\n  Extra_Column_7 = col_double(),\n  Extra_Column_8 = col_double(),\n  Extra_Column_9 = col_double(),\n  Extra_Column_10 = col_double(),\n  Extra_Column_11 = col_double(),\n  Extra_Column_12 = col_double(),\n  Extra_Column_13 = col_double(),\n  Extra_Column_14 = col_double(),\n  Extra_Column_15 = col_double()\n)\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nEnsure that all variables are correctly classified by data type; recast variable types if needed.\nVariables are correctly classified - where categorical variables are classified as character, while continuous variables are classified as double.\n\n\n\n\n\n\nThe heart_attack tibble contains 32 attributes, as shown above.\nThe following preprocessing checks were conducted as part of data preparation:\n\n\n\n\n\n\nPreprocessing Checks\n\n\n\n\nVerified that the correct data types were loaded in the heart_attack dataset using glimpse() and spec()\nEnsured there were no duplicate variable names using duplicated() in the dataset\nChecked for missing values using colSums(is.na())\n\n\n\n\n\n\nThe table below presents the metadata for the dataset, classifying each variable as either categorical or continuous based on its nature and data type.\n\nCategorical attributes:\n\n\n\n\n\n\n\n\nVariable Names\nType\nDescription\n\n\n\n\nGender\nCHAR\nBiological sex of the individual (e.g., Male, Female)\n\n\nRegion\nCHAR\nGeographic location where the individual resides (e.g., Urban, Rural)\n\n\nSmoking_History\nCHAR\nPast or current smoking habits (e.g., Yes, No)\n\n\nDiabetes_History\nCHAR\nHistory of diabetes diagnosis (Yes/No)\n\n\nHypertension_History\nCHAR\nHistory of high blood pressure diagnosis (Yes/No)\n\n\nPhysical_Activity\nCHAR\nLevel of physical activity (e.g., Low, Moderate, High)\n\n\nDiet_Quality\nCHAR\nDietary habits and nutritional intake assessment (e.g., Poor, Average, Good)\n\n\nAlcohol_Consumption\nCHAR\nFrequency or amount of alcohol intake (e.g., Low, Moderate, High, None)\n\n\nFamily_History\nCHAR\nPresence of heart disease in close relatives (Yes/No)\n\n\nHeart_Attack_Occurrence\nCHAR\nWhether the individual has experienced a heart attack (Yes/No)\n\n\n\nContinuous attributes:\n\n\n\n\n\n\n\n\nVariable Names\nType\nDescription\n\n\n\n\nAge\nNUM\nAge of the individual in years\n\n\nCholesterol_Level\nNUM\nMeasured cholesterol level in the blood\n\n\nStress_Levels\nNUM\nMeasured or self-reported stress level\n\n\nBMI\nNUM\nBody Mass Index, calculated from height and weight\n\n\nHeart_Rate\nNUM\nResting heart rate in beats per minute (bpm)\n\n\nSystolic_BP\nNUM\nSystolic blood pressure measurement (mmHg)\n\n\nDiastolic_BP\nNUM\nDiastolic blood pressure measurement (mmHg)\n\n\nExtra_Column_1\nNUM\n\n\n\nExtra_Column_2\nNUM\n\n\n\nExtra_Column_3\nNUM\n\n\n\nExtra_Column_4\nNUM\n\n\n\nExtra_Column_5\nNUM\n\n\n\nExtra_Column_6\nNUM\n\n\n\nExtra_Column_7\nNUM\n\n\n\nExtra_Column_8\nNUM\n\n\n\nExtra_Column_9\nNUM\n\n\n\nExtra_Column_10\nNUM\n\n\n\nExtra_Column_11\nNUM\n\n\n\nExtra_Column_12\nNUM\n\n\n\nExtra_Column_13\nNUM\n\n\n\nExtra_Column_14\nNUM\n\n\n\nExtra_Column_15\nNUM\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nNotice that Extra_Column_1 to Extra_Column_15 are additional numeric figures without clear definition.\nThey are most likely derived calculations from the variables.\n\n\n\n\n\n\nOf the 32 variables (columns), only 17 variables(columns) are selected for analysis\n\nAll columns are selected except for Extra_Column_1 to Extra_Column_15\n\nThe select() function in the dplyr package is used to obtain these rows, and stored as the R object, heart_attack_1.\n\n\nCode\nheart_attack_1 &lt;- heart_attack %&gt;% \n  select(\"Age\", \"Gender\", \"Region\", \"Smoking_History\", \"Diabetes_History\", \n         \"Hypertension_History\", \"Cholesterol_Level\", \"Physical_Activity\", \n         \"Diet_Quality\", \"Alcohol_Consumption\", \"Stress_Levels\", \"BMI\", \n         \"Heart_Rate\", \"Systolic_BP\", \"Diastolic_BP\", \"Family_History\", \n         \"Heart_Attack_Occurrence\")\n\nheart_attack_1\n\n\n# A tibble: 30,000 × 17\n     Age Gender Region Smoking_History Diabetes_History Hypertension_History\n   &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt;  &lt;chr&gt;           &lt;chr&gt;            &lt;chr&gt;               \n 1    56 Male   Urban  Yes             No               No                  \n 2    69 Male   Urban  No              No               No                  \n 3    46 Male   Rural  Yes             No               No                  \n 4    32 Female Urban  No              No               No                  \n 5    60 Female Rural  No              No               No                  \n 6    25 Female Rural  No              No               No                  \n 7    78 Male   Urban  No              Yes              Yes                 \n 8    38 Female Urban  Yes             No               No                  \n 9    56 Male   Rural  No              No               Yes                 \n10    75 Male   Urban  No              No               No                  \n# ℹ 29,990 more rows\n# ℹ 11 more variables: Cholesterol_Level &lt;dbl&gt;, Physical_Activity &lt;chr&gt;,\n#   Diet_Quality &lt;chr&gt;, Alcohol_Consumption &lt;chr&gt;, Stress_Levels &lt;dbl&gt;,\n#   BMI &lt;dbl&gt;, Heart_Rate &lt;dbl&gt;, Systolic_BP &lt;dbl&gt;, Diastolic_BP &lt;dbl&gt;,\n#   Family_History &lt;chr&gt;, Heart_Attack_Occurrence &lt;chr&gt;\n\n\nThe output shows a tibble dataframe with 30,000 rows and 17 columns.\n\n\n\n\n\nIn the following section, we will recode specific continuous variables into categorical groups for better interpretability. While variables like Cholesterol_Level, Stress_Levels, BMI, Heart_Rate, Systolic_BP, and Diastolic_BP provide valuable insights in their continuous form, categorizing them into meaningful groups will enhance our ability to analyze trends and risk factors more effectively.\n\n\n\n\n\n\n\n\nVariable Names\nMeasurement\nCategorical ranges Approximated classification based on best effort\n\n\n\n\nCholesterol_Level\nmg/dL\n\nLow: ≤ 150\nModerate: 151–200\nHigh: &gt; 200\n\n\n\nStress_Levels\nSelf-reported scale\n\nMiniminal Stress: 0 |\nLow Stress: 1–3\nModerate Stress: 4–7\nHigh Stress: 8–10\n\n\n\nBMI\nBody Mass Index\n\nUnderweight: &lt; 18.5\nNormal Weight: 18.5–24.9\nOverweight: 25–29.9\nObese: ≥ 30\n\n\n\nHeart_Rate\nbeats per minute\n\nBradycardia (Low): &lt; 60\nNormal: 60–100\nTachycardia (High): &gt; 100\n\n\n\nSystolic_BP\nmmHg\n\nNormal: &lt; 120\nElevated: 120–129\nHypertension Stage 1: 130–139\nHypertension Stage 2: ≥ 140\n\n\n\nDiastolic_BP\nmmHg\n\nNormal: &lt; 80\nElevated: 80–89\nHypertension Stage 1: 90–99\nHypertension Stage 2: ≥ 100\n\n\n\n\n\n\nCode\nlibrary(dplyr)\n\nheart_attack_1 &lt;- heart_attack %&gt;%\n  select(\"Age\", \"Gender\", \"Region\", \"Smoking_History\", \"Diabetes_History\", \n         \"Hypertension_History\", \"Cholesterol_Level\", \"Physical_Activity\", \n         \"Diet_Quality\", \"Alcohol_Consumption\", \"Stress_Levels\", \"BMI\", \n         \"Heart_Rate\", \"Systolic_BP\", \"Diastolic_BP\", \"Family_History\", \n         \"Heart_Attack_Occurrence\") %&gt;%\n  mutate(\n    Cholesterol_Level_Category = case_when(\n      Cholesterol_Level &lt;= 150 ~ \"Low\",\n      Cholesterol_Level &lt;= 200 ~ \"Moderate\",\n      TRUE ~ \"High\"\n    ),\n    \n    # **ROUND Stress_Levels before categorization**\n    Rounded_Stress_Levels = round(Stress_Levels), \n    \n    Stress_Levels_Category = case_when(\n      is.na(Rounded_Stress_Levels) ~ \"Unknown\",  # Handle missing values\n      Rounded_Stress_Levels == 0 ~ \"Minimal Stress\",\n      Rounded_Stress_Levels %in% 1:3 ~ \"Low Stress\",\n      Rounded_Stress_Levels %in% 4:7 ~ \"Moderate Stress\",\n      Rounded_Stress_Levels %in% 8:10 ~ \"High Stress\",\n      TRUE ~ \"Unknown\"\n    ),\n    \n    BMI_Category = case_when(\n      BMI &lt; 18.5 ~ \"Underweight\",\n      BMI &gt;= 18.5 & BMI &lt; 25 ~ \"Normal Weight\",\n      BMI &gt;= 25 & BMI &lt; 30 ~ \"Overweight\",\n      BMI &gt;= 30 ~ \"Obese\",\n      TRUE ~ \"Unknown\"\n    ),\n    \n    Heart_Rate_Category = case_when(\n      Heart_Rate &lt; 60 ~ \"Bradycardia (Low)\",\n      Heart_Rate &gt;= 60 & Heart_Rate &lt;= 100 ~ \"Normal\",\n      Heart_Rate &gt; 100 ~ \"Tachycardia (High)\",\n      TRUE ~ \"Unknown\"\n    ),\n    \n    Systolic_BP_Category = case_when(\n      Systolic_BP &lt; 120 ~ \"Normal\",\n      Systolic_BP &gt;= 120 & Systolic_BP &lt; 130 ~ \"Elevated\",\n      Systolic_BP &gt;= 130 & Systolic_BP &lt; 140 ~ \"Hypertension Stage 1\",\n      Systolic_BP &gt;= 140 ~ \"Hypertension Stage 2\",\n      TRUE ~ \"Unknown\"\n    ),\n    \n    Diastolic_BP_Category = case_when(\n      Diastolic_BP &lt; 80 ~ \"Normal\",\n      Diastolic_BP &gt;= 80 & Diastolic_BP &lt; 90 ~ \"Elevated\",\n      Diastolic_BP &gt;= 90 & Diastolic_BP &lt; 100 ~ \"Hypertension Stage 1\",\n      Diastolic_BP &gt;= 100 ~ \"Hypertension Stage 2\",\n      TRUE ~ \"Unknown\"\n    )\n  )\n\n# View the modified dataframe with new categorical variables\nheart_attack_1\n\n\n# A tibble: 30,000 × 24\n     Age Gender Region Smoking_History Diabetes_History Hypertension_History\n   &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt;  &lt;chr&gt;           &lt;chr&gt;            &lt;chr&gt;               \n 1    56 Male   Urban  Yes             No               No                  \n 2    69 Male   Urban  No              No               No                  \n 3    46 Male   Rural  Yes             No               No                  \n 4    32 Female Urban  No              No               No                  \n 5    60 Female Rural  No              No               No                  \n 6    25 Female Rural  No              No               No                  \n 7    78 Male   Urban  No              Yes              Yes                 \n 8    38 Female Urban  Yes             No               No                  \n 9    56 Male   Rural  No              No               Yes                 \n10    75 Male   Urban  No              No               No                  \n# ℹ 29,990 more rows\n# ℹ 18 more variables: Cholesterol_Level &lt;dbl&gt;, Physical_Activity &lt;chr&gt;,\n#   Diet_Quality &lt;chr&gt;, Alcohol_Consumption &lt;chr&gt;, Stress_Levels &lt;dbl&gt;,\n#   BMI &lt;dbl&gt;, Heart_Rate &lt;dbl&gt;, Systolic_BP &lt;dbl&gt;, Diastolic_BP &lt;dbl&gt;,\n#   Family_History &lt;chr&gt;, Heart_Attack_Occurrence &lt;chr&gt;,\n#   Cholesterol_Level_Category &lt;chr&gt;, Rounded_Stress_Levels &lt;dbl&gt;,\n#   Stress_Levels_Category &lt;chr&gt;, BMI_Category &lt;chr&gt;, …\n\n\n\n\n\nWhile analyzing age as a continuous variable provides detailed insights, categorizing the Age variable into distinct age groups allows us to explore how age influences the likelihood of heart attack incidents.\nThe table below are the proposed age categories for this analysis:\n\n\n\nCategories\nAge\n\n\n\n\nYouth\n≤25 years\n\n\nYoung adults\n26–40 years\n\n\nMiddle-aged adults\n41–55 years\n\n\nOlder adults\n56–70 years\n\n\nElderly\n≥71 years\n\n\n\n\n\nCode\nheart_attack_2 &lt;- heart_attack_1 %&gt;%\n  mutate(\n    Age_Category = case_when(\n      Age &lt;= 25 ~ \"Youth\",\n      Age &gt;= 26 & Age &lt;= 40 ~ \"Young Adult\",\n      Age &gt;= 41 & Age &lt;= 55 ~ \"Middle-Aged Adult\",\n      Age &gt;= 56 & Age &lt;= 70 ~ \"Older Adult\",\n      Age &gt;= 71 ~ \"Elderly\",\n      TRUE ~ \"Unknown\"\n    )\n  )\n\n# View the updated dataset\nheart_attack_2\n\n\n# A tibble: 30,000 × 25\n     Age Gender Region Smoking_History Diabetes_History Hypertension_History\n   &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt;  &lt;chr&gt;           &lt;chr&gt;            &lt;chr&gt;               \n 1    56 Male   Urban  Yes             No               No                  \n 2    69 Male   Urban  No              No               No                  \n 3    46 Male   Rural  Yes             No               No                  \n 4    32 Female Urban  No              No               No                  \n 5    60 Female Rural  No              No               No                  \n 6    25 Female Rural  No              No               No                  \n 7    78 Male   Urban  No              Yes              Yes                 \n 8    38 Female Urban  Yes             No               No                  \n 9    56 Male   Rural  No              No               Yes                 \n10    75 Male   Urban  No              No               No                  \n# ℹ 29,990 more rows\n# ℹ 19 more variables: Cholesterol_Level &lt;dbl&gt;, Physical_Activity &lt;chr&gt;,\n#   Diet_Quality &lt;chr&gt;, Alcohol_Consumption &lt;chr&gt;, Stress_Levels &lt;dbl&gt;,\n#   BMI &lt;dbl&gt;, Heart_Rate &lt;dbl&gt;, Systolic_BP &lt;dbl&gt;, Diastolic_BP &lt;dbl&gt;,\n#   Family_History &lt;chr&gt;, Heart_Attack_Occurrence &lt;chr&gt;,\n#   Cholesterol_Level_Category &lt;chr&gt;, Rounded_Stress_Levels &lt;dbl&gt;,\n#   Stress_Levels_Category &lt;chr&gt;, BMI_Category &lt;chr&gt;, …\n\n\n\n\n\nWe will re-check the dataset after filtering and recoding of continuous variables using below:\n\nglimpse()head()summary()duplicated()colSum(is.na())spec())\n\n\n\n\nCode\nglimpse(heart_attack_2)\n\n\nRows: 30,000\nColumns: 25\n$ Age                        &lt;dbl&gt; 56, 69, 46, 32, 60, 25, 78, 38, 56, 75, 36,…\n$ Gender                     &lt;chr&gt; \"Male\", \"Male\", \"Male\", \"Female\", \"Female\",…\n$ Region                     &lt;chr&gt; \"Urban\", \"Urban\", \"Rural\", \"Urban\", \"Rural\"…\n$ Smoking_History            &lt;chr&gt; \"Yes\", \"No\", \"Yes\", \"No\", \"No\", \"No\", \"No\",…\n$ Diabetes_History           &lt;chr&gt; \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"Yes\", …\n$ Hypertension_History       &lt;chr&gt; \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"Yes\", …\n$ Cholesterol_Level          &lt;dbl&gt; 186.4002, 185.1367, 210.6966, 211.1655, 223…\n$ Physical_Activity          &lt;chr&gt; \"Moderate\", \"Low\", \"Low\", \"Moderate\", \"High…\n$ Diet_Quality               &lt;chr&gt; \"Poor\", \"Good\", \"Average\", \"Good\", \"Good\", …\n$ Alcohol_Consumption        &lt;chr&gt; \"Low\", \"Low\", \"Moderate\", \"High\", \"High\", \"…\n$ Stress_Levels              &lt;dbl&gt; 3.644786, 3.384056, 3.810911, 6.014878, 6.8…\n$ BMI                        &lt;dbl&gt; 33.96135, 28.24287, 27.60121, 23.71729, 19.…\n$ Heart_Rate                 &lt;dbl&gt; 72.30153, 57.45764, 64.65870, 55.13147, 76.…\n$ Systolic_BP                &lt;dbl&gt; 123.90209, 129.89331, 145.65490, 131.78522,…\n$ Diastolic_BP               &lt;dbl&gt; 85.68281, 73.52426, 71.99481, 68.21133, 92.…\n$ Family_History             &lt;chr&gt; \"No\", \"Yes\", \"No\", \"No\", \"No\", \"No\", \"No\", …\n$ Heart_Attack_Occurrence    &lt;chr&gt; \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"…\n$ Cholesterol_Level_Category &lt;chr&gt; \"Moderate\", \"Moderate\", \"High\", \"High\", \"Hi…\n$ Rounded_Stress_Levels      &lt;dbl&gt; 4, 3, 4, 6, 7, 8, 5, 5, 7, 4, 3, 2, 2, 3, 8…\n$ Stress_Levels_Category     &lt;chr&gt; \"Moderate Stress\", \"Low Stress\", \"Moderate …\n$ BMI_Category               &lt;chr&gt; \"Obese\", \"Overweight\", \"Overweight\", \"Norma…\n$ Heart_Rate_Category        &lt;chr&gt; \"Normal\", \"Bradycardia (Low)\", \"Normal\", \"B…\n$ Systolic_BP_Category       &lt;chr&gt; \"Elevated\", \"Elevated\", \"Hypertension Stage…\n$ Diastolic_BP_Category      &lt;chr&gt; \"Elevated\", \"Normal\", \"Normal\", \"Normal\", \"…\n$ Age_Category               &lt;chr&gt; \"Older Adult\", \"Older Adult\", \"Middle-Aged …\n\n\n\n\n\n\nCode\nhead(heart_attack_2)\n\n\n# A tibble: 6 × 25\n    Age Gender Region Smoking_History Diabetes_History Hypertension_History\n  &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt;  &lt;chr&gt;           &lt;chr&gt;            &lt;chr&gt;               \n1    56 Male   Urban  Yes             No               No                  \n2    69 Male   Urban  No              No               No                  \n3    46 Male   Rural  Yes             No               No                  \n4    32 Female Urban  No              No               No                  \n5    60 Female Rural  No              No               No                  \n6    25 Female Rural  No              No               No                  \n# ℹ 19 more variables: Cholesterol_Level &lt;dbl&gt;, Physical_Activity &lt;chr&gt;,\n#   Diet_Quality &lt;chr&gt;, Alcohol_Consumption &lt;chr&gt;, Stress_Levels &lt;dbl&gt;,\n#   BMI &lt;dbl&gt;, Heart_Rate &lt;dbl&gt;, Systolic_BP &lt;dbl&gt;, Diastolic_BP &lt;dbl&gt;,\n#   Family_History &lt;chr&gt;, Heart_Attack_Occurrence &lt;chr&gt;,\n#   Cholesterol_Level_Category &lt;chr&gt;, Rounded_Stress_Levels &lt;dbl&gt;,\n#   Stress_Levels_Category &lt;chr&gt;, BMI_Category &lt;chr&gt;,\n#   Heart_Rate_Category &lt;chr&gt;, Systolic_BP_Category &lt;chr&gt;, …\n\n\n\n\n\n\nCode\nsummary(heart_attack_2)\n\n\n      Age           Gender             Region          Smoking_History   \n Min.   :18.00   Length:30000       Length:30000       Length:30000      \n 1st Qu.:33.00   Class :character   Class :character   Class :character  \n Median :48.00   Mode  :character   Mode  :character   Mode  :character  \n Mean   :48.49                                                           \n 3rd Qu.:64.00                                                           \n Max.   :79.00                                                           \n Diabetes_History   Hypertension_History Cholesterol_Level Physical_Activity \n Length:30000       Length:30000         Min.   : 80.02    Length:30000      \n Class :character   Class :character     1st Qu.:179.55    Class :character  \n Mode  :character   Mode  :character     Median :199.77    Mode  :character  \n                                         Mean   :199.90                      \n                                         3rd Qu.:220.16                      \n                                         Max.   :336.86                      \n Diet_Quality       Alcohol_Consumption Stress_Levels         BMI       \n Length:30000       Length:30000        Min.   : 0.000   Min.   : 5.58  \n Class :character   Class :character    1st Qu.: 3.644   1st Qu.:21.63  \n Mode  :character   Mode  :character    Median : 4.993   Median :24.96  \n                                        Mean   : 5.002   Mean   :25.00  \n                                        3rd Qu.: 6.353   3rd Qu.:28.36  \n                                        Max.   :10.000   Max.   :46.10  \n   Heart_Rate      Systolic_BP      Diastolic_BP    Family_History    \n Min.   : 30.03   Min.   : 56.23   Min.   : 39.95   Length:30000      \n 1st Qu.: 63.25   1st Qu.:109.79   1st Qu.: 73.26   Class :character  \n Median : 69.95   Median :119.90   Median : 80.12   Mode  :character  \n Mean   : 69.98   Mean   :119.91   Mean   : 80.03                     \n 3rd Qu.: 76.66   3rd Qu.:130.02   3rd Qu.: 86.76                     \n Max.   :108.78   Max.   :178.77   Max.   :117.67                     \n Heart_Attack_Occurrence Cholesterol_Level_Category Rounded_Stress_Levels\n Length:30000            Length:30000               Min.   : 0.000       \n Class :character        Class :character           1st Qu.: 4.000       \n Mode  :character        Mode  :character           Median : 5.000       \n                                                    Mean   : 4.998       \n                                                    3rd Qu.: 6.000       \n                                                    Max.   :10.000       \n Stress_Levels_Category BMI_Category       Heart_Rate_Category\n Length:30000           Length:30000       Length:30000       \n Class :character       Class :character   Class :character   \n Mode  :character       Mode  :character   Mode  :character   \n                                                              \n                                                              \n                                                              \n Systolic_BP_Category Diastolic_BP_Category Age_Category      \n Length:30000         Length:30000          Length:30000      \n Class :character     Class :character      Class :character  \n Mode  :character     Mode  :character      Mode  :character  \n                                                              \n                                                              \n                                                              \n\n\n\n\n\n\nCode\nheart_attack_2[duplicated(heart_attack_2),]\n\n\n# A tibble: 0 × 25\n# ℹ 25 variables: Age &lt;dbl&gt;, Gender &lt;chr&gt;, Region &lt;chr&gt;, Smoking_History &lt;chr&gt;,\n#   Diabetes_History &lt;chr&gt;, Hypertension_History &lt;chr&gt;,\n#   Cholesterol_Level &lt;dbl&gt;, Physical_Activity &lt;chr&gt;, Diet_Quality &lt;chr&gt;,\n#   Alcohol_Consumption &lt;chr&gt;, Stress_Levels &lt;dbl&gt;, BMI &lt;dbl&gt;,\n#   Heart_Rate &lt;dbl&gt;, Systolic_BP &lt;dbl&gt;, Diastolic_BP &lt;dbl&gt;,\n#   Family_History &lt;chr&gt;, Heart_Attack_Occurrence &lt;chr&gt;,\n#   Cholesterol_Level_Category &lt;chr&gt;, Rounded_Stress_Levels &lt;dbl&gt;, …\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nEnsure that there are no duplicated columns, if not will have to investigate further.\n\n\n\n\n\n\n\nCode\ncolSums(is.na(heart_attack_2))\n\n\n                       Age                     Gender \n                         0                          0 \n                    Region            Smoking_History \n                         0                          0 \n          Diabetes_History       Hypertension_History \n                         0                          0 \n         Cholesterol_Level          Physical_Activity \n                         0                          0 \n              Diet_Quality        Alcohol_Consumption \n                         0                          0 \n             Stress_Levels                        BMI \n                         0                          0 \n                Heart_Rate                Systolic_BP \n                         0                          0 \n              Diastolic_BP             Family_History \n                         0                          0 \n   Heart_Attack_Occurrence Cholesterol_Level_Category \n                         0                          0 \n     Rounded_Stress_Levels     Stress_Levels_Category \n                         0                          0 \n              BMI_Category        Heart_Rate_Category \n                         0                          0 \n      Systolic_BP_Category      Diastolic_BP_Category \n                         0                          0 \n              Age_Category \n                         0 \n\n\n\n\n\n\n\n\nNote\n\n\n\n\nEnsure that there are no NA values, if not will have to investigate further.\nPossibility to use drop_na() function to drop rows where any specified column contains a missing value.\n\n\n\n\n\n\n\nCode\nspec(heart_attack_2)\n\n\nNULL\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nEnsure that all variables are correctly classified by data type; recast variable types if needed.\nVariables are correctly classified - where categorical variables are classified as character, while continuous variables are classified as double.\n\n\n\n\n\n\n\n\n\n\n\n\nPreprocessing Checks\n\n\n\n\nVerified that the correct data types were loaded in the heart_attack dataset using glimpse() and spec()\nEnsured there were no duplicate variable names using duplicated() in the dataset\nChecked for missing values using colSums(is.na())\n\n\n\nThe final output - heart_attack_2 shows a tibble dataframe with 30,000 rows and 17 columns.\n\n\n\n\n\n\n\n\n\n\n\n\nImportant\n\n\n\nKey observations\n\nUneven representation of age groups\n\nNoticeably lower number of Youth (≤25 years) and Elderly (≥71 years) compared to the middle age groups\nYoung adults (26–40 years), middle-aged adults (41–55 years), and older adults (56–70 years) make up the majority of the dataset\n\nPotential bias in data collection\n\nUnderrepresentation of elderly individuals might inflate their heart attack rate in percentage-based analyses\nLow count of youth suggests they may be under-sampled\n\n\nWhat can we do:\n\nIn the future, ensure that the data collected are proportionally across all age groups\nCheck for potential sampling bias\nNormalize the heart attack rates based on the total population for each age group\n\n\n\n\nAbsolute age count()Visualization: Absolute age count()Count by Age_Category()Visualization: Age_Category()\n\n\n\n\nCode\n# Count the number of individuals by exact age\nage_distribution &lt;- heart_attack_2 %&gt;%\n  group_by(Age) %&gt;%\n  summarise(Count = n()) %&gt;%\n  arrange(Age)\n\n# Print age count\nprint(age_distribution)\n\n\n# A tibble: 62 × 2\n     Age Count\n   &lt;dbl&gt; &lt;int&gt;\n 1    18   478\n 2    19   480\n 3    20   483\n 4    21   483\n 5    22   468\n 6    23   462\n 7    24   466\n 8    25   493\n 9    26   480\n10    27   493\n# ℹ 52 more rows\n\n\n\n\n\n\nCode\nggplot(age_distribution, aes(x = Age, y = Count)) +\n  geom_bar(stat = \"identity\", fill = \"#78B3EA\", color = \"black\", alpha = 0.7) +\n  labs(title = \"Age Distribution of Individuals in Dataset\",\n       x = \"Age\",\n       y = \"Number of Individuals\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\n# Define age category levels in the required order\nage_levels &lt;- c(\n  \"Youth (≤25 years)\",\n  \"Young adults (26–40 years)\",\n  \"Older adults (56–70 years)\",\n  \"Middle-aged adults (41–55 years)\",\n  \"Elderly (≥71 years)\"\n)\n\n# Count individuals by Age Category with ordered factor levels\nage_category_distribution &lt;- heart_attack_2 %&gt;%\n  mutate(Age_Category = case_when(\n    Age &lt;= 25 ~ \"Youth (≤25 years)\",\n    Age &gt;= 26 & Age &lt;= 40 ~ \"Young adults (26–40 years)\",\n    Age &gt;= 41 & Age &lt;= 55 ~ \"Middle-aged adults (41–55 years)\",\n    Age &gt;= 56 & Age &lt;= 70 ~ \"Older adults (56–70 years)\",\n    Age &gt;= 71 ~ \"Elderly (≥71 years)\",\n    TRUE ~ \"Unknown\"\n  )) %&gt;%\n  group_by(Age_Category) %&gt;%\n  summarise(Count = n()) %&gt;%\n  mutate(Age_Category = factor(Age_Category, levels = age_levels)) %&gt;%  # Apply custom sorting\n  arrange(Age_Category)\n\n# Print age category count\nprint(age_category_distribution)\n\n\n# A tibble: 5 × 2\n  Age_Category                     Count\n  &lt;fct&gt;                            &lt;int&gt;\n1 Youth (≤25 years)                 3813\n2 Young adults (26–40 years)        7432\n3 Older adults (56–70 years)        7201\n4 Middle-aged adults (41–55 years)  7153\n5 Elderly (≥71 years)               4401\n\n\n\n\n\n\nCode\n# Visualization: Age Category Distribution\nggplot(age_category_distribution, aes(x = Age_Category, y = Count, fill = Age_Category)) +\n  geom_bar(stat = \"identity\", color = \"black\", alpha = 0.7) +\n  \n  # Add text labels above bars\n  geom_text(aes(label = Count), vjust = -0.5, color = \"black\", size = 2.5) +\n  \n  labs(title = \"Age Category Distribution in Dataset\",\n       x = \"Age Category\",\n       y = \"Number of Individuals\") +\n  \n  theme_minimal() +\n  scale_fill_brewer(palette = \"Set2\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nObservations:\n\nHeart Attacks Occur Across All Ages:\n\nHistogram shows a wide distribution of heart attack patients across various age groups\n\nAge Group Variation in Heart Attack Rates:\n\nHeart attack rate appears to be relatively stable across most age bins, ranging between 8.6% to 11.3%.\nHighest normalized heart attack rate is in the [73,78] age bin (~11.3%).\n\nSlight Increase in Middle-Aged & Elderly Groups:\n\nGradual increase in heart attack rates from younger groups to middle-aged adults - [43,48] (10.8%) and [48,53] (11.0%).\nHeart attack remains high in the older and elderly groups, suggesting that heart attack risk increases with age.\n\n\n\nCode()Graph()\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nThe cut()function was used to divide a continuous variable (like Age) into discrete intervals such as bins.\ncut() function is part of Base R, which does not require any additional packages to use.\n\n\n\n\n\nCode\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(tidyr)\n\n# Step 1: Remove any NA values in Age before binning\nheart_attack_2 &lt;- heart_attack_2 %&gt;%\n  filter(!is.na(Age)) %&gt;%  # Remove missing Age values\n  mutate(Age_Bin = cut(Age, \n                       breaks = seq(floor(min(Age, na.rm = TRUE)), \n                                    ceiling(max(Age, na.rm = TRUE)) + 5,  \n                                    by = 5), \n                       right = FALSE))  \n\n# Step 2: Count total individuals per age bin\ntotal_population &lt;- heart_attack_2 %&gt;%\n  group_by(Age_Bin) %&gt;%\n  summarise(Total_Count = n(), .groups = \"drop\")\n\n# Step 3: Count heart attack occurrences per age bin\nheart_attack_counts &lt;- heart_attack_2 %&gt;%\n  filter(Heart_Attack_Occurrence == \"Yes\") %&gt;%\n  group_by(Age_Bin) %&gt;%\n  summarise(Heart_Attack_Count = n(), .groups = \"drop\")\n\n# Step 4: Merge the two tables and replace NA values with 0\nnormalized_data &lt;- left_join(total_population, heart_attack_counts, by = \"Age_Bin\") %&gt;%\n  mutate(Heart_Attack_Count = replace_na(Heart_Attack_Count, 0),  # Replace NA counts with 0\n         Normalized_Heart_Attack_Rate = (Heart_Attack_Count / Total_Count) * 100) %&gt;%\n  filter(!is.na(Age_Bin))  # Ensure Age_Bin does not contain NA values\n\n# Step 5: Create the normalized histogram\nggplot(normalized_data, aes(x = Age_Bin, y = Normalized_Heart_Attack_Rate, fill = Age_Bin)) +\n  geom_bar(stat = \"identity\", color = \"black\", alpha = 0.7) +\n  \n  # Add text labels showing the percentage per bin\n  geom_text(aes(label = sprintf(\"%.1f%%\", Normalized_Heart_Attack_Rate)), vjust = -0.5, color = \"black\") +\n  \n  labs(title = \"Normalized Age Distribution of Heart Attack Patients\",\n       x = \"Age Groups (Binned by 5 Years)\",\n       y = \"Heart Attack Rate (Normalized, % of total in group)\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAnother point of view, categorizing ages into groups and calculating the heart attack rate for each group.\n\nCode()Graph()\n\n\n\n\nCode\n# Define Age Category Labels with Age Ranges\nage_labels &lt;- c(\n  \"Youth (≤25 years)\", \n  \"Young adults (26–40 years)\", \n  \"Middle-aged adults (41–55 years)\", \n  \"Older adults (56–70 years)\", \n  \"Elderly (≥71 years)\"\n)\n\n# Count total individuals per age category\ntotal_population &lt;- heart_attack_2 %&gt;%\n  group_by(Age_Category) %&gt;%\n  summarise(Total_Count = n())\n\n# Count heart attack occurrences per age category\nheart_attack_counts &lt;- heart_attack_2 %&gt;%\n  filter(Heart_Attack_Occurrence == \"Yes\") %&gt;%\n  group_by(Age_Category) %&gt;%\n  summarise(Heart_Attack_Count = n())\n\n# Merge both datasets and calculate the normalized heart attack rate\nnormalized_data &lt;- left_join(heart_attack_counts, total_population, by = \"Age_Category\") %&gt;%\n  mutate(Normalized_Heart_Attack_Rate = (Heart_Attack_Count / Total_Count) * 100) %&gt;%\n  \n  # Convert Age_Category into a factor with labels\n  mutate(Age_Category = factor(Age_Category, \n                               levels = c(\"Youth\", \"Young Adult\", \"Middle-Aged Adult\", \"Older Adult\", \"Elderly\"), \n                               labels = age_labels))\n\n# Create bar plot with normalized rates\nggplot(normalized_data, aes(x = Age_Category, y = Normalized_Heart_Attack_Rate, fill = Age_Category)) +\n  geom_bar(stat = \"identity\", color = \"black\", alpha = 0.7) +\n  \n  # Add data labels to show percentages\n  geom_text(aes(label = sprintf(\"%.1f%%\", Normalized_Heart_Attack_Rate)), vjust = -0.5, color = \"black\",size = 2.5) +\n  \n  labs(title = \"Normalized Heart Attack Rate by Age Group\",\n       x = \"Age Group\",\n       y = \"Heart Attack Rate (% of total in group)\",\n       fill = \"Age Categories (with Ranges)\") +  # Updated legend title\n  theme_minimal() +\n  scale_fill_brewer(palette = \"Set2\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1),\n        axis.text.y = element_text(size = 8))  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCh :::::"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01.html#overview",
    "href": "Take-home_Ex/Take-home_Ex01.html#overview",
    "title": "Take-home Exercise 01",
    "section": "",
    "text": "This analysis explores heart attack incidents in Japan, focusing on the differences in risk factors between youth and adult age groups. With the growing global prevalence of heart disease, understanding how age influences heart attack likelihood and identifying the strongest predictors are crucial for shaping targeted prevention strategies and healthcare interventions.\nThe dataset from Kaggle - Heart Attack in Japan Youth Vs Adult provides an opportunity to analyze these aspects, helping healthcare providers, policymakers, and researchers develop age-specific awareness campaigns, preventive measures, and resource allocation strategies tailored to reducing heart attack risks in Japan.\n\n\n\nUsing the Heart Attack in Japan: Youth vs. Adult dataset, this Take-home_Ex01 applies appropriate Exploratory Data Analysis (EDA) methods, using the tidyverse package and ggplot functions to:\n\nexplore how age influences the likelihood of heart attack incidents\nidentify the strongest predictors contributing to heart attack incidents"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ISSS608 - Visual Analytics and Applications",
    "section": "",
    "text": "The future of analytics"
  },
  {
    "objectID": "index.html#welcome-to-iss608---visual-analytics-and-applications-ay20242025-jan-class",
    "href": "index.html#welcome-to-iss608---visual-analytics-and-applications-ay20242025-jan-class",
    "title": "ISSS608 - Visual Analytics and Applications",
    "section": "Welcome to ISS608 - Visual Analytics and Applications, AY2024/2025 Jan class!",
    "text": "Welcome to ISS608 - Visual Analytics and Applications, AY2024/2025 Jan class!\n\nOverview\nThis page documents my learning journey of creating data visualization beyond default, using R and Tableau.This is part of the ISSS608 course by SMU MITB program, by Prof Kam Tin Seong\nIf you have any feedback or need any clarification, you may contact me at andrea.yeo.2023@mitb.smu.edu.sg\nI hope you enjoy it!\n\n\nLearning journey\nMy journey into programming felt like starring in a drama-comedy series\n- nervously stared at the code like it was ancient hieroglyphs\n- hours of debugging only to realize I missed a semicolon/indentation\n- the code worked (or so I thought).\n- proudly watching my quarto run smoothly… until the next bug sneaked in"
  },
  {
    "objectID": "index.html#find-out-what-i-have-learnt",
    "href": "index.html#find-out-what-i-have-learnt",
    "title": "ISSS608 - Visual Analytics and Applications",
    "section": "Find out what I have learnt",
    "text": "Find out what I have learnt\n\n\n\n\n\n\n\n\nIn-class Exercise\nHands-on Exercise\nTake-home Exercise"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04d.html",
    "href": "Hands-on_Ex/Hands-on_Ex04d.html",
    "title": "Hands-on Exercise 04d",
    "section": "",
    "text": "With the assistance of ChatGPT"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04d.html#funnel-plots-for-fair-comparisons",
    "href": "Hands-on_Ex/Hands-on_Ex04d.html#funnel-plots-for-fair-comparisons",
    "title": "Hands-on Exercise 04d",
    "section": "4. Funnel Plots for Fair Comparisons",
    "text": "4. Funnel Plots for Fair Comparisons\n\n4.1 Overview\nIn this exercise, we will be\n\nCreating funnel plots using the funnelPlotR package.\nDesigning static funnel plots with ggplot2.\nBuilding interactive funnel plots by combining plotly and ggplot2.\n\n\n\n4.2 Installing and launching R packages\nThe below are the R packages that will be used:\n\nreadr: For importing CSV files into R.\nFunnelPlotR: For generating funnel plots.\nggplot2: For manually creating funnel plots.\nknitr: For generating static HTML tables.\nplotly:For creating interactive funnel plots.\n\n\n\nCode\npacman::p_load(tidyverse, FunnelPlotR, plotly, knitr)\n\n\n\n\n4.3 Importing data\nWe will be using the COVID-19_DKI_Jakarta dataset, sourced from the Open Data Covid-19 Provinsi DKI Jakarta portal.\nIt focuses on comparing the cumulative COVID-19 cases and deaths by sub-district (kelurahan) as of 31st July 2021 in DKI Jakarta.\nThe code below imports the data into R and save it into a tibble data frame object called covid19\n\n\nCode\ncovid19 &lt;- read_csv(\"data/COVID-19_DKI_Jakarta.csv\") %&gt;%\n  mutate_if(is.character, as.factor)\n\nhead(covid19)\n\n\n# A tibble: 6 × 7\n  `Sub-district ID` City        District `Sub-district` Positive Recovered Death\n              &lt;dbl&gt; &lt;fct&gt;       &lt;fct&gt;    &lt;fct&gt;             &lt;dbl&gt;     &lt;dbl&gt; &lt;dbl&gt;\n1        3172051003 JAKARTA UT… PADEMAN… ANCOL              1776      1691    26\n2        3173041007 JAKARTA BA… TAMBORA  ANGKE              1783      1720    29\n3        3175041005 JAKARTA TI… KRAMAT … BALE KAMBANG       2049      1964    31\n4        3175031003 JAKARTA TI… JATINEG… BALI MESTER         827       797    13\n5        3175101006 JAKARTA TI… CIPAYUNG BAMBU APUS         2866      2792    27\n6        3174031002 JAKARTA SE… MAMPANG… BANGKA             1828      1757    26\n\n\nWe will check the dataset using below\n\nglimpse(): provides a transposed overview of a dataset, showing variables and their types in a concise format.\nhead(): displays the first few rows of a dataset (default is 6 rows) to give a quick preview of the data.\nsummary(): generates a statistical summary of each variable, including measures like mean, median, and range for numeric data.\nduplicated():returns a logical vector indicating which elements or rows in a vector or data frame are duplicates.\ncolSums(is.na()): counts the number of missing values (NA) in each column of the data frame.\nspec(): use spec() to quickly inspect the column\n\n\nglimpse()head()summary()duplicated()colSum(is.na(dataset))\n\n\n\n\nCode\nglimpse(covid19)\n\n\nRows: 267\nColumns: 7\n$ `Sub-district ID` &lt;dbl&gt; 3172051003, 3173041007, 3175041005, 3175031003, 3175…\n$ City              &lt;fct&gt; JAKARTA UTARA, JAKARTA BARAT, JAKARTA TIMUR, JAKARTA…\n$ District          &lt;fct&gt; PADEMANGAN, TAMBORA, KRAMAT JATI, JATINEGARA, CIPAYU…\n$ `Sub-district`    &lt;fct&gt; ANCOL, ANGKE, BALE KAMBANG, BALI MESTER, BAMBU APUS,…\n$ Positive          &lt;dbl&gt; 1776, 1783, 2049, 827, 2866, 1828, 2541, 3608, 2012,…\n$ Recovered         &lt;dbl&gt; 1691, 1720, 1964, 797, 2792, 1757, 2433, 3445, 1937,…\n$ Death             &lt;dbl&gt; 26, 29, 31, 13, 27, 26, 37, 68, 38, 52, 72, 28, 25, …\n\n\n\n\n\n\nCode\nhead(covid19)\n\n\n# A tibble: 6 × 7\n  `Sub-district ID` City        District `Sub-district` Positive Recovered Death\n              &lt;dbl&gt; &lt;fct&gt;       &lt;fct&gt;    &lt;fct&gt;             &lt;dbl&gt;     &lt;dbl&gt; &lt;dbl&gt;\n1        3172051003 JAKARTA UT… PADEMAN… ANCOL              1776      1691    26\n2        3173041007 JAKARTA BA… TAMBORA  ANGKE              1783      1720    29\n3        3175041005 JAKARTA TI… KRAMAT … BALE KAMBANG       2049      1964    31\n4        3175031003 JAKARTA TI… JATINEG… BALI MESTER         827       797    13\n5        3175101006 JAKARTA TI… CIPAYUNG BAMBU APUS         2866      2792    27\n6        3174031002 JAKARTA SE… MAMPANG… BANGKA             1828      1757    26\n\n\n\n\n\n\nCode\nsummary(covid19)\n\n\n Sub-district ID                     City              District  \n Min.   :3.101e+09   JAKARTA BARAT     :56   TAMBORA       : 11  \n 1st Qu.:3.172e+09   JAKARTA PUSAT     :44   KEBAYORAN BARU: 10  \n Median :3.173e+09   JAKARTA SELATAN   :65   CIPAYUNG      :  8  \n Mean   :3.172e+09   JAKARTA TIMUR     :65   JATINEGARA    :  8  \n 3rd Qu.:3.174e+09   JAKARTA UTARA     :31   KEMAYORAN     :  8  \n Max.   :3.175e+09   KAB.ADM.KEP.SERIBU: 6   SETIA BUDI    :  8  \n                                             (Other)       :214  \n       Sub-district    Positive      Recovered        Death       \n ANCOL       :  1   Min.   :  72   Min.   :  69   Min.   :  0.00  \n ANGKE       :  1   1st Qu.:1644   1st Qu.:1578   1st Qu.: 24.50  \n BALE KAMBANG:  1   Median :2420   Median :2329   Median : 39.00  \n BALI MESTER :  1   Mean   :2572   Mean   :2477   Mean   : 40.99  \n BAMBU APUS  :  1   3rd Qu.:3372   3rd Qu.:3242   3rd Qu.: 55.00  \n BANGKA      :  1   Max.   :6231   Max.   :5970   Max.   :158.00  \n (Other)     :261                                                 \n\n\n\n\n\n\nCode\ncovid19[duplicated(covid19),]\n\n\n# A tibble: 0 × 7\n# ℹ 7 variables: Sub-district ID &lt;dbl&gt;, City &lt;fct&gt;, District &lt;fct&gt;,\n#   Sub-district &lt;fct&gt;, Positive &lt;dbl&gt;, Recovered &lt;dbl&gt;, Death &lt;dbl&gt;\n\n\n\n\n\n\nCode\ncolSums(is.na(covid19))\n\n\nSub-district ID            City        District    Sub-district        Positive \n              0               0               0               0               0 \n      Recovered           Death \n              0               0 \n\n\n\n\nCode\nspec(covid19)\n\n\nNULL\n\n\n\n\n\nThe covid19 tibble contains seven attributes, as shown above:\n\nCategorical attributes: City, District, Sub-district\nContinuous attributes: Sub-district ID, Positive, Recovered, Death\n\n\n\n4.4 FunnelPlotR methods\nThe FunnelPlotR package uses ggplot2 to create funnel plots, requiring a numerator (events of interest), denominator (population), and a group. Key customization arguments include:\n\nlimit: Defines plot limits (95% or 99%).\nlabel_outliers: Labels outliers when set to TRUE or FALSE.\nPoisson_limits: Adds Poisson limits to the plot.\nOD_adjust: Adds overdispersed limits to the plot.\nxrange and yrange: Specify axis ranges, functioning like a zoom feature.\nAdditional aesthetics like graph titles, axis labels, and more.\n\n\n4.4.1 FunnelPlotR methods: The basic plot\nThe code below plots a funnel plot.\n\n\n\n\n\n\nThings to learn from the code\n\n\n\n\nThe group parameter differs from its use in scatterplots; here, it defines the level of data points to plot, such as Sub-district, District, or City. Selecting City results in only six data points.\nThe data_type argument defaults to “SR”, where “SR” stands for Standardized Ratio - used to compare the performance or outcomes of different groups.\n‘limit’ sets the plot limits, with accepted values of 95 or 99, representing 95% or 99.8% quantiles of the distribution.\n\n\n\n\nGraph()Code()\n\n\n\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 0 are outliers. \nPlot is adjusted for overdispersion. \n\n\n\n\n\n\nCode\nfunnel_plot(\n  .data = covid19,\n  numerator = Positive,\n  denominator = Death,\n  group = `Sub-district`\n)\n\n\n\n\n\n\nA funnel plot object with 267 points of which 0 are outliers.\nPlot is adjusted for overdispersion.\n\n\n\n4.4.2 FunnelPlotR methods: Makeover 1\n\n\n\n\n\n\nThings to learn from the code\n\n\n\n\n\ndata_type argument is used to change from default “SR” to “PR” (i.e. proportions).\n\n\nxrange and yrange are used to set the range of x-axis and y-axis\n\n\n\n\n\nGraph()Code()\n\n\n\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion. \n\n\n\n\n\n\nCode\nfunnel_plot(\n  .data = covid19,\n  numerator = Death,\n  denominator = Positive,\n  group = `Sub-district`,\n  data_type = \"PR\",     #&lt;&lt;\n  xrange = c(0, 6500),  #&lt;&lt;\n  yrange = c(0, 0.05)   #&lt;&lt;\n)\n\n\n\n\n\n\n\n4.4.3 FunnelPlotR methods: Makeover 2\nThe code below plots a funnel plot.\n\n\n\n\n\n\nThings to learn from the code\n\n\n\n\nlabel = NA: argument disables the default outlier labeling feature.\ntitle: argument adds a title to the plot.\nx_label and y_label: arguments are used to add or modify the titles of the x-axis and y-axis.\n\n\n\n\nGraph()Code()\n\n\n\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion. \n\n\n\n\n\n\nCode\nfunnel_plot(\n  .data = covid19,\n  numerator = Death,\n  denominator = Positive,\n  group = `Sub-district`,\n  data_type = \"PR\",   \n  xrange = c(0, 6500),  \n  yrange = c(0, 0.05),\n  label = NA,\n  title = \"Cumulative COVID-19 Fatality Rate by Cumulative Total Number of COVID-19 Positive Cases\", #&lt;&lt;           \n  x_label = \"Cumulative COVID-19 Positive Cases\", #&lt;&lt;\n  y_label = \"Cumulative Fatality Rate\"  #&lt;&lt;\n)\n\n\n\n\n\n\n\n\n4.5 Funnel plot for fair visual comparison\nIn this section, we will learn how to create funnel plots using ggplots.\n\n4.5.1 Computing the basic derived fields\nTo plot the funnel plot from scratch, we have to derive cumulative death rate and standard error of cumulative death rate.\n\n\nCode\ndf &lt;- covid19 %&gt;%\n  mutate(rate = Death / Positive) %&gt;%\n  mutate(rate.se = sqrt((rate*(1-rate)) / (Positive))) %&gt;%\n  filter(rate &gt; 0)\n\n\nThe fit.mean is computed using the code below:\n\n\nCode\nfit.mean &lt;- weighted.mean(df$rate, 1/df$rate.se^2)\n\n\n\n\n4.5.2 Calculate the lower and upper limit for 95% and 99% CI\nThe code below is used to compute the lower and upper limits for 95% confidence interval.\n\n\nCode\nnumber.seq &lt;- seq(1, max(df$Positive), 1)\nnumber.ll95 &lt;- fit.mean - 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ul95 &lt;- fit.mean + 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ll999 &lt;- fit.mean - 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ul999 &lt;- fit.mean + 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \ndfCI &lt;- data.frame(number.ll95, number.ul95, number.ll999, \n                   number.ul999, number.seq, fit.mean)\n\n\n\n\n4.5.3 Plotting a static funnel plot\nThe code below uses ggplot2 functions to plot a static funnel plot.\n\nGraph()Code()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\np &lt;- ggplot(df, aes(x = Positive, y = rate)) +\n  geom_point(aes(label=`Sub-district`), \n             alpha=0.4) +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ll95), \n            size = 0.4, \n            colour = \"grey40\", \n            linetype = \"dashed\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ul95), \n            size = 0.4, \n            colour = \"grey40\", \n            linetype = \"dashed\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ll999), \n            size = 0.4, \n            colour = \"grey40\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ul999), \n            size = 0.4, \n            colour = \"grey40\") +\n  geom_hline(data = dfCI, \n             aes(yintercept = fit.mean), \n             size = 0.4, \n             colour = \"grey40\") +\n  coord_cartesian(ylim=c(0,0.05)) +\n  annotate(\"text\", x = 1, y = -0.13, label = \"95%\", size = 3, colour = \"grey40\") + \n  annotate(\"text\", x = 4.5, y = -0.18, label = \"99%\", size = 3, colour = \"grey40\") + \n  ggtitle(\"Cumulative Fatality Rate by Cumulative Number of COVID-19 Cases\") +\n  xlab(\"Cumulative Number of COVID-19 Cases\") + \n  ylab(\"Cumulative Fatality Rate\") +\n  theme_light() +\n  theme(plot.title = element_text(size=12),\n        legend.position = c(0.91,0.85), \n        legend.title = element_text(size=7),\n        legend.text = element_text(size=7),\n        legend.background = element_rect(colour = \"grey60\", linetype = \"dotted\"),\n        legend.key.height = unit(0.3, \"cm\"))\np\n\n\n\n\n\n\n\n4.5.4 Interactive funnel plot: plotly + ggplot2\nWe can make the funnel plot interactive with ggplotly() of plotly r package.\n\nGraph()Code()\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nfp_ggplotly &lt;- ggplotly(p,\n  tooltip = c(\"label\", \n              \"x\", \n              \"y\"))\nfp_ggplotly\n\n\n\n\n\n\n\n\n4.6 References\n\nKam, T.S(2024). Visualising Uncertainty\nfunnelPlotR package.\nFunnel Plots for Indirectly-standardised ratios\nChanging funnel plot options\nggplot2 package\n\n\n\n4.8 Takeaway\n\n\n\n\n\n\nKey takeaways\n\n\n\n\nLearnt about the general concepts of funnel plots which as specialized data visualizations used for unbiased comparisons between entities like outlets, stores, or sub-districts. Can help to identify outliers by comparing performance metrics against expected variability.\nSome of the R packages used - FunnelPlotR,ggplot2,plotly,ggplot2,knitr etc.\nLearnt about funnel plot customization with R, using limit, label_outliers, poisson_limits,OD_adjust, xrange, yrange, title, x_label, and y_label etc. - Learnt that it is possible to convert static ggplot2 plots into interactive plots using ggplotly().\n\n\n\n\n\n4.9 Further exploration"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04b.html",
    "href": "Hands-on_Ex/Hands-on_Ex04b.html",
    "title": "Hands-on Exercise 04b",
    "section": "",
    "text": "With the assistance of ChatGPT"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04b.html#visualising-statistical-analysis",
    "href": "Hands-on_Ex/Hands-on_Ex04b.html#visualising-statistical-analysis",
    "title": "Hands-on Exercise 04b",
    "section": "4. Visualising Statistical Analysis",
    "text": "4. Visualising Statistical Analysis\n\n4.1 Learning outcome\nIn this hands-on exercise, we will be exploring:\n\nggstatsplot for creating statistical visualizations,\nperformance for visualizing model diagnostics, and\nparameters for visualizing model parameters.\n\n\n\n4.2 Visual Statistical Analysis with ggstatsplot\nggstatsplot extends ggplot2, integrating statistical test results directly into visualizations.\n\nOffers alternative statistical inference methods by default.\nEnsures best practices for statistical reporting, following APA standards for consistency.\nExample: Displays results from a robust t-test within the plot.\n\n\n\n4.3 Getting Started\n\n4.3.1 Installing and loading the packages\nWe will be using ggstatsplot and tidyverse packags.\n\n\nCode\npacman::p_load(ggstatsplot, tidyverse)\n\n\n\n\n4.3.2 Importing data\nIn this exercise, Exam_data.csv will be used. The `read_csv() function from the readr package is used to import the dataset into R and store it as a tibble data frame.\n\n\nCode\nexam &lt;- read_csv(\"data/Exam_data.csv\", show_col_types = FALSE)\n\n\n\n\nCode\nstat(exam)\n\n\n# A tibble: 322 × 7\n   ID         CLASS GENDER RACE    ENGLISH MATHS SCIENCE\n   &lt;chr&gt;      &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;     &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt;\n 1 Student321 3I    Male   Malay        21     9      15\n 2 Student305 3I    Female Malay        24    22      16\n 3 Student289 3H    Male   Chinese      26    16      16\n 4 Student227 3F    Male   Chinese      27    77      31\n 5 Student318 3I    Male   Malay        27    11      25\n 6 Student306 3I    Female Malay        31    16      16\n 7 Student313 3I    Male   Chinese      31    21      25\n 8 Student316 3I    Male   Malay        31    18      27\n 9 Student312 3I    Male   Malay        33    19      15\n10 Student297 3H    Male   Indian       34    49      37\n# ℹ 312 more rows\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nThis section data is the same dataset used in Hands-on_Ex01, Hands-on_Ex02, Hands-on_Ex03a, and Hands-on_Ex04a\n\n\n\n\n\n4.3.3 One-sample test: gghistostats() method\ngghistostats() will be used to build a visual of one-sample test on English scores.\n\n\nCode\nset.seed(1234)\n\ngghistostats(\n  data = exam,\n  x = ENGLISH,\n  type = \"bayes\",\n  test.value = 60,\n  xlab = \"English scores\"\n)\n\n\n\n\n\n\n\n\n\nDefault information: - statistical details - Bayes Factor - sample sizes - distribution summary\n\n\n4.3.4 Unpacking the Bayes Factor\n\nThe Bayes Factor quantifies the strength of evidence in favor of one hypothesis over another, comparing the alternative hypothesis (H₁) to the null hypothesis (H₀).\nIt helps evaluate data in support of the null hypothesis while incorporating external information.\nA common method for approximating the Bayes Factor is the Schwarz criterion.\n\n\n\n4.3.5 How to interpret Bayes Factor\nThe Bayes Factor (BF) is a positive number used to assess the strength of evidence for one hypothesis over another.\nRefer here for one of the most common interpretations of Bayes Factor, first proposed by Harold Jeffereys (1961) and slightly modified by Lee and Wagenmakers in 2013.\n\n\n\n4.3.6 Two-sample mean test: ggbetweenstats()\nThe code below, ggbetweenstats() is used to build a visual for two-sample mean test of Maths scores by gender.\n\n\nCode\nggbetweenstats(\n  data = exam,\n  x = GENDER, \n  y = MATHS,\n  type = \"np\",\n  messages = FALSE\n)\n\n\n\n\n\n\n\n\n\nDefault information: - statistical details - Bayes Factor - sample sizes - distribution summary\n\n\n4.3.7 Oneway ANOVA Test: ggbetweenstats()\nThe code below used ggbetweenstats() to build a visual for One-way ANOVA test on English score by race.\n\n\nCode\nggbetweenstats(\n  data = exam,\n  x = RACE, \n  y = ENGLISH,\n  type = \"p\",\n  mean.ci = TRUE, \n  pairwise.comparisons = TRUE, \n  pairwise.display = \"s\",\n  p.adjust.method = \"fdr\",\n  messages = FALSE\n)\n\n\n\n\n\n\n\n\n\nMeaning of the symbol function of ggbetweenstats():\n\n\n\nggbetweenstats() symbol arguments meaning\n\n\n\n\n\n\nSymbol\nMeaning\n\n\n\n\nns\npairwise.display - only non-significant\n\n\ns\npairwise.display- only significant\n\n\nall\npairwise.display - everything\n\n\np\ntype - Parametric tests (default)\n\n\nnp\ntype - Non-parametric tests (e.g., Kruskal-Wallis, Wilcoxon)\n\n\nr\ntype - Robust statistical tests (e.g., trimmed means ANOVA)\n\n\nbayes\ntype - Bayesian analysis for comparisons\n\n\n\n\n\n\n\n4.3.8 Significant test of correlation: ggscatterstats()\nThe code below, ggscatterstats() is used to build a visual for significant test of correlation between MATHS and ENGLISH scores\n\n\nCode\nggscatterstats(\n  data = exam,\n  x = MATHS,\n  y = ENGLISH,\n  marginal = FALSE,\n  )\n\n\n\n\n\n\n\n\n\n\n\n4.3.9 Significant test of association (dependence): ggbarstats()\nThe Maths scores is binned into 4-class variables using cut()\n\n\nCode\nexam1 &lt;- exam %&gt;% \n  mutate(MATHS_bins = \n           cut(MATHS, \n               breaks = c(0,60,75,85,100))\n)\n\n\nNext, ggbarstats() is used to build a visual for significant test of association\n\n\nCode\nggbarstats(exam1, \n           x = MATHS_bins, \n           y = GENDER)\n\n\n\n\n\n\n\n\n\n\n\n\n4.5 Getting Started\nThis section covers visualizing model diagnostics and parameters using the parameters package.\nThe Toyota Corolla case study will be used to build a model that identifies key factors influencing used car prices, considering various explanatory variables.\n\n\n4.6 Installing and loading the required libraries\n\n\nCode\npacman::p_load(readxl, performance, parameters, see)\n\n\n\n4.6.1 Importing Excel file using readxl methods\nThe code below will use read_xls() of readxl to import the data worksheet of ToyoyaCorolla.xls workbook into R.\n\n\nCode\ncar_resale &lt;- read_xls(\"data/ToyotaCorolla.xls\", \n                       \"data\")\ncar_resale\n\n\n# A tibble: 1,436 × 38\n      Id Model    Price Age_08_04 Mfg_Month Mfg_Year     KM Quarterly_Tax Weight\n   &lt;dbl&gt; &lt;chr&gt;    &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;  &lt;dbl&gt;         &lt;dbl&gt;  &lt;dbl&gt;\n 1    81 TOYOTA … 18950        25         8     2002  20019           100   1180\n 2     1 TOYOTA … 13500        23        10     2002  46986           210   1165\n 3     2 TOYOTA … 13750        23        10     2002  72937           210   1165\n 4     3  TOYOTA… 13950        24         9     2002  41711           210   1165\n 5     4 TOYOTA … 14950        26         7     2002  48000           210   1165\n 6     5 TOYOTA … 13750        30         3     2002  38500           210   1170\n 7     6 TOYOTA … 12950        32         1     2002  61000           210   1170\n 8     7  TOYOTA… 16900        27         6     2002  94612           210   1245\n 9     8 TOYOTA … 18600        30         3     2002  75889           210   1245\n10    44 TOYOTA … 16950        27         6     2002 110404           234   1255\n# ℹ 1,426 more rows\n# ℹ 29 more variables: Guarantee_Period &lt;dbl&gt;, HP_Bin &lt;chr&gt;, CC_bin &lt;chr&gt;,\n#   Doors &lt;dbl&gt;, Gears &lt;dbl&gt;, Cylinders &lt;dbl&gt;, Fuel_Type &lt;chr&gt;, Color &lt;chr&gt;,\n#   Met_Color &lt;dbl&gt;, Automatic &lt;dbl&gt;, Mfr_Guarantee &lt;dbl&gt;,\n#   BOVAG_Guarantee &lt;dbl&gt;, ABS &lt;dbl&gt;, Airbag_1 &lt;dbl&gt;, Airbag_2 &lt;dbl&gt;,\n#   Airco &lt;dbl&gt;, Automatic_airco &lt;dbl&gt;, Boardcomputer &lt;dbl&gt;, CD_Player &lt;dbl&gt;,\n#   Central_Lock &lt;dbl&gt;, Powered_Windows &lt;dbl&gt;, Power_Steering &lt;dbl&gt;, …\n\n\nThe output object car_resale is a tibble data frame.\nWe will check the dataset using below\n\nglimpse(): provides a transposed overview of a dataset, showing variables and their types in a concise format.\nhead(): displays the first few rows of a dataset (default is 6 rows) to give a quick preview of the data.\nsummary(): generates a statistical summary of each variable, including measures like mean, median, and range for numeric data.\nduplicated():returns a logical vector indicating which elements or rows in a vector or data frame are duplicates.\ncolSums(is.na()): counts the number of missing values (NA) in each column of the data frame.\nspec(): use spec() to quickly inspect the column\n\n\nglimpse()head()summary()duplicated()colSum(is.na(dataset))\n\n\n\n\nCode\nglimpse(car_resale)\n\n\nRows: 1,436\nColumns: 38\n$ Id               &lt;dbl&gt; 81, 1, 2, 3, 4, 5, 6, 7, 8, 44, 45, 46, 47, 49, 51, 6…\n$ Model            &lt;chr&gt; \"TOYOTA Corolla 1.6 5drs 1 4/5-Doors\", \"TOYOTA Coroll…\n$ Price            &lt;dbl&gt; 18950, 13500, 13750, 13950, 14950, 13750, 12950, 1690…\n$ Age_08_04        &lt;dbl&gt; 25, 23, 23, 24, 26, 30, 32, 27, 30, 27, 22, 23, 27, 2…\n$ Mfg_Month        &lt;dbl&gt; 8, 10, 10, 9, 7, 3, 1, 6, 3, 6, 11, 10, 6, 11, 11, 11…\n$ Mfg_Year         &lt;dbl&gt; 2002, 2002, 2002, 2002, 2002, 2002, 2002, 2002, 2002,…\n$ KM               &lt;dbl&gt; 20019, 46986, 72937, 41711, 48000, 38500, 61000, 9461…\n$ Quarterly_Tax    &lt;dbl&gt; 100, 210, 210, 210, 210, 210, 210, 210, 210, 234, 234…\n$ Weight           &lt;dbl&gt; 1180, 1165, 1165, 1165, 1165, 1170, 1170, 1245, 1245,…\n$ Guarantee_Period &lt;dbl&gt; 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,…\n$ HP_Bin           &lt;chr&gt; \"100-120\", \"&lt; 100\", \"&lt; 100\", \"&lt; 100\", \"&lt; 100\", \"&lt; 100…\n$ CC_bin           &lt;chr&gt; \"1600\", \"&gt;1600\", \"&gt;1600\", \"&gt;1600\", \"&gt;1600\", \"&gt;1600\", …\n$ Doors            &lt;dbl&gt; 5, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 5, 5, 3, 3,…\n$ Gears            &lt;dbl&gt; 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,…\n$ Cylinders        &lt;dbl&gt; 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,…\n$ Fuel_Type        &lt;chr&gt; \"Petrol\", \"Diesel\", \"Diesel\", \"Diesel\", \"Diesel\", \"Di…\n$ Color            &lt;chr&gt; \"Blue\", \"Blue\", \"Silver\", \"Blue\", \"Black\", \"Black\", \"…\n$ Met_Color        &lt;dbl&gt; 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1,…\n$ Automatic        &lt;dbl&gt; 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ Mfr_Guarantee    &lt;dbl&gt; 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1,…\n$ BOVAG_Guarantee  &lt;dbl&gt; 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ ABS              &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ Airbag_1         &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ Airbag_2         &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ Airco            &lt;dbl&gt; 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ Automatic_airco  &lt;dbl&gt; 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1,…\n$ Boardcomputer    &lt;dbl&gt; 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ CD_Player        &lt;dbl&gt; 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1,…\n$ Central_Lock     &lt;dbl&gt; 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ Powered_Windows  &lt;dbl&gt; 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ Power_Steering   &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ Radio            &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ Mistlamps        &lt;dbl&gt; 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ Sport_Model      &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1,…\n$ Backseat_Divider &lt;dbl&gt; 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ Metallic_Rim     &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ Radio_cassette   &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ Tow_Bar          &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n\n\n\n\n\n\nCode\nhead(car_resale)\n\n\n# A tibble: 6 × 38\n     Id Model      Price Age_08_04 Mfg_Month Mfg_Year    KM Quarterly_Tax Weight\n  &lt;dbl&gt; &lt;chr&gt;      &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt; &lt;dbl&gt;         &lt;dbl&gt;  &lt;dbl&gt;\n1    81 TOYOTA Co… 18950        25         8     2002 20019           100   1180\n2     1 TOYOTA Co… 13500        23        10     2002 46986           210   1165\n3     2 TOYOTA Co… 13750        23        10     2002 72937           210   1165\n4     3  TOYOTA C… 13950        24         9     2002 41711           210   1165\n5     4 TOYOTA Co… 14950        26         7     2002 48000           210   1165\n6     5 TOYOTA Co… 13750        30         3     2002 38500           210   1170\n# ℹ 29 more variables: Guarantee_Period &lt;dbl&gt;, HP_Bin &lt;chr&gt;, CC_bin &lt;chr&gt;,\n#   Doors &lt;dbl&gt;, Gears &lt;dbl&gt;, Cylinders &lt;dbl&gt;, Fuel_Type &lt;chr&gt;, Color &lt;chr&gt;,\n#   Met_Color &lt;dbl&gt;, Automatic &lt;dbl&gt;, Mfr_Guarantee &lt;dbl&gt;,\n#   BOVAG_Guarantee &lt;dbl&gt;, ABS &lt;dbl&gt;, Airbag_1 &lt;dbl&gt;, Airbag_2 &lt;dbl&gt;,\n#   Airco &lt;dbl&gt;, Automatic_airco &lt;dbl&gt;, Boardcomputer &lt;dbl&gt;, CD_Player &lt;dbl&gt;,\n#   Central_Lock &lt;dbl&gt;, Powered_Windows &lt;dbl&gt;, Power_Steering &lt;dbl&gt;,\n#   Radio &lt;dbl&gt;, Mistlamps &lt;dbl&gt;, Sport_Model &lt;dbl&gt;, Backseat_Divider &lt;dbl&gt;, …\n\n\n\n\n\n\nCode\nsummary(car_resale)\n\n\n       Id            Model               Price         Age_08_04    \n Min.   :   1.0   Length:1436        Min.   : 4350   Min.   : 1.00  \n 1st Qu.: 361.8   Class :character   1st Qu.: 8450   1st Qu.:44.00  \n Median : 721.5   Mode  :character   Median : 9900   Median :61.00  \n Mean   : 721.6                      Mean   :10731   Mean   :55.95  \n 3rd Qu.:1081.2                      3rd Qu.:11950   3rd Qu.:70.00  \n Max.   :1442.0                      Max.   :32500   Max.   :80.00  \n   Mfg_Month         Mfg_Year          KM         Quarterly_Tax   \n Min.   : 1.000   Min.   :1998   Min.   :     1   Min.   : 19.00  \n 1st Qu.: 3.000   1st Qu.:1998   1st Qu.: 43000   1st Qu.: 69.00  \n Median : 5.000   Median :1999   Median : 63390   Median : 85.00  \n Mean   : 5.549   Mean   :2000   Mean   : 68533   Mean   : 87.12  \n 3rd Qu.: 8.000   3rd Qu.:2001   3rd Qu.: 87021   3rd Qu.: 85.00  \n Max.   :12.000   Max.   :2004   Max.   :243000   Max.   :283.00  \n     Weight     Guarantee_Period    HP_Bin             CC_bin         \n Min.   :1000   Min.   : 3.000   Length:1436        Length:1436       \n 1st Qu.:1040   1st Qu.: 3.000   Class :character   Class :character  \n Median :1070   Median : 3.000   Mode  :character   Mode  :character  \n Mean   :1072   Mean   : 3.815                                        \n 3rd Qu.:1085   3rd Qu.: 3.000                                        \n Max.   :1615   Max.   :36.000                                        \n     Doors           Gears         Cylinders  Fuel_Type        \n Min.   :2.000   Min.   :3.000   Min.   :4   Length:1436       \n 1st Qu.:3.000   1st Qu.:5.000   1st Qu.:4   Class :character  \n Median :4.000   Median :5.000   Median :4   Mode  :character  \n Mean   :4.033   Mean   :5.026   Mean   :4                     \n 3rd Qu.:5.000   3rd Qu.:5.000   3rd Qu.:4                     \n Max.   :5.000   Max.   :6.000   Max.   :4                     \n    Color             Met_Color        Automatic       Mfr_Guarantee   \n Length:1436        Min.   :0.0000   Min.   :0.00000   Min.   :0.0000  \n Class :character   1st Qu.:0.0000   1st Qu.:0.00000   1st Qu.:0.0000  \n Mode  :character   Median :1.0000   Median :0.00000   Median :0.0000  \n                    Mean   :0.6748   Mean   :0.05571   Mean   :0.4095  \n                    3rd Qu.:1.0000   3rd Qu.:0.00000   3rd Qu.:1.0000  \n                    Max.   :1.0000   Max.   :1.00000   Max.   :1.0000  \n BOVAG_Guarantee       ABS            Airbag_1         Airbag_2     \n Min.   :0.0000   Min.   :0.0000   Min.   :0.0000   Min.   :0.0000  \n 1st Qu.:1.0000   1st Qu.:1.0000   1st Qu.:1.0000   1st Qu.:0.0000  \n Median :1.0000   Median :1.0000   Median :1.0000   Median :1.0000  \n Mean   :0.8955   Mean   :0.8134   Mean   :0.9708   Mean   :0.7228  \n 3rd Qu.:1.0000   3rd Qu.:1.0000   3rd Qu.:1.0000   3rd Qu.:1.0000  \n Max.   :1.0000   Max.   :1.0000   Max.   :1.0000   Max.   :1.0000  \n     Airco        Automatic_airco   Boardcomputer      CD_Player     \n Min.   :0.0000   Min.   :0.00000   Min.   :0.0000   Min.   :0.0000  \n 1st Qu.:0.0000   1st Qu.:0.00000   1st Qu.:0.0000   1st Qu.:0.0000  \n Median :1.0000   Median :0.00000   Median :0.0000   Median :0.0000  \n Mean   :0.5084   Mean   :0.05641   Mean   :0.2946   Mean   :0.2187  \n 3rd Qu.:1.0000   3rd Qu.:0.00000   3rd Qu.:1.0000   3rd Qu.:0.0000  \n Max.   :1.0000   Max.   :1.00000   Max.   :1.0000   Max.   :1.0000  \n  Central_Lock    Powered_Windows Power_Steering       Radio       \n Min.   :0.0000   Min.   :0.000   Min.   :0.0000   Min.   :0.0000  \n 1st Qu.:0.0000   1st Qu.:0.000   1st Qu.:1.0000   1st Qu.:0.0000  \n Median :1.0000   Median :1.000   Median :1.0000   Median :0.0000  \n Mean   :0.5801   Mean   :0.562   Mean   :0.9777   Mean   :0.1462  \n 3rd Qu.:1.0000   3rd Qu.:1.000   3rd Qu.:1.0000   3rd Qu.:0.0000  \n Max.   :1.0000   Max.   :1.000   Max.   :1.0000   Max.   :1.0000  \n   Mistlamps      Sport_Model     Backseat_Divider  Metallic_Rim   \n Min.   :0.000   Min.   :0.0000   Min.   :0.0000   Min.   :0.0000  \n 1st Qu.:0.000   1st Qu.:0.0000   1st Qu.:1.0000   1st Qu.:0.0000  \n Median :0.000   Median :0.0000   Median :1.0000   Median :0.0000  \n Mean   :0.257   Mean   :0.3001   Mean   :0.7702   Mean   :0.2047  \n 3rd Qu.:1.000   3rd Qu.:1.0000   3rd Qu.:1.0000   3rd Qu.:0.0000  \n Max.   :1.000   Max.   :1.0000   Max.   :1.0000   Max.   :1.0000  \n Radio_cassette      Tow_Bar      \n Min.   :0.0000   Min.   :0.0000  \n 1st Qu.:0.0000   1st Qu.:0.0000  \n Median :0.0000   Median :0.0000  \n Mean   :0.1455   Mean   :0.2779  \n 3rd Qu.:0.0000   3rd Qu.:1.0000  \n Max.   :1.0000   Max.   :1.0000  \n\n\n\n\n\n\nCode\ncar_resale[duplicated(car_resale),]\n\n\n# A tibble: 0 × 38\n# ℹ 38 variables: Id &lt;dbl&gt;, Model &lt;chr&gt;, Price &lt;dbl&gt;, Age_08_04 &lt;dbl&gt;,\n#   Mfg_Month &lt;dbl&gt;, Mfg_Year &lt;dbl&gt;, KM &lt;dbl&gt;, Quarterly_Tax &lt;dbl&gt;,\n#   Weight &lt;dbl&gt;, Guarantee_Period &lt;dbl&gt;, HP_Bin &lt;chr&gt;, CC_bin &lt;chr&gt;,\n#   Doors &lt;dbl&gt;, Gears &lt;dbl&gt;, Cylinders &lt;dbl&gt;, Fuel_Type &lt;chr&gt;, Color &lt;chr&gt;,\n#   Met_Color &lt;dbl&gt;, Automatic &lt;dbl&gt;, Mfr_Guarantee &lt;dbl&gt;,\n#   BOVAG_Guarantee &lt;dbl&gt;, ABS &lt;dbl&gt;, Airbag_1 &lt;dbl&gt;, Airbag_2 &lt;dbl&gt;,\n#   Airco &lt;dbl&gt;, Automatic_airco &lt;dbl&gt;, Boardcomputer &lt;dbl&gt;, CD_Player &lt;dbl&gt;, …\n\n\n\n\n\n\nCode\ncolSums(is.na(car_resale))\n\n\n              Id            Model            Price        Age_08_04 \n               0                0                0                0 \n       Mfg_Month         Mfg_Year               KM    Quarterly_Tax \n               0                0                0                0 \n          Weight Guarantee_Period           HP_Bin           CC_bin \n               0                0                0                0 \n           Doors            Gears        Cylinders        Fuel_Type \n               0                0                0                0 \n           Color        Met_Color        Automatic    Mfr_Guarantee \n               0                0                0                0 \n BOVAG_Guarantee              ABS         Airbag_1         Airbag_2 \n               0                0                0                0 \n           Airco  Automatic_airco    Boardcomputer        CD_Player \n               0                0                0                0 \n    Central_Lock  Powered_Windows   Power_Steering            Radio \n               0                0                0                0 \n       Mistlamps      Sport_Model Backseat_Divider     Metallic_Rim \n               0                0                0                0 \n  Radio_cassette          Tow_Bar \n               0                0 \n\n\n\n\nCode\nspec(car_resale)\n\n\nNULL\n\n\n\n\n\n\n\n4.6.2 Multiple Regression Model using lm()\nThe code used to calibrate a multiple linear regression model by using lm()of Base Stats of R.\n\n\nCode\nmodel &lt;- lm(Price ~ Age_08_04 + Mfg_Year + KM + \n              Weight + Guarantee_Period, data = car_resale)\nmodel\n\n\n\nCall:\nlm(formula = Price ~ Age_08_04 + Mfg_Year + KM + Weight + Guarantee_Period, \n    data = car_resale)\n\nCoefficients:\n     (Intercept)         Age_08_04          Mfg_Year                KM  \n      -2.637e+06        -1.409e+01         1.315e+03        -2.323e-02  \n          Weight  Guarantee_Period  \n       1.903e+01         2.770e+01  \n\n\n\n\n4.6.3 Multiple diagnostic: checking for multicolinearity:\nThe code below checks for multicolinearity using the check_colinearity() of performance package.\n\n\nCode\ncheck_collinearity(model)\n\n\n# Check for Multicollinearity\n\nLow Correlation\n\n             Term  VIF     VIF 95% CI Increased SE Tolerance Tolerance 95% CI\n               KM 1.46 [ 1.37,  1.57]         1.21      0.68     [0.64, 0.73]\n           Weight 1.41 [ 1.32,  1.51]         1.19      0.71     [0.66, 0.76]\n Guarantee_Period 1.04 [ 1.01,  1.17]         1.02      0.97     [0.86, 0.99]\n\nHigh Correlation\n\n      Term   VIF     VIF 95% CI Increased SE Tolerance Tolerance 95% CI\n Age_08_04 31.07 [28.08, 34.38]         5.57      0.03     [0.03, 0.04]\n  Mfg_Year 31.16 [28.16, 34.48]         5.58      0.03     [0.03, 0.04]\n\n\n\n\nCode\ncheck_c &lt;- check_collinearity(model)\nplot(check_c)\n\n\n\n\n\n\n\n\n\n\n\n4.6.4 Model diagnostic: checking normality assumption\nThe code below checks for normality using the check_normality() of performance package.\n\n\nCode\nmodel1 &lt;- lm(Price ~ Age_08_04 + KM + \n              Weight + Guarantee_Period, data = car_resale)\n\n\n\n\nCode\ncheck_n &lt;- check_normality(model1)\n\n\n\n\nCode\nplot(check_n)\n\n\n\n\n\n\n\n\n\n\n\n4.6.5 Model diagnostic: checking model for homogeneity of variances\nThe code below checks for homogeneity of variances using the check_heteroscedasticity() of performance package.\n\n\nCode\ncheck_h &lt;- check_heteroscedasticity(model1)\n\n\n\n\nCode\nplot(check_h)\n\n\n\n\n\n\n\n\n\n\n\n4.6.6 Model diagnostic: complete check\nWe can perform a complete check by using check_model()\n\n\nCode\ncheck_model(model1)\n\n\n\n\n\n\n\n\n\n\n\n4.6.7 Visualising regression parameters: see methods\nThe code below utilizes the plot() function from the see package and the parameters() function from the parameters package to visualize the parameters of a regression model.\n\n\nCode\nplot(parameters(model1))\n\n\n\n\n\n\n\n\n\n\n\n4.6.8 Visualising regression parameters: ggcoefstats() methods\n\n\nCode\nggcoefstats(model1, \n            output = \"plot\")\n\n\n\n\n\n\n\n\n\n\n\n\n4.7 References\n\nKam, T.S(2024). Visual Statistical Analysis.\n\n\n\n4.8 Takeaway\n\n\n\n\n\n\nKey takeaways\n\n\n\n\nLearnt that by combining plots with statistical summaries can improves data storytelling.\nLearnt that it is important to check for assumptions like multicollinearity, normality, and homoscedasticity before interpreting model results.\nKey R packages used - ggstatsplot, performance,parameters,and seeto perform visual statistical analyses and model diagnostics.\n\n\n\n\n\n4.9 Further exploration\n\nTo explore the distribution of MATHS Grades across different class\n\nColor gradient progresses smoothly from red to green, aligning with grade performance levels -\n\nGrade F –&gt; Red\nGrade D –&gt; Orange\nGrade C –&gt; Yellow\nGrade B –&gt; Light Green\nGrade A –&gt; Green\n\nObservations:\n\nClass 3A has the highest proportion of top scorers (Grade A).\nClass 3I has the most failing students (91% Grade F).\nClass 3F has the most balanced grade distribution.\n\n\nGraphCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nexam1 &lt;- exam %&gt;% \n  mutate(MATHS_bins = \n           cut(MATHS, \n               breaks = c(0, 49, 59, 69, 79, 100),  # 5 bins\n               labels = c(\"Grade F\", \"Grade D\", \"Grade C\", \"Grade B\", \"Grade A\"),  # Labels\n               right = TRUE)  # Include upper bound in interval\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTo explore demographics factors such as GENDER, RACE and CLASS affecting MATHS scores.\n\nDependent variables: MATHS score\nIndependent variable: GENDER, RACE, CLASS\n\nGraph - 3 predictorsCode - 3 predictors\n\n\nThe 3 predictors are - GENDER, RACE, CLASS\nObservations:\n\nModel fit\n\nBoth multiple R-squared (0.8033), and Adjusted R-squared (0.7957) shows a strong model fit\n\nImpact of GENDER on MATHS scores\n\nGENDERMale Coefficient: -0.00676\nNo significant difference in MATHS scores between male and female students.\n\nImpact of RACE on MATHS scores\n\nOnly Malay students -4.77578 (p = 8.37e-05) show a significant difference, performing worse on average\n\nImpact of CLASS on MATHS Scores\n\nSeveral CLASS categories have strong negative coefficients with high statistical significance (p &lt; 0.001) such as CLASS3I, CLASS3H, CLASS3G, CLASS3E, and CLASS3F\nClass Differences Are Critical, and it shows that Class assignment has the strongest and most significant impact on MATHS scores.\n\n\n\n\n\nCall:\nlm(formula = MATHS ~ GENDER + RACE + CLASS, data = exam)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-31.344  -4.985   0.023   5.399  32.226 \n\nCoefficients:\n             Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)  90.28726    1.51601  59.556  &lt; 2e-16 ***\nGENDERMale   -0.00676    1.02486  -0.007   0.9947    \nRACEIndian   -1.30523    2.76090  -0.473   0.6367    \nRACEMalay    -4.77578    1.19796  -3.987 8.37e-05 ***\nRACEOthers   -3.50495    3.14092  -1.116   0.2653    \nCLASS3B      -3.51440    2.06425  -1.703   0.0897 .  \nCLASS3C     -11.30379    2.04351  -5.532 6.77e-08 ***\nCLASS3D     -11.30251    2.07113  -5.457 9.94e-08 ***\nCLASS3E     -16.76621    2.08137  -8.055 1.74e-14 ***\nCLASS3F     -16.42073    2.08316  -7.883 5.54e-14 ***\nCLASS3G     -32.68651    2.18254 -14.976  &lt; 2e-16 ***\nCLASS3H     -42.93694    2.24643 -19.113  &lt; 2e-16 ***\nCLASS3I     -59.73049    2.49074 -23.981  &lt; 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 9.03 on 309 degrees of freedom\nMultiple R-squared:  0.8033,    Adjusted R-squared:  0.7957 \nF-statistic: 105.2 on 12 and 309 DF,  p-value: &lt; 2.2e-16\n\n\n\n\n\n\nCode\nmodel_demographics &lt;- lm(MATHS ~ GENDER + RACE + CLASS, data = exam)\n\n\n\n\nCode\nsummary(model_demographics)\n\n\n\n\n\n\nTo perform a complete diagnostic check on the regression model (above)\n\n\n\nCode\ncheck_model(model_demographics)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03b.html",
    "href": "Hands-on_Ex/Hands-on_Ex03b.html",
    "title": "Hands-on Exercise 03b",
    "section": "",
    "text": "With the assistance of ChatGPT"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03b.html#b.-programming-animated-statistical-graphics-with-r",
    "href": "Hands-on_Ex/Hands-on_Ex03b.html#b.-programming-animated-statistical-graphics-with-r",
    "title": "Hands-on Exercise 03b",
    "section": "3b. Programming animated statistical graphics with R",
    "text": "3b. Programming animated statistical graphics with R\n\n3.1 Overview\nIn this Hands-on exercise 03b, we will learn how to create engaging animated data visualizations using the gganimate and plotly R packages. We will also learn how to reshape data with the tidyr package and process, wrangle, and transform data with the dplyr package.\nOverall, animated graphics not only captivate the audience but also leave a lasting impression, making them an effective tool for visually-driven data storytelling.\n\n3.1.1 Basic concepts of animation\nAnimations in data visualization are created by generating a series of individual plots, each representing a subset of the data. These plots are then stitched together into sequential frames to create the illusion of motion, similar to a flipbook or traditional cartoons. The animated effect is driven by the transitions between data subsets over time.\n\n\n\n3.1.2 Terminology\nBefore creating an animated statistical graph, it’s important to understand key concepts:\n\nFrame: each frame represents a specific point in time or category, updating the graph’s data points as it changes.\nAnimation attributes: control the animation’s behavior, such as frame duration, easing functions for transitions, and whether the animation starts from the current frame or resets to the beginning.\n\n\n\n\n\n\n\nTo read\n\n\n\nConsider whether the effort is justified before creating animated graphs. For exploratory data analysis, animations may not be worth the time. However, in presentations, well-placed animations can significantly enhance audience engagement compared to static visuals.\n\n\n\n\n\n3.2 Getting started\n\n3.2.1 Loading the R packages\nFirst, we install and load the folliwing R packages:\n\nplotly: An R library for creating interactive statistical graphs.\ngganimate: A ggplot2 extension for making animated graphs\ngifski: A tool for converting video frames into high-quality animated GIFs using advanced palette and dithering techniques.\ngapminder: A dataset excerpt from Gapminder.org, often used for its country_colors schemes.\ntidyverse: A collection of modern R packages designed for data science tasks, including analysis, communication, and creating static graphs.\n\n\n\nCode\npacman::p_load(readxl, gifski, gapminder,\n               plotly, gganimate, tidyverse)\n\n\n\n\n3.2.2 Importing the data\nIn this hands-on exercise, the Data worksheet from GlobalPopulation Excel workbook will be used.\nImporting Data worksheet from GlobalPopulation Excel workbook by using appropriate R package from tidyverse family.\n\n\n\n\n\n\nNote\n\n\n\n\nread_xls(): Imports Excel worksheets, readxl package\nmutate_each_():Converts all character data types to factors, dplyr package\nmutate(): Converts the Year field values to integers, dplyr package\n\n\n\n\n\nCode\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate_each_(funs(factor(.)), col) %&gt;%\n  mutate(Year = as.integer(Year))\n\n\n\n\n\n\n\n\nWarning\n\n\n\n\nWarning: mutate_each_() was deprecated in dplyr 0.7.0.\nWarning: funs() was deprecated in dplyr 0.8.0.\n\n\n\nWe will re-write the code by using mutate_at() as shown below.\n’mutate(across())` can be used to derive the same outputs.\n\nmutate_at()mutate(across())\n\n\n\n\nCode\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate_at(col, as.factor) %&gt;%\n  mutate(Year = as.integer(Year))\n\n\n\n\n\n\nCode\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate(across(col, as.factor)) %&gt;%\n  mutate(Year = as.integer(Year))\n\n\n\n\n\n\n\n3.2.3 Inspecting the data\n\n\nCode\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\", sheet = \"Data\")\n\n\nWe will check the dataset using below\n\nglimpse(): provides a transposed overview of a dataset, showing variables and their types in a concise format.\nhead(): displays the first few rows of a dataset (default is 6 rows) to give a quick preview of the data.\nsummary(): generates a statistical summary of each variable, including measures like mean, median, and range for numeric data.\nduplicated():Returns a logical vector indicating which elements or rows in a vector or data frame are duplicates.\ncolSums(is.na()): Counts the number of missing values (NA) in each column of the data frame.\n\n\nglimpse()head()summary()duplicated()colSum(is.na(dataset))\n\n\n\n\nCode\nglimpse(globalPop)\n\n\nRows: 6,204\nColumns: 6\n$ Country    &lt;chr&gt; \"Afghanistan\", \"Afghanistan\", \"Afghanistan\", \"Afghanistan\",…\n$ Year       &lt;dbl&gt; 1996, 1998, 2000, 2002, 2004, 2006, 2008, 2010, 2012, 2014,…\n$ Young      &lt;dbl&gt; 83.6, 84.1, 84.6, 85.1, 84.5, 84.3, 84.1, 83.7, 82.9, 82.1,…\n$ Old        &lt;dbl&gt; 4.5, 4.5, 4.5, 4.5, 4.5, 4.6, 4.6, 4.6, 4.6, 4.7, 4.7, 4.7,…\n$ Population &lt;dbl&gt; 21559.9, 22912.8, 23898.2, 25268.4, 28513.7, 31057.0, 32738…\n$ Continent  &lt;chr&gt; \"Asia\", \"Asia\", \"Asia\", \"Asia\", \"Asia\", \"Asia\", \"Asia\", \"As…\n\n\n\n\n\n\nCode\nhead(globalPop)\n\n\n# A tibble: 6 × 6\n  Country      Year Young   Old Population Continent\n  &lt;chr&gt;       &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;      &lt;dbl&gt; &lt;chr&gt;    \n1 Afghanistan  1996  83.6   4.5     21560. Asia     \n2 Afghanistan  1998  84.1   4.5     22913. Asia     \n3 Afghanistan  2000  84.6   4.5     23898. Asia     \n4 Afghanistan  2002  85.1   4.5     25268. Asia     \n5 Afghanistan  2004  84.5   4.5     28514. Asia     \n6 Afghanistan  2006  84.3   4.6     31057  Asia     \n\n\n\n\n\n\nCode\nsummary(globalPop)\n\n\n   Country               Year          Young             Old       \n Length:6204        Min.   :1996   Min.   : 15.50   Min.   : 1.00  \n Class :character   1st Qu.:2010   1st Qu.: 25.70   1st Qu.: 6.90  \n Mode  :character   Median :2024   Median : 34.30   Median :12.80  \n                    Mean   :2023   Mean   : 41.66   Mean   :17.93  \n                    3rd Qu.:2038   3rd Qu.: 53.60   3rd Qu.:25.90  \n                    Max.   :2050   Max.   :109.20   Max.   :77.10  \n   Population         Continent        \n Min.   :      3.3   Length:6204       \n 1st Qu.:    605.9   Class :character  \n Median :   5771.6   Mode  :character  \n Mean   :  34860.9                     \n 3rd Qu.:  22711.0                     \n Max.   :1807878.6                     \n\n\n\n\n\n\nCode\nglobalPop[duplicated(globalPop),]\n\n\n# A tibble: 0 × 6\n# ℹ 6 variables: Country &lt;chr&gt;, Year &lt;dbl&gt;, Young &lt;dbl&gt;, Old &lt;dbl&gt;,\n#   Population &lt;dbl&gt;, Continent &lt;chr&gt;\n\n\n\n\n\n\nCode\ncolSums(is.na(globalPop))\n\n\n   Country       Year      Young        Old Population  Continent \n         0          0          0          0          0          0 \n\n\n\n\n\n\n\n\n3.3 Animated data visualisation: gganimate methods\ngganimate extends ggplot2 by adding animation-specific grammar, allowing plots to dynamically change over time with customizable transitions.\n\ntransition_*(): Defines how data is distributed and related over time.\nview_*(): Controls how positional scales change during the animation.\nshadow_*(): Determines how data from other time points is displayed at a given moment.\nenter_*() / exit_*(): Specifies how new data enters and old data exits during the animation.\nease_aes(): Adjusts how aesthetics transition smoothly over time.\n\n\n3.3.1 Building a static population bubble plot\nThe code below uses the basic ggplot2 function to create a static bubble plot.\n\n\nCode\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') \n\n\n\n\n\n\n\n\n\n\n\n3.3.2 Building the animated bubble plot\nThe code below uses the two functions to create an animated bubble plot. - transition_time() of gganimate is usedto create transition through distinct states in time (i.e.: Year) - ease_aes() is used to control easing of aesthetics. The default is linear. Other methods are: quadratic, cubic, quartic, quintic, sine, circular, exponential, elastic, back, and bounce.\n\n\nCode\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') +\n  transition_time(Year) +       \n  ease_aes('linear')          \n\n\n\n\n\n\n\n\n\n\n\n\n3.4 Animated data visualisation: plotly\nIn the Plotly R package, both ggplotly() and plot_ly() enable keyframe animations using the frame argument or aesthetic. Additionally, they support the ids argument or aesthetic to ensure smooth transitions for objects with the same ID, promoting object constancy during animations.\n\n3.4.1 Building an animated bubble plot: ggplotly() method\n\nPlot()Code()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nThe animated bubble plot will includes a play/pause button and a slider component for controlling the animation\n\n\n\n\n\n\n\nCode\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young')\n\nggplotly(gg)\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nA static bubble plot is created using ggplot2 functions and saved as an R object named gg.\nThe ggplotly() function is then used to convert this static plot into an animated SVG object.\n\n\n\n\n\n\n\n\n\n\n\n\nWarning\n\n\n\n\nYou will notice that the show.legend = FALSE argument was used, but the legend still appears on the plot. To overcome this problem, theme(legend.position=none) should be used as shown in the plot and code below.\n\n\n\n\n\n3.4.2 Building an animated bubble plot: ggplotly() method - without legend\n\nPlot()Code()\n\n\n\n\n\n\n\n\n\n\n\n\nCode\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young') + \n  theme(legend.position='none')\n\nggplotly(gg)\n\n\n\n\n\n\n\n\n3.5 Reference\n\nGetting Started\nVisit this [link]for a very interesting implementation of gganimate by your senior\nBuilding an animation step-by-step with gganimate.\nCreating a composite gif with multiple gganimate panels\n\n\n\n3.6 Overall reference\n\nKam, T.S. (2023).3 Programming Interactive Data Visualisation with R\n\n\n\n\n\n\n\nKey takeaways\n\n\n\n\nLearnt the Importance of Animated Graphics\nPackages and Tools used: gganimate, plotly, tidyr, and dplyr\nLearnt how to create animated visualizations - Static Bubble Plot, Animating with gganimate, and Animating with plotly\n\n\n\n\n\n5.0 Further exploration\n\nTo explore animated plot that shows how Singapore’s population has changed over the years.\n\n\nGraphCode\n\n\nObservations:\n\nReflect a society transitioning to an aging population\nSteady Population Growth Until 2030, but population decline after 2030.\nBy 2050, the population drops to 4,635.1, marking a decrease of approximately 9.6% from the peak.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\n# Prepare the dataset and filter for 'Singapore'\nsingapore_data &lt;- globalPop %&gt;%\n  filter(Country == \"Singapore\") %&gt;%\n  mutate(Year = as.integer(Year), Population = as.numeric(Population))\n\np &lt;- ggplot(singapore_data, aes(x = Year, y = Population, group = 1)) +\n  # Line showing the trajectory of population over time\n  geom_line(color = \"blue\", linewidth = 1) +\n  # Moving dot to emphasize animation\n  geom_point(color = \"red\", size = 4) +\n  labs(title = \"Population Change in Singapore\", \n       subtitle = \"Year: {frame_time}\",\n       x = \"Year\", \n       y = \"Population\") +\n  theme_minimal() +\n  transition_reveal(Year) +  # Reveals the line over time\n  ease_aes('linear')\n\np\n\n\n\n\n\n\nTo explore static bubble plot for the sum of population across continent\n\n\nGraphCode\n\n\nObservations:\n\nAsia has the highest population - largest bubble\nAfrica has a significantly large population - second largest bubble\nOceania has the smallest population - smallest bubble\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nlibrary(dplyr)\n\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\")\n\n\n\n\nCode\n# Process data for all continents\ndata_continent &lt;- globalPop %&gt;%\n  group_by(Year, Continent) %&gt;%\n  summarise(TotalPopulation = sum(Population, na.rm = TRUE), .groups = 'drop')\n\n\n\n\nCode\n# Create a static bubble plot\nggplot(data_continent, aes(x = Continent, y = TotalPopulation, size = TotalPopulation, color=Continent)) +\n  geom_point(alpha = 0.7) +\n  scale_size_area(max_size = 15) +\n  labs(\n    title = \"Total Population by Continent\",\n    x = \"Continent\",\n    y = \"Total Population (Thousands)\"\n  ) +\n  theme_minimal() +\n  theme(legend.position = \"none\") +  # Remove legend\n  coord_flip()  # Flip coordinates for better readability\n\n\n\n\n\n\nTo explore animated plot that visualizes the sum of population growth by continent over the years.\n\n\nGraphCode\n\n\nObservations:\n\nAsia has the highest population growth - trajectory is steep and significantly outpaces other continents\nAfrica’s population is also increasing rapidly, showing a strong upward trend.\nEurope, North America, South America show slow growth, with relatively flat trends\nOceania has the lowest population, maintaining a nearly constant trend.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\n# Process data for all continents\ndata_continent &lt;- globalPop %&gt;%\n  group_by(Year, Continent) %&gt;%\n  summarise(TotalPopulation = sum(Population, na.rm = TRUE), .groups = 'drop')\n\n\n\n\nCode\n# Create an animated plot for population growth by continent\nggplot(data_continent, aes(x = Year, y = TotalPopulation, color = Continent, group = Continent)) +\n  geom_line(size = 1) +\n  geom_point(size = 3) +\n  labs(\n    title = \"Population Growth by Continent Over the Years\",\n    x = \"Year\",\n    y = \"Total Population (Thousands)\",\n    color = \"Continent\"\n  ) +\n  theme_minimal() +\n  transition_reveal(Year)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02.html",
    "href": "Hands-on_Ex/Hands-on_Ex02.html",
    "title": "Hands-on Exercise 02",
    "section": "",
    "text": "With the assistance of ChatGPT"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02.html#beyond-ggplot2-fundamentals",
    "href": "Hands-on_Ex/Hands-on_Ex02.html#beyond-ggplot2-fundamentals",
    "title": "Hands-on Exercise 02",
    "section": "2. Beyond ggplot2 Fundamentals",
    "text": "2. Beyond ggplot2 Fundamentals\n\n2.1 Learning Outcome\nIn this chapter, we will be exploring several ggplot2 extensions to enhance the elegance and effectiveness of statistical graphics. The objectives will be to:\n\nUse the ggrepel package to control annotation placement on graphs.\nCreate publication-quality visuals with ggthemes and hrbrthemes.\nCombine multiple ggplot2 graphs into composite figures using the patchwork package.\n\n\n\n2.2 Getting started\n\n2.2.1 Installing and loading the required libraries\nBeside tidyverse, below are the four packages that will be used.\n\nggrepel: provides geoms for avoiding overlapping text labels in ggplot2.\nggthemes: offers additional themes, geoms, and scales for enhancing ggplot2 visuals.\nhrbrthemes: focuses on typography-centric themes and components for ggplot2.\npatchwork: allow for the creation of composite figures using ggplot2\n\nCode to check if the packages have been installed, and to load them into our R environment.\n\n\nCode\npacman::p_load(ggrepel, patchwork,\n               ggthemes, hrbrthemes,\n               tidyverse)\n\n\n\n\n2.2.2 Importing data\n\n\n\n\n\n\nNote\n\n\n\n\nThis section data is the same dataset used in Hands-on_Ex01\n\n\n\nWe will use a data file called Exam_data.csv which contains the year-end exam results of a group of Primary 3 students from a local school.\nThe code below will be used to import the “exam_data.csv” file into the R environment using the read_csv() function from the readr package, which is part of the tidyverse.\n\n\nCode\nexam_data &lt;- read_csv(\"data/Exam_data.csv\", show_col_types = FALSE)\n\n\nWe will check the dataset using below\n\nglimpse(): provides a transposed overview of a dataset, showing variables and their types in a concise format.\nhead(): displays the first few rows of a dataset (default is 6 rows) to give a quick preview of the data.\nsummary(): generates a statistical summary of each variable, including measures like mean, median, and range for numeric data.\nduplicated():returns a logical vector indicating which elements or rows in a vector or data frame are duplicates.\ncolSums(is.na()): counts the number of missing values (NA) in each column of the data frame.\nspec(): use spec() to quickly inspect the column\n\n\nglimpse()head()summary()duplicated()colSum(is.na(dataset))\n\n\n\n\nCode\nglimpse(exam_data)\n\n\nRows: 322\nColumns: 7\n$ ID      &lt;chr&gt; \"Student321\", \"Student305\", \"Student289\", \"Student227\", \"Stude…\n$ CLASS   &lt;chr&gt; \"3I\", \"3I\", \"3H\", \"3F\", \"3I\", \"3I\", \"3I\", \"3I\", \"3I\", \"3H\", \"3…\n$ GENDER  &lt;chr&gt; \"Male\", \"Female\", \"Male\", \"Male\", \"Male\", \"Female\", \"Male\", \"M…\n$ RACE    &lt;chr&gt; \"Malay\", \"Malay\", \"Chinese\", \"Chinese\", \"Malay\", \"Malay\", \"Chi…\n$ ENGLISH &lt;dbl&gt; 21, 24, 26, 27, 27, 31, 31, 31, 33, 34, 34, 36, 36, 36, 37, 38…\n$ MATHS   &lt;dbl&gt; 9, 22, 16, 77, 11, 16, 21, 18, 19, 49, 39, 35, 23, 36, 49, 30,…\n$ SCIENCE &lt;dbl&gt; 15, 16, 16, 31, 25, 16, 25, 27, 15, 37, 42, 22, 32, 36, 35, 45…\n\n\n\n\n\n\nCode\nhead(exam_data)\n\n\n# A tibble: 6 × 7\n  ID         CLASS GENDER RACE    ENGLISH MATHS SCIENCE\n  &lt;chr&gt;      &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;     &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt;\n1 Student321 3I    Male   Malay        21     9      15\n2 Student305 3I    Female Malay        24    22      16\n3 Student289 3H    Male   Chinese      26    16      16\n4 Student227 3F    Male   Chinese      27    77      31\n5 Student318 3I    Male   Malay        27    11      25\n6 Student306 3I    Female Malay        31    16      16\n\n\n\n\n\n\nCode\nsummary(exam_data)\n\n\n      ID               CLASS              GENDER              RACE          \n Length:322         Length:322         Length:322         Length:322        \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n    ENGLISH          MATHS          SCIENCE     \n Min.   :21.00   Min.   : 9.00   Min.   :15.00  \n 1st Qu.:59.00   1st Qu.:58.00   1st Qu.:49.25  \n Median :70.00   Median :74.00   Median :65.00  \n Mean   :67.18   Mean   :69.33   Mean   :61.16  \n 3rd Qu.:78.00   3rd Qu.:85.00   3rd Qu.:74.75  \n Max.   :96.00   Max.   :99.00   Max.   :96.00  \n\n\n\n\n\n\nCode\nexam_data[duplicated(exam_data),]\n\n\n# A tibble: 0 × 7\n# ℹ 7 variables: ID &lt;chr&gt;, CLASS &lt;chr&gt;, GENDER &lt;chr&gt;, RACE &lt;chr&gt;,\n#   ENGLISH &lt;dbl&gt;, MATHS &lt;dbl&gt;, SCIENCE &lt;dbl&gt;\n\n\n\n\n\n\nCode\ncolSums(is.na(exam_data))\n\n\n     ID   CLASS  GENDER    RACE ENGLISH   MATHS SCIENCE \n      0       0       0       0       0       0       0 \n\n\n\n\nCode\nspec(exam_data)\n\n\ncols(\n  ID = col_character(),\n  CLASS = col_character(),\n  GENDER = col_character(),\n  RACE = col_character(),\n  ENGLISH = col_double(),\n  MATHS = col_double(),\n  SCIENCE = col_double()\n)\n\n\n\n\n\nThe exam_data tibble contains seven attributes, as shown above:\n\nCategorical attributes: ID, CLASS, GENDER, RACE\nContinuous attributes: MATHS, ENGLISH, SCIENCE\n\n\n\n\n2.3 Beyond ggplot2 Annotation: ggrel\nAnnotating statistical graphs can be challenging, particularly when dealing with a large number of data points.\n\n\nShow the code\n ggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              linewidth=0.5) +  \n  geom_label(aes(label = ID), \n             hjust = .5, \n             vjust = -.5) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nReplaced size=0.5 with linewidth-0.5 in the geom_smooth() function to align the code with the latest ggplot2 standards.\n\n\n\nggrepel is an extension of ggplot2 that provides geoms to prevent overlapping text labels.\nIt replaces geom_text() with geom_text_repel() and geom_label() with geom_label_repel(), ensuring labels repel from each other, data points, and plot edges.This enhances the clarity and readability of the chart.\n\n2.3.1 Working with ggrepel\n\n\nShow the code\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  geom_label_repel(aes(label = ID), \n                   fontface = \"bold\") +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWarning\n\n\n\nThere is a warning message:\n\ngeom_smooth()` using formula = ‘y ~ x’\nWarning: ggrepel: 321 unlabeled data points (too many overlaps). Consider increasing max.overlaps\nthe warning message means that geom_label_repeal function was unable to place labels for 321 data points because they are too close to each other.\n\nResponse:\n\nOption 1: Increase max.overlaps\nOption 2: Label only specific points which involves creating a new column that marks points to label and passing the column into aes(label = ..)\nOption 3: Potentially to reduce the point size or transparency with geom_point()\n\n\n\n\n\n2.3.2 Further exploration with ggrepel\nLeveraging on Hands-on_Ex01, we added the below attributes:\n\ngeom_point:customize the color = “darkblue” and changed the size = 0.5, with a solid circle shape where shape = 16.\ngeom_smooth:changed the regression line, color = “red”, made thicker size = 1, and to display as a dashed line, linetype = “dashed”.\nRefer here for the different ggplot2 point shapes.\nRefer here for the different ggplot2 line types.\n\n\n\nShow the code\nlibrary(ggplot2)\nlibrary(ggrepel)\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  # Scatter plot with customized point appearance\n  geom_point(color = \"darkblue\", size = 0.5, shape = 16) +  # change point color, size, and shape\n  \n  # Linear regression line with customized color and line type\n  geom_smooth(method=lm, \n              size=1, \n              color=\"red\",    # line color\n              linetype=\"dashed\") +  # line style\n  geom_label_repel(aes(label = ID), \n                   fontface = \"bold\") +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\n\n\n\n\n\n\n\n\n\n2.4 Beyond ggplot2 themes\nThere are 8 different built-in themes within ggplot2. They are:\n\ntheme_gray():default theme in ggplot2, with a gray background with white grid lines for readability.\ntheme_bw(): clean, minimalistic theme with a white background and black grid lines.\ntheme_classic():simple theme with a white background and no grid lines.\ntheme_dark():theme with a dark background and light-colored text and grid lines.\ntheme_light():light background theme with light-colored grid lines.\ntheme_linedraw():theme that uses black lines on a white background.\ntheme_minimal():minimalist theme that reduces non-data elements.\ntheme_void():clean theme with no background, grid lines, or axes.\n\n\ntheme_gray()theme_bw()theme_classic()theme_dark()theme_light()theme_linedraw()theme_minimal()theme_void()\n\n\n\n\nCode\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  theme_gray() +\n  ggtitle(\"Distribution of Maths scores\") \n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  theme_bw() +\n  ggtitle(\"Distribution of Maths scores\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  theme_classic() +\n  ggtitle(\"Distribution of Maths scores\") \n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  theme_dark() +\n  ggtitle(\"Distribution of Maths scores\") \n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  theme_light() +\n  ggtitle(\"Distribution of Maths scores\") \n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  theme_linedraw() +\n  ggtitle(\"Distribution of Maths scores\") \n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  theme_minimal() +\n  ggtitle(\"Distribution of Maths scores\") \n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  theme_void() +\n  ggtitle(\"Distribution of Maths scores\") \n\n\n\n\n\n\n\n\n\n\n\n\nRefer to this link to learn more about ggplot2 Themes\n\n2.4.1 Working with ggtheme package\nggthemes offers a collection of ggplot2 themes that replicate the style of plots from the likes of Edward Tufte, Stephen Few, FiveThirtyEight, The Economist, Stata, Excel, and The Wall Street Journal, among others.\nBelow are some of the examples of the different themes available.\nRefer here for the comprehensive list and descrptions of all available themes.\nInstall and load ggthemespackages\n\n\nCode\ninstall.packages(\"ggthemes\")\nlibrary(ggthemes)\n\n\n\ntheme_economist()theme_wsj()theme_fivethirtyeight()theme_tufte()theme_excel()\n\n\n\n\nCode\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_economist()\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_wsj()\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_fivethirtyeight()\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_tufte()\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_excel()\n\n\n\n\n\n\n\n\n\n\n\n\nRefer to this link to learn more about the ggplot2 themes\n\n\n2.4.2 Working with hrbthemes package\nThe hrbrthemes package provides typography centric themes and theme components for ggplot2. This includes where labels are placed and the fonts used.\n\n\nShow the code\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum()\n\n\n\n\n\n\n\n\n\nThe second goal is to boost productivity in a production workflow, which is the intended setting for using the elements of hrbrthemes.\nRefer here to learn more.\n\n\nShow the code\ninstall.packages(\"hrbrthemes\")\nlibrary(hrbrthemes)\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum(axis_title_size = 18,\n              base_size = 15,\n              grid = \"Y\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWhat can we learn from the cde chunk above?\n\n\n\n\naxis_title_size: sets the font size of the axis title to 18\nbase_size: adjusts the default axis label size to 15\ngrid: remove the x-axis grid lines\n\n\n\n\n\n\n2.5 Beyond single graph\nCreating multiple graphs is often necessary to convey a compelling visual story. Several ggplot2 extensions offer functions for combining multiple graphs into a single figure.\nIn this section, we will learn how to create a composite/ combined plot by merging multiple graphs. First, let create three statistical graphics by using the codes below.\n\nHistogram 1 - distribution of Maths scoresHistogram 2 - distribution of English scoresScatterplot - English VS Maths scores\n\n\n\n\nShow the code\np1 &lt;- ggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") + \n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of Maths scores\")\n\np1\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\np2 &lt;- ggplot(data=exam_data, \n             aes(x = ENGLISH)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of English scores\")\n\np2\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\np3 &lt;- ggplot(data=exam_data, \n             aes(x= MATHS, \n                 y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              linewidth=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\np3\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nReplaced size=0.5 with linewidth-0.5 in the geom_smooth() function to align the code with the latest ggplot2 standards.\n\n\n\n\n\n\n\n2.5.1 Creating composits graphics: pathwork methods\nThere are several ggplot2 extension’s functions that support the preparation of composite figures such as grid.arrange() of gridExtra package and plot_grid() of cowplot package.\nIn this section, we will be using Patchwork, a ggplot2 extension specifically designed to combine multiple ggplot2 graphs into a single figure.\nThe Patchwork package offers a straightforward synatx, making it easy to create custom layouts. Key features include\n\nTwo column layouts using + operator\nSubplot grouping using () operator\nTwo-row layouts using / operator\nOne-row layout using | operator\n\n\n\nCode\ninstall.packages(\"patchwork\")\nlibrary(patchwork)\n\n\n\n\n2.5.2 Combining two ggplot2 graphs\n\nUsing + operatorUsing () operatorUsing / operator\n\n\n+ combines plots into a single row\n\n\nCode\np1+p2\n\n\n\n\n\n\n\n\n\n\n\n() use for grouping and layout adjustments\n\n\nCode\np1 + p2 + plot_layout(ncol=2,widths=c(1,2))\n\n\n\n\n\n\n\n\n\n\n\n/ use to stack plots into a single column\n\n\nCode\np1/p2\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2.5.3 Combining 2 or more ggplot2 graphs\nWe can also combine 2 or more ggplots graph in one composite figure.\n\nUsing +&|&() operator\n\n\n\n\nCode\n(p1/p2) | p3\n\n\n\n\n\n\n\n\n\nTo learn more about Patchwork, refer here\n\n\n\n\n\n2.5.4 Creating a composite figure with tag\nPatchwork also includes auto-tagging capabilities to label subplots within a figure, making it easier to identify them in text.\n\nNumeralsDigitsLettersCustomizing tags\n\n\n\n\nShow the code\n((p1 / p2) | p3) + \n  plot_annotation(tag_levels = 'I')\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\n((p1 / p2) | p3) + \n  plot_annotation(tag_levels = '1')\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\n((p1 / p2) | p3) + \n  plot_annotation(tag_levels = 'A')\n\n\n\n\n\n\n\n\n\n\n\n\nUsing either tag_prefix and/ or tag_suffix to format tags\nAdded the word “Figure” before each Roman numeral\n\n\n\nCode\n((p1 / p2) | p3) + \n  plot_annotation(tag_levels = \"I\", tag_prefix = \"Figure \", tag_suffix = \"\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2.5.5 Creating figure with insert\nIn addition to arranging plots side-by-side based on a specified layout, the Patchwork package provides the insert_element() function.\nThis allows user to freely place one or more plots or graphic elements over or below another plot, offering greater flexibility in design.\nRefer here for the insert_element documentation.\n\n\nCode\np3 + inset_element(p2, \n                   left = 0.02, \n                   bottom = 0.7, \n                   right = 0.5, \n                   top = 1)\n\n\n\n\n\n\n\n\n\n\n\n2.5.6 Creating a composite figure by using patchwork and ggtheme\nThe figure below is created by combining patchwork and the other ggthemes packages.\n\ntheme_econmist()theme_wsj()theme_fivethirtyeight()theme_tufte()theme_excel()\n\n\n\n\nCode\npatchwork &lt;- (p1 / p2) | p3\npatchwork & theme_economist() + \n  theme(plot.title=element_text(size =8),\n        axis.title.y=element_text(size = 9,\n                              angle = 0,\n                              vjust=0.9),\n        axis.title.x=element_text(size = 9))\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\npatchwork &lt;- (p1 / p2) | p3\npatchwork & theme_wsj() +\n  theme(plot.title=element_text(size =8),\n        axis.title.y=element_text(size = 9,\n                              angle = 0,\n                              vjust=0.9),\n        axis.title.x=element_text(size = 9))\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\npatchwork &lt;- (p1 / p2) | p3\npatchwork & theme_fivethirtyeight() +\n  theme(plot.title=element_text(size =8),\n        axis.title.y=element_text(size = 9,\n                              angle = 0,\n                              vjust=0.9),\n        axis.title.x=element_text(size = 9))\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\npatchwork &lt;- (p1 / p2) | p3\npatchwork & theme_tufte() +\n  theme(plot.title=element_text(size =8),\n        axis.title.y=element_text(size = 9,\n                              angle = 0,\n                              vjust=0.9),\n        axis.title.x=element_text(size = 9))\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\npatchwork &lt;- (p1 / p2) | p3\npatchwork & theme_excel() +\n  theme(plot.title=element_text(size =8),\n        axis.title.y=element_text(size = 9,\n                              angle = 0,\n                              vjust=0.9),\n        axis.title.x=element_text(size = 9))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nReduced the font size of the plot. title to 8 to improve plot’s readability\nReduced the font size of the axis.title.y to 9 and rotated the y-axis title to vertical (90 degrees) to improve plot’s readability\nLikewise, reduced the font size of the axis.title.x to 9 to improve plot’s readability\n\n\n\n\n\n\n2.6 References\n\nKam, T.S(2023). 2 Beyond ggplot2 Fundamentals\nggrepel\nggthemes\nhrbrthemes\nggplot tips: Arranging plots\nggplot2 Theme Elements Demostration\nggplot2 Theme Elements Reference Sheet\n\n\n2.6.1 Additional references\n\nQuarto_HTML_Code_Blocks\n\n\n\n\n2.7 Takeaway\n\n\n\n\n\n\nKey takeaways\n\n\n\n\nLearnt about the code-fold and code-summary chunk attributes to hide executable source code. where:\nValid values for code-fold include:\n\n\n\nValue\nBehavior\n\n\n\n\nfalse\nNo folding (default)\n\n\ntrue\nFold code (initially hidden)\n\n\nshow\nFold code (initially shown)\n\n\n\nLearnt about the different R packages\n\ninstall.packages(“readr”) library(readr)\ninstall.packages(“ggplot2”) library(ggplot2)\ninstall.packages(“ggrepel”) library(ggrepel)\ninstall.packages(“ggthemes”) library(ggthemes)\n\nEnhanced annotations with the use of ggrepeal - help to repel overlapping text labels, ensuring clear and readbable annotations\nIntroducing of professional themes with ggthemes and hrbrthemes - offer additional themes , geoms, and improved asthetics and typography.\nCombining plots with patchwork - allows for the creation of composite figures by combining multiple ggplot2 graphs together."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex00.html",
    "href": "Hands-on_Ex/Hands-on_Ex00.html",
    "title": "Hands-on Exercise 00: Working with tidyverse",
    "section": "",
    "text": "Loading tidyverse onto r environment by using the code chunk below\n\n\nCode\npacman:: p_load(tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex00.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex00.html#getting-started",
    "title": "Hands-on Exercise 00: Working with tidyverse",
    "section": "",
    "text": "Loading tidyverse onto r environment by using the code chunk below\n\n\nCode\npacman:: p_load(tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex00.html#importing-data",
    "href": "Hands-on_Ex/Hands-on_Ex00.html#importing-data",
    "title": "Hands-on Exercise 00: Working with tidyverse",
    "section": "Importing Data",
    "text": "Importing Data\nCode chunk below uses read_csv() of readr to import REALIS2019.csv into r environment as a tibble data.frame.\n\n\nCode\nrealis2019 &lt;- read_csv(\"data/REALIS2019.csv\")\npopdata_fat &lt;- read_csv(\"data/PopData2019_fat.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex00.html#pivoting-data",
    "href": "Hands-on_Ex/Hands-on_Ex00.html#pivoting-data",
    "title": "Hands-on Exercise 00: Working with tidyverse",
    "section": "Pivoting Data",
    "text": "Pivoting Data\n\n\nCode\n#pivot_longer() \"lengthens\" data, increasing the number of rows and decreasing the number of columns\n\npopdata_long &lt;- popdata_fat %&gt;% #pipe: to combine diff functions tgt\n  pivot_longer(c(3:21), #column\n               names_to = \"Age Group\", #column headers to rows\n               values_to = \"Population\") #values to rows\n\n\n\n\nCode\nwrite_rds(popdata_long, \"rds/popdata_long.rds\") #rds: compact r file"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex00.html#selecting-data",
    "href": "Hands-on_Ex/Hands-on_Ex00.html#selecting-data",
    "title": "Hands-on Exercise 00: Working with tidyverse",
    "section": "Selecting Data",
    "text": "Selecting Data\n\n\nCode\nrealis2019_selected &lt;- realis2019 %&gt;%\n  select(`Project Name`,\n         `Transacted Price ($)`,\n         `Type of Sale`,\n         `Unit Price ($ psm)`,\n         `Property Type`)\nrealis2019_selected\n\n\n# A tibble: 19,515 × 5\n   `Project Name`     `Transacted Price ($)` `Type of Sale` `Unit Price ($ psm)`\n   &lt;chr&gt;                               &lt;dbl&gt; &lt;chr&gt;                         &lt;dbl&gt;\n 1 PEIRCE VIEW                        840000 Resale                         7434\n 2 FLORIDA PARK                      3040000 Resale                         9737\n 3 BULLION PARK                       860000 Resale                        11467\n 4 CASTLE GREEN                      1000000 Resale                         9346\n 5 HAPPY ESTATE                      7000000 Resale                        10183\n 6 TEACHER'S HOUSING…                2880000 Resale                        12659\n 7 THE PANORAMA                      1510000 Resale                        16064\n 8 THE PANORAMA                       710000 Resale                        16905\n 9 CHIP THYE GARDEN                  2800000 Resale                        13500\n10 TEACHER'S HOUSING…                2300000 Resale                         9935\n# ℹ 19,505 more rows\n# ℹ 1 more variable: `Property Type` &lt;chr&gt;"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex00.html#filtering-data-using-dplyr-package",
    "href": "Hands-on_Ex/Hands-on_Ex00.html#filtering-data-using-dplyr-package",
    "title": "Hands-on Exercise 00: Working with tidyverse",
    "section": "Filtering Data using dplyr package",
    "text": "Filtering Data using dplyr package\n\n\nCode\nrealis2019_filtered &lt;- realis2019_selected %&gt;%\n  filter (`Property Type` == \"Condominium\" |\n            `Property Type` == \"Apartment\") %&gt;%\n  filter (`Type of Sale` == \"New Sale\") %&gt;%\n  filter (`Unit Price ($ psm)` &lt;= 13000)\n\nrealis2019_filtered\n\n\n# A tibble: 87 × 5\n   `Project Name`     `Transacted Price ($)` `Type of Sale` `Unit Price ($ psm)`\n   &lt;chr&gt;                               &lt;dbl&gt; &lt;chr&gt;                         &lt;dbl&gt;\n 1 RIVERFRONT RESIDE…                1029000 New Sale                      12863\n 2 RIVERFRONT RESIDE…                 871000 New Sale                      12809\n 3 RIVERFRONT RESIDE…                1940000 New Sale                      12848\n 4 RIVERFRONT RESIDE…                1030000 New Sale                      12875\n 5 RIVERFRONT RESIDE…                2061000 New Sale                      12962\n 6 RIVERFRONT RESIDE…                 762000 New Sale                      12915\n 7 RIVERFRONT RESIDE…                1001000 New Sale                      12513\n 8 RIVERFRONT RESIDE…                1271000 New Sale                      12838\n 9 RIVERFRONT RESIDE…                1310000 New Sale                      12970\n10 RIVERFRONT RESIDE…                1339000 New Sale                      13000\n# ℹ 77 more rows\n# ℹ 1 more variable: `Property Type` &lt;chr&gt;\n\n\n\nPutting all together\n\n\nCode\nrealis2019_end &lt;- realis2019 %&gt;%\n  select(`Project Name`,\n         `Transacted Price ($)`,\n         `Type of Sale`,\n         `Unit Price ($ psm)`,\n         `Property Type`)   %&gt;%\n  filter (`Property Type` == \"Condominium\" |\n            `Property Type` == \"Apartment\") %&gt;%\n  filter (`Type of Sale` == \"New Sale\") %&gt;%\n  filter (`Unit Price ($ psm)` &lt;= 13000)\n\nrealis2019_end\n\n\n# A tibble: 87 × 5\n   `Project Name`     `Transacted Price ($)` `Type of Sale` `Unit Price ($ psm)`\n   &lt;chr&gt;                               &lt;dbl&gt; &lt;chr&gt;                         &lt;dbl&gt;\n 1 RIVERFRONT RESIDE…                1029000 New Sale                      12863\n 2 RIVERFRONT RESIDE…                 871000 New Sale                      12809\n 3 RIVERFRONT RESIDE…                1940000 New Sale                      12848\n 4 RIVERFRONT RESIDE…                1030000 New Sale                      12875\n 5 RIVERFRONT RESIDE…                2061000 New Sale                      12962\n 6 RIVERFRONT RESIDE…                 762000 New Sale                      12915\n 7 RIVERFRONT RESIDE…                1001000 New Sale                      12513\n 8 RIVERFRONT RESIDE…                1271000 New Sale                      12838\n 9 RIVERFRONT RESIDE…                1310000 New Sale                      12970\n10 RIVERFRONT RESIDE…                1339000 New Sale                      13000\n# ℹ 77 more rows\n# ℹ 1 more variable: `Property Type` &lt;chr&gt;\n\n\n\n\n\n\n\n\nTakeaway\n\n\n\n\necho: controls whether the code is displayed\n\nIf echo = TRUE (default), the code is shown in the rendered document.\nIf echo = FALSE, the code is hidden, but the output or results (if any) are still included.\n\neval: controls whether the code is executed\n\nIf eval = TRUE (default), the code in the chunk is executed, and its results (e.g., output, plots) are included in the document.\nIf eval = FALSE, the code is not executed, and no output or results are included, though the code may still be visible if echo = TRUE.\n\n%&gt;%: used to combine multiple functions together\nChange environmental variables if needed"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "In this webpage, you will find my learning journey and deliverables of ISSS608 Visual Analytics and Applications. I am Godzilla. This is the course page of ISSS608 whereby I share my Hands-on Exercises, In-class Exercises, Take-Home Exercises and Project\nDo Linkledin page, and brief introduction\n\n\n\n\n:::{#quarto-navigation-envelope .hidden}\n[ISSS608 Coursework]{.hidden .quarto-markdown-envelope-contents render-id=\"cXVhcnRvLWludC1zaWRlYmFyLXRpdGxl\"}\n[ISSS608 Coursework]{.hidden .quarto-markdown-envelope-contents render-id=\"cXVhcnRvLWludC1uYXZiYXItdGl0bGU=\"}\n[Hands-on Exercise]{.hidden .quarto-markdown-envelope-contents render-id=\"cXVhcnRvLWludC1uYXZiYXI6SGFuZHMtb24gRXhlcmNpc2U=\"}\n[Hands-on Exercise 00]{.hidden .quarto-markdown-envelope-contents render-id=\"cXVhcnRvLWludC1uYXZiYXI6SGFuZHMtb24gRXhlcmNpc2UgMDA=\"}\n[/Hands-on_Ex/Hands-on_Ex00.html]{.hidden .quarto-markdown-envelope-contents render-id=\"cXVhcnRvLWludC1uYXZiYXI6L0hhbmRzLW9uX0V4L0hhbmRzLW9uX0V4MDAuaHRtbA==\"}\n[Hands-on Exercise 01]{.hidden .quarto-markdown-envelope-contents render-id=\"cXVhcnRvLWludC1uYXZiYXI6SGFuZHMtb24gRXhlcmNpc2UgMDE=\"}\n[/Hands-on_Ex/Hands-on_Ex01.html]{.hidden .quarto-markdown-envelope-contents render-id=\"cXVhcnRvLWludC1uYXZiYXI6L0hhbmRzLW9uX0V4L0hhbmRzLW9uX0V4MDEuaHRtbA==\"}\n[Hands-on Exercise 02]{.hidden .quarto-markdown-envelope-contents render-id=\"cXVhcnRvLWludC1uYXZiYXI6SGFuZHMtb24gRXhlcmNpc2UgMDI=\"}\n[/Hands-on_Ex/Hands-on_Ex02.html]{.hidden .quarto-markdown-envelope-contents render-id=\"cXVhcnRvLWludC1uYXZiYXI6L0hhbmRzLW9uX0V4L0hhbmRzLW9uX0V4MDIuaHRtbA==\"}\n[Hands-on Exercise 03a]{.hidden .quarto-markdown-envelope-contents render-id=\"cXVhcnRvLWludC1uYXZiYXI6SGFuZHMtb24gRXhlcmNpc2UgMDNh\"}\n[/Hands-on_Ex/Hands-on_Ex03a.html]{.hidden .quarto-markdown-envelope-contents render-id=\"cXVhcnRvLWludC1uYXZiYXI6L0hhbmRzLW9uX0V4L0hhbmRzLW9uX0V4MDNhLmh0bWw=\"}\n[Hands-on Exercise 03b]{.hidden .quarto-markdown-envelope-contents render-id=\"cXVhcnRvLWludC1uYXZiYXI6SGFuZHMtb24gRXhlcmNpc2UgMDNi\"}\n[/Hands-on_Ex/Hands-on_Ex03b.html]{.hidden .quarto-markdown-envelope-contents render-id=\"cXVhcnRvLWludC1uYXZiYXI6L0hhbmRzLW9uX0V4L0hhbmRzLW9uX0V4MDNiLmh0bWw=\"}\n[Hands-on Exercise 04a]{.hidden .quarto-markdown-envelope-contents render-id=\"cXVhcnRvLWludC1uYXZiYXI6SGFuZHMtb24gRXhlcmNpc2UgMDRh\"}\n[/Hands-on_Ex/Hands-on_Ex04a.html]{.hidden .quarto-markdown-envelope-contents render-id=\"cXVhcnRvLWludC1uYXZiYXI6L0hhbmRzLW9uX0V4L0hhbmRzLW9uX0V4MDRhLmh0bWw=\"}\n[Hands-on Exercise 04b]{.hidden .quarto-markdown-envelope-contents render-id=\"cXVhcnRvLWludC1uYXZiYXI6SGFuZHMtb24gRXhlcmNpc2UgMDRi\"}\n[/Hands-on_Ex/Hands-on_Ex04b.html]{.hidden .quarto-markdown-envelope-contents render-id=\"cXVhcnRvLWludC1uYXZiYXI6L0hhbmRzLW9uX0V4L0hhbmRzLW9uX0V4MDRiLmh0bWw=\"}\n[Hands-on Exercise 04c]{.hidden .quarto-markdown-envelope-contents render-id=\"cXVhcnRvLWludC1uYXZiYXI6SGFuZHMtb24gRXhlcmNpc2UgMDRj\"}\n[/Hands-on_Ex/Hands-on_Ex04c.html]{.hidden .quarto-markdown-envelope-contents render-id=\"cXVhcnRvLWludC1uYXZiYXI6L0hhbmRzLW9uX0V4L0hhbmRzLW9uX0V4MDRjLmh0bWw=\"}\n[Hands-on Exercise 04d]{.hidden .quarto-markdown-envelope-contents render-id=\"cXVhcnRvLWludC1uYXZiYXI6SGFuZHMtb24gRXhlcmNpc2UgMDRk\"}\n[/Hands-on_Ex/Hands-on_Ex04d.html]{.hidden .quarto-markdown-envelope-contents render-id=\"cXVhcnRvLWludC1uYXZiYXI6L0hhbmRzLW9uX0V4L0hhbmRzLW9uX0V4MDRkLmh0bWw=\"}\n[In-class Exercise]{.hidden .quarto-markdown-envelope-contents render-id=\"cXVhcnRvLWludC1uYXZiYXI6SW4tY2xhc3MgRXhlcmNpc2U=\"}\n[In-class Exercise Outline]{.hidden .quarto-markdown-envelope-contents render-id=\"cXVhcnRvLWludC1uYXZiYXI6SW4tY2xhc3MgRXhlcmNpc2UgT3V0bGluZQ==\"}\n[/In-class_Ex/In-class_Outline.html]{.hidden .quarto-markdown-envelope-contents render-id=\"cXVhcnRvLWludC1uYXZiYXI6L0luLWNsYXNzX0V4L0luLWNsYXNzX091dGxpbmUuaHRtbA==\"}\n[In-class Exercise 01]{.hidden .quarto-markdown-envelope-contents render-id=\"cXVhcnRvLWludC1uYXZiYXI6SW4tY2xhc3MgRXhlcmNpc2UgMDE=\"}\n[https://public.tableau.com/views/In-class_Ex01_17371867213230/Dashboard1?:language=en-US&:sid=&:redirect=auth&:display_count=n&:origin=viz_share_link]{.hidden .quarto-markdown-envelope-contents render-id=\"cXVhcnRvLWludC1uYXZiYXI6aHR0cHM6Ly9wdWJsaWMudGFibGVhdS5jb20vdmlld3MvSW4tY2xhc3NfRXgwMV8xNzM3MTg2NzIxMzIzMC9EYXNoYm9hcmQxPzpsYW5ndWFnZT1lbi1VUyY6c2lkPSY6cmVkaXJlY3Q9YXV0aCY6ZGlzcGxheV9jb3VudD1uJjpvcmlnaW49dml6X3NoYXJlX2xpbms=\"}\n[In-class Exercise 02]{.hidden .quarto-markdown-envelope-contents render-id=\"cXVhcnRvLWludC1uYXZiYXI6SW4tY2xhc3MgRXhlcmNpc2UgMDI=\"}\n[https://public.tableau.com/views/In-class_Ex02_17377896182080/Dashboard2?:language=en-US&:sid=&:redirect=auth&:display_count=n&:origin=viz_share_link]{.hidden .quarto-markdown-envelope-contents render-id=\"cXVhcnRvLWludC1uYXZiYXI6aHR0cHM6Ly9wdWJsaWMudGFibGVhdS5jb20vdmlld3MvSW4tY2xhc3NfRXgwMl8xNzM3Nzg5NjE4MjA4MC9EYXNoYm9hcmQyPzpsYW5ndWFnZT1lbi1VUyY6c2lkPSY6cmVkaXJlY3Q9YXV0aCY6ZGlzcGxheV9jb3VudD1uJjpvcmlnaW49dml6X3NoYXJlX2xpbms=\"}\n[In-class Exercise 03]{.hidden .quarto-markdown-envelope-contents render-id=\"cXVhcnRvLWludC1uYXZiYXI6SW4tY2xhc3MgRXhlcmNpc2UgMDM=\"}\n[https://public.tableau.com/views/In-class_Ex03_17383925295110/Hands-on_Ex03?:language=en-US&:sid=&:redirect=auth&:display_count=n&:origin=viz_share_link]{.hidden .quarto-markdown-envelope-contents render-id=\"cXVhcnRvLWludC1uYXZiYXI6aHR0cHM6Ly9wdWJsaWMudGFibGVhdS5jb20vdmlld3MvSW4tY2xhc3NfRXgwM18xNzM4MzkyNTI5NTExMC9IYW5kcy1vbl9FeDAzPzpsYW5ndWFnZT1lbi1VUyY6c2lkPSY6cmVkaXJlY3Q9YXV0aCY6ZGlzcGxheV9jb3VudD1uJjpvcmlnaW49dml6X3NoYXJlX2xpbms=\"}\n[In-class Exercise 03-Story]{.hidden .quarto-markdown-envelope-contents render-id=\"cXVhcnRvLWludC1uYXZiYXI6SW4tY2xhc3MgRXhlcmNpc2UgMDMtU3Rvcnk=\"}\n[https://public.tableau.com/views/In-class_Ex03_Story/Myfirststory?:language=en-US&:sid=&:redirect=auth&:display_count=n&:origin=viz_share_link]{.hidden .quarto-markdown-envelope-contents render-id=\"cXVhcnRvLWludC1uYXZiYXI6aHR0cHM6Ly9wdWJsaWMudGFibGVhdS5jb20vdmlld3MvSW4tY2xhc3NfRXgwM19TdG9yeS9NeWZpcnN0c3Rvcnk/Omxhbmd1YWdlPWVuLVVTJjpzaWQ9JjpyZWRpcmVjdD1hdXRoJjpkaXNwbGF5X2NvdW50PW4mOm9yaWdpbj12aXpfc2hhcmVfbGluaw==\"}\n[In-class Exercise 03-Animation]{.hidden .quarto-markdown-envelope-contents render-id=\"cXVhcnRvLWludC1uYXZiYXI6SW4tY2xhc3MgRXhlcmNpc2UgMDMtQW5pbWF0aW9u\"}\n[https://public.tableau.com/views/In-class_Ex03_Animation/Dashboard6?:language=en-US&:sid=&:redirect=auth&:display_count=n&:origin=viz_share_link]{.hidden .quarto-markdown-envelope-contents render-id=\"cXVhcnRvLWludC1uYXZiYXI6aHR0cHM6Ly9wdWJsaWMudGFibGVhdS5jb20vdmlld3MvSW4tY2xhc3NfRXgwM19BbmltYXRpb24vRGFzaGJvYXJkNj86bGFuZ3VhZ2U9ZW4tVVMmOnNpZD0mOnJlZGlyZWN0PWF1dGgmOmRpc3BsYXlfY291bnQ9biY6b3JpZ2luPXZpel9zaGFyZV9saW5r\"}\n[Take-home Exercise]{.hidden .quarto-markdown-envelope-contents render-id=\"cXVhcnRvLWludC1uYXZiYXI6VGFrZS1ob21lIEV4ZXJjaXNl\"}\n[Take Home Exercise 1]{.hidden .quarto-markdown-envelope-contents render-id=\"cXVhcnRvLWludC1uYXZiYXI6VGFrZSBIb21lIEV4ZXJjaXNlIDE=\"}\n[/Take-home_Ex/Take-home_Ex01.html]{.hidden .quarto-markdown-envelope-contents render-id=\"cXVhcnRvLWludC1uYXZiYXI6L1Rha2UtaG9tZV9FeC9UYWtlLWhvbWVfRXgwMS5odG1s\"}\n[Home]{.hidden .quarto-markdown-envelope-contents render-id=\"cXVhcnRvLWludC1uYXZiYXI6SG9tZQ==\"}\n[/index.html]{.hidden .quarto-markdown-envelope-contents render-id=\"cXVhcnRvLWludC1uYXZiYXI6L2luZGV4Lmh0bWw=\"}\n[About]{.hidden .quarto-markdown-envelope-contents render-id=\"cXVhcnRvLWludC1uYXZiYXI6QWJvdXQ=\"}\n[/about.html]{.hidden .quarto-markdown-envelope-contents render-id=\"cXVhcnRvLWludC1uYXZiYXI6L2Fib3V0Lmh0bWw=\"}\n:::\n\n\n\n:::{#quarto-meta-markdown .hidden}\n[About – ISSS608 Coursework]{.hidden .quarto-markdown-envelope-contents render-id=\"cXVhcnRvLW1ldGF0aXRsZQ==\"}\n[About – ISSS608 Coursework]{.hidden .quarto-markdown-envelope-contents render-id=\"cXVhcnRvLXR3aXR0ZXJjYXJkdGl0bGU=\"}\n[About – ISSS608 Coursework]{.hidden .quarto-markdown-envelope-contents render-id=\"cXVhcnRvLW9nY2FyZHRpdGxl\"}\n[ISSS608 Coursework]{.hidden .quarto-markdown-envelope-contents render-id=\"cXVhcnRvLW1ldGFzaXRlbmFtZQ==\"}\n[]{.hidden .quarto-markdown-envelope-contents render-id=\"cXVhcnRvLXR3aXR0ZXJjYXJkZGVzYw==\"}\n[]{.hidden .quarto-markdown-envelope-contents render-id=\"cXVhcnRvLW9nY2FyZGRkZXNj\"}\n:::\n\n\n\n\n&lt;!-- --&gt;\n\n::: {.quarto-embedded-source-code}\n```````````````````{.markdown shortcodes=\"false\"}\n---\ntitle: \"About\"\n---\n\nIn this webpage, you will find my learning journey and deliverables of ISSS608 Visual Analytics and Applications. I am Godzilla. This is the course page of ISSS608 whereby I share my Hands-on Exercises, In-class Exercises, Take-Home Exercises and Project\n\nDo Linkledin page, and brief introduction \n``````````````````` :::"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01.html",
    "href": "Hands-on_Ex/Hands-on_Ex01.html",
    "title": "Hands-on Exercise 01",
    "section": "",
    "text": "With the assistance of ChatGPT"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01.html#a-layered-grammar-of-graphics-ggplot2-methods",
    "href": "Hands-on_Ex/Hands-on_Ex01.html#a-layered-grammar-of-graphics-ggplot2-methods",
    "title": "Hands-on Exercise 01",
    "section": "1. A Layered Grammar of Graphics: ggplot2 methods",
    "text": "1. A Layered Grammar of Graphics: ggplot2 methods\n\n1.1 Learning Outcome\nIn this chapter, we will learn the basic principles and key components of ggplot2. we will get hands-on experience using these components to create statistical graphics based on the principles of the Layered Grammar of Graphics. By the end, we will be able to apply ggplot2’s essential graphical elements to create elegant and functional statistical visualizations.\n\n\n1.2 Getting started\n\n1.2.1 Installing and loading the required libraries\nThe code chunk below uses p_load() from the pacman package to check if the tidyverse packages are installed on my computer. If they are, they will be loaded into the R environment.If not, we will proceed to install pacman first.\n\n\nCode\npacman::p_load(tidyverse)\n\n\n\n\n1.2.2 Importing data\nWe will import exam_data.csv into R environment by using the read.csv()function and assign it to exam_data\n\n\nCode\nexam_data &lt;- read_csv(\"data/Exam_data.csv\", show_col_types = FALSE)\n\n\nWe will check the dataset using below\n\nglimpse(): provides a transposed overview of a dataset, showing variables and their types in a concise format.\nhead(): displays the first few rows of a dataset (default is 6 rows) to give a quick preview of the data.\nsummary(): generates a statistical summary of each variable, including measures like mean, median, and range for numeric data.\nduplicated():Returns a logical vector indicating which elements or rows in a vector or data frame are duplicates.\ncolSums(is.na()): Counts the number of missing values (NA) in each column of the data frame.\n\n\nglimpse()head()summary()duplicated()colSum(is.na(dataset))\n\n\n\n\nCode\nglimpse(exam_data)\n\n\nRows: 322\nColumns: 7\n$ ID      &lt;chr&gt; \"Student321\", \"Student305\", \"Student289\", \"Student227\", \"Stude…\n$ CLASS   &lt;chr&gt; \"3I\", \"3I\", \"3H\", \"3F\", \"3I\", \"3I\", \"3I\", \"3I\", \"3I\", \"3H\", \"3…\n$ GENDER  &lt;chr&gt; \"Male\", \"Female\", \"Male\", \"Male\", \"Male\", \"Female\", \"Male\", \"M…\n$ RACE    &lt;chr&gt; \"Malay\", \"Malay\", \"Chinese\", \"Chinese\", \"Malay\", \"Malay\", \"Chi…\n$ ENGLISH &lt;dbl&gt; 21, 24, 26, 27, 27, 31, 31, 31, 33, 34, 34, 36, 36, 36, 37, 38…\n$ MATHS   &lt;dbl&gt; 9, 22, 16, 77, 11, 16, 21, 18, 19, 49, 39, 35, 23, 36, 49, 30,…\n$ SCIENCE &lt;dbl&gt; 15, 16, 16, 31, 25, 16, 25, 27, 15, 37, 42, 22, 32, 36, 35, 45…\n\n\n\n\n\n\nCode\nhead(exam_data)\n\n\n# A tibble: 6 × 7\n  ID         CLASS GENDER RACE    ENGLISH MATHS SCIENCE\n  &lt;chr&gt;      &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;     &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt;\n1 Student321 3I    Male   Malay        21     9      15\n2 Student305 3I    Female Malay        24    22      16\n3 Student289 3H    Male   Chinese      26    16      16\n4 Student227 3F    Male   Chinese      27    77      31\n5 Student318 3I    Male   Malay        27    11      25\n6 Student306 3I    Female Malay        31    16      16\n\n\n\n\n\n\nCode\nsummary(exam_data)\n\n\n      ID               CLASS              GENDER              RACE          \n Length:322         Length:322         Length:322         Length:322        \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n    ENGLISH          MATHS          SCIENCE     \n Min.   :21.00   Min.   : 9.00   Min.   :15.00  \n 1st Qu.:59.00   1st Qu.:58.00   1st Qu.:49.25  \n Median :70.00   Median :74.00   Median :65.00  \n Mean   :67.18   Mean   :69.33   Mean   :61.16  \n 3rd Qu.:78.00   3rd Qu.:85.00   3rd Qu.:74.75  \n Max.   :96.00   Max.   :99.00   Max.   :96.00  \n\n\n\n\n\n\nCode\nexam_data[duplicated(exam_data),]\n\n\n# A tibble: 0 × 7\n# ℹ 7 variables: ID &lt;chr&gt;, CLASS &lt;chr&gt;, GENDER &lt;chr&gt;, RACE &lt;chr&gt;,\n#   ENGLISH &lt;dbl&gt;, MATHS &lt;dbl&gt;, SCIENCE &lt;dbl&gt;\n\n\n\n\n\n\nCode\ncolSums(is.na(exam_data))\n\n\n     ID   CLASS  GENDER    RACE ENGLISH   MATHS SCIENCE \n      0       0       0       0       0       0       0 \n\n\n\n\n\n\n\n\n\n\n\nReflection\n\n\n\n\nLearnt how to load libraries, import/ read excel files\n\n\n\n\n\n\n1.3 Introducing ggplot\nggplot2 is an R package for creating data-driven graphics based on The Grammar of Graphics. It is also part of the tidyverse family specially designed for visual exploration and communication.\nFor more information, visit ggplot2\n\n1.3.1 R Graphics VS ggplot\nLets compare how R Graphics, the core graphical functions of Base R and ggplot plot a simple histogram.\n\nR Graphicsggplot2\n\n\n\n\nCode\nhist(exam_data$MATHS,col = \"#4169e1\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot(data=exam_data, aes(x = MATHS)) +\n  geom_histogram(bins=10, \n                 boundary = 100,\n                 color=\"black\", \n                 fill=\"#4169e1\") +\n  ggtitle(\"Distribution of Maths scores\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nReflection\n\n\n\n\nWhile R Graphics offers simpler syntax, Hadley Wickham emphasizes that the true value of ggplot2 lies not in its specific plotting syntax, but in the transformative way it approaches visualization. It enables users to think of visualizations as a method of mapping variables to the visual attributes of geometric objects, creating a powerful framework for understanding and perceiving data.\n\n\n\n\n\n\n1.4 Grammar of Graphics\nThe Grammar of Graphics, introduced by Leland Wilkinson in 1999, provides a structured approach to creating meaningful data visualizations. It breaks graphs into semantic components like scales and layers, offering a framework to answer the question: What is a statistical graphic?\nThe key principles I’ve learned are:\n\nGraphics are built from distinct layers of grammatical elements.\nMeaningful plots are achieved through aesthetic mapping.\n\nThis grammar helps me see how complex graphics are composed, uncover connections between seemingly different visuals, and understand the foundation of diverse visualizations. It also guides me toward recognizing well-formed, meaningful graphics while acknowledging that not all grammatically correct visuals will make sense.\n\n1.4.1 A layered grammar of graphics\nFigure shows the seven grammars of ggplot2: A layered grammar of graphics\n\n\n\nA layered grammar of graphics\n\n\nThe building blocks of the Grammar of Graphics are:\n\nData: The dataset being visualized.\nAesthetics: Attributes like position, color, size, shape, or transparency that map data to visual elements.\nGeometries: Visual elements representing data, such as points, bars, or lines.\nFacets: Subsets of data used to create multiple variations of a graph (e.g., panels).\nStatistics: Transformations summarizing data, such as means or confidence intervals.\nCoordinate Systems: The plane where data is plotted (e.g., Cartesian or polar).\nThemes: Non-data components like titles, axis labels, or legend formatting.\n\n\n\n\n1.5 Essential Grammatical Elements in ggplot2: data\nLet us call the ggplot( ) function using the code chunk below.\n\n\nCode\nggplot(data=exam_data)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nA blank canvas is created with ggplot().\nggplot() initializes a ggplot object.\nThe data argument specifies the dataset for plotting.\nIf the dataset is not already a data.frame, it will be converted to one by fortify().\n\n\n\n\n\n1.6 Essential Grammatical Elements in ggplot2: aesthetic mappings\nAesthetic mappings link data attributes to visual characteristics like position, color, size, shape, or transparency, allowing each characteristic to represent information. These mappings are defined using the aes() function, and each geom layer can have its own aes() specification.\nThe code below adds the aesthetic element into the plot.\n\n\nCode\nggplot(data=exam_data,\n       aes(x=MATHS,\n           y=ENGLISH))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nggplot includes the x/y axis and the axis’s label\n\n\n\n\n\n1.7 Essential Grammatical Elements in ggplot2: geom\nGeometric objects are the visual marks on a plot. A layer combines data, aesthetic mappings, a geometric object (geom), statistical transformations (stat), and position adjustments. Layers are typically created using geom_ functions, with options to override default stat or position settings. Every plot requires at least one geom, and additional geoms can be added using the + operator.\nRefer here for a more comprehensive list.\nBelow are some examples of geom_:\n\ngeom_point: for drawing individual points (e.g., a scatter plot)\ngeom_line: for drawing lines (e.g., for a line charts)\ngeom_col: for drawing bars with heights mapped to values in the data (e.g., bar charts).\ngeom_boxplot: for drawing box-and-whisker plots to visualize data distribution and outliers.\ngeom_histogram: for drawing binned values to represent the distribution of a numeric variable (e.g., histograms).\ngeom_density: for drawing smoothed density estimates to visualize the distribution of a numeric variable.\n\n\n\n1.7.1 Geometric objects: geom_bar\nThe code below plots a bar chart by using geom_bar().\n\n\nCode\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()\n\n\n\n\n\n\n\n\n\n\n\n1.7.2 Geometric objects: geom_dotplot\nIn a dot plot, the dot width represents the bin width (or maximum width, depending on the binning method), and dots are stacked, with each dot signifying one observation.\nThe code below plots a dot plot chart by using geom_dotplot().\n\n\nCode\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(dotsize = 0.5)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWarning\n\n\n\nTo note that the y scale is not very useful, and can be misleading in this case.\n\n\nTo enhance the dotplot visualization, the below (non exhaustive) are some arguments that has been added:\n\nscale_y_continuous()- to turn off the y-axis by setting it to NULL\nbinwidth - specifies the width of the bins or interval used to group the data to - 3.0\ndotsize - adjusts the size of the dots in the plot to - 0.8\nfill - specifies the fill color of the dots to - red\ncolor - specifies the outline color of the dots to - yellow\nalpha - specifies the transparency level of the dots to - 0.5\n\n\n\nCode\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(binwidth=3.0,         \n               dotsize = 0.8,\n               fill=\"#E15841\",\n               color=\"#E1B941\",\n               alpha=0.5 ) +      \n  scale_y_continuous(NULL,           \n                     breaks = NULL)  \n\n\n\n\n\n\n\n\n\n\n\n1.7.3 Geometric objects: geom_histogram\ngeom_histogram()in ggplot creates a bar plot that displays the distribution of a continuous variable by dividing the data into bins and counting the number of observations in each bin.\nThe code below plots a simple histogram by using values in MATHS field of exam_data.\n\n\nCode\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_histogram()  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe default number of bins is 30, however one can always adjust the number of bins manually by using the bins() argument.\n\n\n\n\n1.7.4 Modifying a geometric object by changing geom()\nTo enhance the histogram visualization, the below (non exhaustive) are some arguments that has been added:\n\nbins - to change the number of bins to - 20\nfill - specifies the fill color of the histogram to - red\ncolor - specifies the outline color of the histogram to - green\n\n\n\nCode\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20,            \n                 color=\"#A8E141\",      \n                 fill=\"#E15841\")\n\n\n\n\n\n\n\n\n\n\n\n1.7.5 Modifying a geometric object by changing aes()\nThe code below changes the interior colour of the histogram (i.e. fill) by using a sub-group of aes().\nIn this case, the fill is based on GENDER.\n\n\nCode\nggplot(data=exam_data, \n       aes(x= MATHS, \n           fill = GENDER)) +\n  geom_histogram(bins=20, \n                 color=\"grey30\")\n\n\n\n\n\n\n\n\n\nWe can also specify the color of the fill based on GENDER.\nIn this case, we used the scale_fill_manual() function to assign specific colors to each gender. E.g.:\n\n\nPink for Female\n\n\nBlue for Male\n\nwhile keeping the outline grey\n\n\n\nCode\nggplot(data = exam_data, \n       aes(x = MATHS, \n           fill = GENDER)) +\n  geom_histogram(bins = 20, \n                 color = \"grey30\") +\n  scale_fill_manual(values = c(\"Female\" = \"pink\", \"Male\" = \"blue\"))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThis approach can be used to color, fill and alpha of the geometric.\n\n\n\n\n1.7.6 Geometric objects: geom_density\nThe geom_density() function computes and visualizes a kernel density estimate, which provides a smooth approximation of the data’s distribution.\nIt serves as a useful alternative to histograms for continuous data, particularly when the data originates from an underlying smooth distribution.\nThe code below plots the distribution of Maths scores in a kernel density plot.\n\n\nCode\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_density()\n\n\n\n\n\n\n\n\n\nThe code below plots two kernel density lines by using color or fill arguments of aes()\n\n\nCode\nggplot(data=exam_data, \n       aes(x = MATHS, \n           colour = GENDER)) +\n  geom_density()\n\n\n\n\n\n\n\n\n\nLikewise, by using scale_color_manual() function, we can map the colors of each gender explicitly, where\n\n\nPink for Female\n\n\nBlue for Male\n\n\n\n\nCode\nggplot(data = exam_data, \n       aes(x = MATHS, \n           colour = GENDER)) +\n  geom_density() +\n  scale_color_manual(values = c(\"Female\" = \"pink\", \"Male\" = \"blue\"))\n\n\n\n\n\n\n\n\n\n\n\n1.7.7 Geometric objects: geom_boxplot\ngeom_boxplot() function visualizes continuous data by displaying five key summary statistics: the median, the upper and lower hinges (quartiles), the whiskers, and individual outliers.\n\n\nCode\nggplot(data=exam_data, \n       aes(y = MATHS,       \n           x= GENDER)) +    \n  geom_boxplot()    \n\n\n\n\n\n\n\n\n\nTo enhance the boxplot visualization, the below (non exhaustive) are some arguments that has been added:\n\nfill - fills the boxplot with different colors based on a grouping variable - purple\ncolor - specifies the color of the boxplot borders to - green\noutlier.color - specifies the outlier color of the boxplot to - red\noutlier.shape - specifies the shape of the outlier points to - 16\nalpha - adjust the transparency of the boxplot fill - 0.7\nwidth - adjusts the width of the boxplots to - 0.7\n\n\n\nCode\nggplot(data = exam_data, \n       aes(y = MATHS,       \n           x = GENDER)) +    \n  geom_boxplot(fill = \"#6A5ACD\",      # Fills the boxes with a color\n               color = \"#ABE141\",     # Sets the border color of the boxes\n               outlier.color = \"red\",  # Colors the outliers\n               outlier.shape = 16,     # Sets the shape of the outliers\n               alpha = 0.7,            # Adjusts the transparency of the boxes\n               width = 0.7)            # Sets the width of the boxes\n\n\n\n\n\n\n\n\n\nLikewise, to specify different fill colors for female and male, we need to map the fill aesthetic to the Gender variable inside aes() and then define the specifc colors using scale_fill_manual().\n\n\nPink for Female\n\n\nBlue for Male\n\n\n\n\nCode\nggplot(data = exam_data, \n       aes(y = MATHS,       \n           x = GENDER, \n           fill = GENDER)) +   # Map fill aesthetic to GENDER\n  geom_boxplot(color = \"#ABE141\",      # Sets the border color of the boxes\n               outlier.color = \"red\",  # Colors the outliers\n               outlier.shape = 16,     # Sets the shape of the outliers\n               alpha = 0.7,            # Adjusts the transparency of the boxes\n               width = 0.7) +          # Sets the width of the boxes\n  scale_fill_manual(values = c(\"Female\" = \"pink\", \"Male\" = \"blue\"))  # Custom colors\n\n\n\n\n\n\n\n\n\nNotches in box plots help visually determine if the medians of distributions differ. Non-overlapping notches indicate distinct medians.\nThe code below plots the distribution of Maths scores by gender in notched plot instead of boxplot.\n\n\nCode\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot(notch=TRUE)\n\n\n\n\n\n\n\n\n\nLikewise, additional arguments can be added to improve the overall visualization of the notched plot\n\nfill - fills the notched plot with different colors based on a grouping variable\ncolor - specifies the color of the notched plot borders to - black\noutlier.color - specifies the outlier color of the boxplot to - red\noutlier.shape - specifies the shape of the outlier points to - 8\nalpha - adjust the transparency of the boxplot fill - 0.9\nnotchwidth - adjusts the width of the notches for improved clarity - 0.5\n\n\n\nCode\nggplot(data = exam_data, \n       aes(y = MATHS, \n           x = GENDER, \n           fill = GENDER)) +  # Add fill to differentiate genders\n  geom_boxplot(notch = TRUE, \n               outlier.colour = \"red\",   # Highlight outliers in red\n               outlier.shape = 8,       # Use a different shape for outliers\n               notchwidth = 0.5,        # Adjust the notch width for emphasis\n               color = \"black\",\n               alpha = 0.9) +      \n  scale_fill_manual(values = c(\"Female\" = \"pink\", \"Male\" = \"blue\"))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nTo refer to here for ggplot point shapes best tips and tricks\n\n\n\n\n1.7.8 Geometric objects: geom_violin\ngeom_violin creates violin plots, which are useful for comparing multiple data distributions. Unlike density curves, which can overlap and become hard to interpret, violin plots place distributions side by side, making comparisons clearer and more visually accessible.\nThe code below plots the distribution of Maths score by gender using violin plots.\n\n\nCode\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_violin()\n\n\n\n\n\n\n\n\n\nLikewise, additional arguments can be added to improve the overall visualization of the violin plot\n\nfill - maps the violin fill color to gender\nscale_fill_manual() - assigns custom colors for Female and Male\ntrim - ensures the plot displayes the full range of data, even for smaller distributions\ncolor - adds an outline to make the violins visually distinct\n\n\n\nCode\nggplot(data = exam_data, \n       aes(y = MATHS, \n           x = GENDER, \n           fill = GENDER)) +  # Map fill to GENDER\n  geom_violin(trim = FALSE,   # Show the full range of the data\n              scale = \"width\", # Adjust width for comparability\n              color = \"black\") +  # Add a black outline to the violins\n  scale_fill_manual(values = c(\"Female\" = \"pink\", \n                               \"Male\" = \"blue\"))\n\n\n\n\n\n\n\n\n\n\n\n1.7.9 Geometric objects: geom_point\ngeom_point() is useful for creating scatterplot.\nThe code below plots a scatterplot showing the Maths and English grades of pupils by using geom_point()\n\n\nCode\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() \n\n\n\n\n\n\n\n\n\nLikewise, additional arguments can be added to improve the overall visualization of the scatter plot\n\ncolor - set all points to a fixed blue color\nsize - set the size of the points to a fixed value (adjustable) to - 3\nalpha - adds transparency to reduce overlap if points are cluttered\nshape - set the apperance of the points in the scatter plot (e.g.: square, circle, triangle)\n\n\n\nCode\nggplot(data = exam_data, \n       aes(x = MATHS, \n           y = ENGLISH)) +\n  geom_point(color = \"blue\", size = 3, alpha = 0.5, shape = 20)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nTo refer to here for ggplot point shapes best tips and tricks\n\n\n\n\n1.7.10 Combining geometric objects\nThe code below plots the data points on the boxplots by using both geom_boxplot() and geom_point().\n\n\nCode\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot() +                    \n  geom_point(position=\"jitter\", \n             size = 0.5)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nReflection\n\n\n\n\nLearnt about the different geometric objects such as geom_bar,geom_dotplot,geom_histogram,geom_density, geom_boxplot,geom_violin,geom_point etc.\nLearnt about how to combine different geometric objects together in one chart - e.g.: geom_boxplot and geom_point\n\n\n\n\n\n\n1.8 Essential grammatical elements in ggplot2: stat\nThe Statistics functions statistically transforms data, as a form of summary.\nExample include: - calculating the frequency of variable values - calculating the mean - determing confidence limits\nThere are two ways to use these functions: - add a stat_() function and override the default geom, or - add a geom_() function and override the default stat.\n\n1.8.1 Working with stat()\nThe boxplots below are incomplete because the means are not shown.\n\n\nCode\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot()\n\n\n\n\n\n\n\n\n\n\n\n1.8.2 Working with stat_summary()\nThe code below uses the stat_summary() function to add mean values by replacing the default geometric layer (geom).\n\n\nCode\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  stat_summary(geom = \"point\",       \n               fun = \"mean\",         \n               colour =\"blue\",        \n               size=4) \n\n\n\n\n\n\n\n\n\n\n\n1.8.3 Working with geom() method\nThe code below uses the geom() function to add mean values by replacing the default geometric layer (geom).\n\n\nCode\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  geom_point(stat=\"summary\",        \n             fun=\"mean\",           \n             colour=\"blue\",          \n             size=4)          \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nReflection\n\n\n\n\nBoth codes achieve the same result - boxplot with mean values as blue points overlaid on the plot\nThe first code uses stat_summary explicitly where summary is calculated fun = \"mean\", and then visualized using the geometry geom=\"point\". It provides more flexibility if one want to switch the geometry.\nThe second code uses geom_point with stat=\"summary\", where it computes the mean and plots it directly.\nOverall, I would prefer the second code as it feel more intuitive and focuses on using a geometry geom_point and overridding its default statistical transformation.\n\n\n\n\n\n1.8.4 Adding a best fit curve on a scatterplot?\nThe scatterplot below illustrates the relationship between Maths and English grades.\nAdding a best-fit curve can enhance its interpretability.\n\n\nCode\necho=FALSE\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() \n\n\n\n\n\n\n\n\n\ngeom_smooth() is used to plot a best fit curve on the scatterplot.\n\n\nCode\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(size=0.5)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe default method used is LOESS - Locally Estimted Scatterplot Smoothing which refers to a regression method used for smoothing data points in a scatterplot, useful for capturing non-linear trends in the data.\n\n\nThe default method can be overriden as shown below:\n\n\nCode\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              linewidth=0.5)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nIn this case, method = \"lm\" specifies that a linear regression line should be fitted to the data.\nRefer here for more information on the different methods available in geom_smooth().\n\n\nLikewise, additional arguments can be added to improve the overall visualization of the scatter plot\n\ncolor - sets the color of the regression line\nsize - adjusts the thickness of the line\n\n\n\nCode\nggplot(data = exam_data, \n       aes(x = MATHS, y = ENGLISH)) +\n  geom_point() +\n  geom_smooth(method = \"lm\", color = \"red\", size = 1)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nReflection\n\n\n\n\nLearnt the two ways to add statistical functions to ggplot2 - stat_() and geom_()\nLearnt how to incorporate a best fit curve on to the scatterplot geom_smooth()\nLearnt the different regression methods available ingeom_smooth()\n\n\n\n\n\n\n1.9 Essential grammatical elements in ggplot2: Facets\nFacetting in ggplot2 creates small multiples, or trellis plots, to display different subsets of data. This approach is an alternative to using aesthetics (such as color or shape) for displaying additional variables. There are two main types of faceting in ggplot2:\n\nfacet_wrap() : wraps multiple plots into a single panel, typically based on a single categorical variable. It will automatically arranges the plots into a grid.\nfacet_grid() : organizes plots into a grid based on the values of two categorical variables, one for rows and the other for columns.\n\n\n1.9.1 Working with facet_wrap()\nfacet_wrap arranges a 1D sequence of panels into a 2D layout, making better use of screen space, especially on rectangular displays. It is often more efficient than facet_grid() for displaying a variable across multiple categories\nThe code below produces a 2D matrix of ‘MATHS’ histograms grouped by variable ‘CLASS’ using facet_wrap(~CLASS).\n\n\nCode\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_wrap(~ CLASS)\n\n\n\n\n\n\n\n\n\n\n\n1.9.2 Working with facet_grid()\nfacet_grid creates a matrix of panels based on two discrete variables, one for rows and the other for columns. It is most useful when both variables have all possible combinations in the data.\nThe code below plots a trellis plot using facet_grid().\n\n\nCode\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_grid(~ CLASS)\n\n\n\n\n\n\n\n\n\n\n\n\n1.10 Essential grammatical elements in ggplot2: Coordinates\nThe Coordinates functions map the position of objects onto the plane of the plot.\nThere are a number of different possible coordinate systems to use:\n\ncoord_cartesian(): the default cartesian coordinate systems, where you specify x and y values (e.g. allows you to zoom in or out).\ncoord_flip(): a cartesian system with the x and y flipped.\ncoord_fixed(): a cartesian system with a “fixed” aspect ratio (e.g. 1.78 for a “widescreen” plot).\ncoord_quickmap(): a coordinate system that approximates a good aspect ratio for maps.\n\n\n1.10.1 Working with Coordinate\nBy default the bar charts in ggplot2 are vertical, as shown:\n\n\n\n\n\n\n\n\n\nUsing coord_flip(), we can flip the vertical bar chart to a horizontal one.\n\n\nCode\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip()\n\n\n\n\n\n\n\n\n\n\n\n1.10.2 Changing the x and y axis range\nThe scatterplot below is misleading as the x and y axes are not equal. This can create confusion to the readers.\n\n\nCode\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, size=0.5)\n\n\n\n\n\n\n\n\n\nThe code below will set both the x and y axis range to 0-100.\n\n\nCode\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\n\n\n\n\n\n\n\n\n\n\n\n1.11 Essential grammatical elements in ggplot2: Themes\nThemes control elements of the graph which are not related to the data such as\n\nbackground color\nfonts size\ngridlines\nlabels color\n\nSome of the Built-in themes include:\n\ntheme_gray(): default theme, with a light gray background and white gridlines.\ntheme_bw(): theme with a black-and-white color scheme - white background, black gridlines and axis lines\ntheme_classic(): theme with a minimalist look - white background and no gridlines\n\nThe list of all other themes available can be found at this link\n\n1.11.1 Working with Themes\nThe code below plot a horizontal bar chart using theme_gray()\n\n\nCode\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_gray()\n\n\n\n\n\n\n\n\n\nThe code below plot a horizontal bar chart using theme_bw()\n\n\nCode\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_bw()\n\n\n\n\n\n\n\n\n\nThe code below plot a horizontal bar chart using theme_classic()\n\n\nCode\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_classic()\n\n\n\n\n\n\n\n\n\nWe can further customize the chart by additional arguments using theme().\n\n\nCode\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar(fill=\"skyblue\", color=\"black\", size=0.7) +  \n  coord_flip() +\n  theme_minimal() +\n   theme(panel.background = element_rect(fill = \"lightgrey\",\n                                         color = \"white\"))\n\n\n\n\n\n\n\n\n\n\n\n\n1.12 References\n\nKam, T.S. (2023).A Layered Grammar of Graphics: ggplot2 methods.\nHadley Wickham (2023) ggplot2: Elegant Graphics for Data Analysis.Online 3rd edition.\nWinston Chang (2013) R Graphics Cookbook 2nd edition. Online version.\nHealy, Kieran (2019) Data Visualization: A practical introduction. Online version\nLearning ggplot2 on Paper – Components\nLearning ggplot2 on Paper – Layer\nLearning ggplot2 on Paper – Scale\n\n\n1.12.1 Additional references\n\nQuarto_overall_guide\nQuarto_markdown_basic\nQuarto_interactive_layout\n\n\n\n\n1.13 Takeaway\n\n\n\n\n\n\nTakeaway\n\n\n\n\nUnderstand the foundational principles of ggplot2 for creating graphics.\nLearn to set up the environment by installing necessary R packages. E.g.: library(ggplot2)\nUnderstand the concept of aesthetic mappings and geometric objects.\nExplore how to layer different elements like stats, facets, and coordinates.\nLearnt the importance of various themes in customizing the appearance of plots.\nApply practical examples to reinforce the concepts and improve visual analytics skills.\necho=FALSE: Hides the code while executing it to display the plot in the final output\n\n\n\n\n1.13.1 Further exploration\n1. Is it possible to add mean, median and a title on histogram?\nBefore:\n\n\nCode\nggplot(data=exam_data, aes(x = MATHS)) +\n  geom_histogram(bins=10, \n                 boundary = 100,\n                 color=\"black\", \n                 fill=\"#4169e1\") +\n  ggtitle(\"Distribution of Maths scores\")\n\n\n\n\n\n\n\n\n\nAfter:\n\ngeom_vline(): adds vertical lines for mean and median\nlabs(): used to set the title and add a label for the legend\nscale_color_manual(): set the colors for mean and median\n\n\n\nCode\n# Calculate mean and median\nmean_value &lt;- mean(exam_data$MATHS, na.rm = TRUE)\nmedian_value &lt;- median(exam_data$MATHS, na.rm = TRUE)\n\n# Create a data frame for the mean and median lines\nline_data &lt;- data.frame(\n  value = c(mean_value, median_value),\n  type = factor(c(\"Mean\", \"Median\"))\n)\n\n# Create the histogram with mean and median lines and a legend\nggplot(data = exam_data, aes(x = MATHS)) +\n  geom_histogram(bins = 10, \n                 boundary = 100, \n                 color = \"black\", \n                 fill = \"#4169e1\") +\n  geom_vline(data = line_data, aes(xintercept = value, color = type), \n             linetype = \"dashed\", \n             size = 1) +\n  scale_color_manual(values = c(\"Mean\" = \"red\", \"Median\" = \"green\")) +\n  labs(title = \"Distribution of Maths Scores\",\n       x = \"Maths Scores\",\n       y = \"Frequency\",\n       color = \"Statistics\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n2. Exploring other useful combinations of geometric objects in ggplot2?\n\nBox plot with jittered points (geom_boxplot()+ geom_jitter())\nUse case: To see the spread of ENGLISH scores across Gender, and identify any outliers.\n\n\n\nCode\nggplot(data=exam_data, aes(x=GENDER, y=ENGLISH)) +\n  geom_boxplot(fill=\"lightblue\") +   # Box plot for distribution\n  geom_jitter(width=0.1, size=1, alpha=0.7)  # Jittered points for individual data\n\n\n\n\n\n\n\n\n\nConclusion:\n\nFemale students tend to have a slightly higher median English score compared to male students.\nMale students exhibit greater variability in their English scores, with a wider range of scores observed compared to female students.\n\n\n\n\n\nlibrary(ggplot2)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03a.html",
    "href": "Hands-on_Ex/Hands-on_Ex03a.html",
    "title": "Hands-on Exercise 03a",
    "section": "",
    "text": "With the assistance of ChatGPT"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03a.html#programming-interactive-data-visualisation-with-r",
    "href": "Hands-on_Ex/Hands-on_Ex03a.html#programming-interactive-data-visualisation-with-r",
    "title": "Hands-on Exercise 03a",
    "section": "3. Programming Interactive Data Visualisation with R",
    "text": "3. Programming Interactive Data Visualisation with R\n\n3.1 Learning outcome\nIn this exercise, we will be exploring how to create interactive data visualizations using the ggiraph and plotlyr packages.\n\n\n3.2 Getting started\nWe will check, install, and load the following R packages, if not already done so:\n\ngiraph: Adds interactivity to ggplot graphics.\nplotly: Enables interactive statistical plotting.\nDT: Provides an interface to the JavaScript library DataTables for interactive HTML tables.\ntidyverse: A collection of R packages for data science, including static graph creation.\npatchwork:Combines multiple ggplot2 graphs into a single figure.\n\n\n\nCode\npacman::p_load(ggiraph, plotly, \n               patchwork, DT, tidyverse) \n\n\n\n\n3.3 Importing data\nIn this section, we will use the read_csv() function from the readr package to import the Exam_data.csv file into R. The file will be loaded as a tibble data frame and saved as exam_data.\n\n\nCode\nexam_data &lt;- read_csv(\"data/Exam_data.csv\", show_col_types = FALSE)\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nThis section data is the same dataset used in Hands-on_Ex01 and Hands-on_Ex02\n\n\n\n\n\n3.4 Interactive data visualisation - ggiraph\nggiraph is an HTML widget and an extension of ggplot2, enabling interactive ggplot graphics. Interactivity is achieved using three key arguments:\n\nTooltip: Displays information when hovering over elements.\nOnclick: Executes a JavaScript function when elements are clicked.\nData_id: Associates elements with unique IDs for further interaction.\n\nIn Shiny applications, elements with data_id can be selected and manipulated on both the client and server sides. For more details, refer here.\n\n3.4.1 Tooltip effect with tooltip aesthetic\nThe code shows how to create an interactive statistical graph using the ggiraph package.\nIt consists of two steps:\n\nFirst, a ggplot object is created, and\nSecond, the girafe() function of ggiraph is used to convert it into an interactive SVG object.\n\n\n\nCode\np &lt;- ggplot(data=exam_data, \n       aes(x = ENGLISH)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE, \n    binwidth = 1, \n    method = \"histodot\") +\n  scale_y_continuous(NULL, \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nUnderstand the 2 steps\n\n1. An interactive version of ggplot2 geom (i.e. geom_dotplot_interactive()) will be used to create the basic graph.\n2. girafe() will be used to generate an svg object to be displayed on an html page.\n\n\n\n\n\n\n\n\n\nExtra\n\n\n\n\nAn SVG object is a scalable, resolution-independent graphic format used in ggiraph to render interactive plots with tooltips and click events in web-based applications.\n\n\n\n\n\n\n3.5 Interactivity\nNotice that by hovering the mouse pointer on the chart, the student’s ID will be displayed.\n\n\n\n\n\n\n\n3.5.1 Displaying multiple information on tooltip\nThe tooltip information can be customizable by including a list object as shown below.\nThe code below shows that the tooltip will reflect the Name and Class information from the ID and Class table respectively from the exam_data table.\n\n\nCode\nexam_data$tooltip &lt;- c(paste0(     \n  \"Name = \", exam_data$ID,         \n  \"\\n Class = \", exam_data$CLASS)) \n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = exam_data$tooltip), \n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 8,\n  height_svg = 8*0.618\n)\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe first three lines of code in the chunk create a new field named tooltip by combining the text from the ID and CLASS fields. This newly created tooltip field is then used to display tooltips in the plot.\n\n\n\n\n\n3.6 Interactivity with customizable tooltip\nNotice that by hovering the mouse pointer on the chart, the student’s ID and the classs details will be displayed.\n\n\n\n\n\n\n\n3.6.1 Customising tooltip style\nThe code below uses opts_tooltip() of ggiraph to customize the tooltip by adding css declarations.\n\nStyle 1Style 2Style 3\n\n\n\nTooltip aesthetic:Bold text with white background\nX axis: MATHS Score\nTooltip details: ID\n\n\n\nCode\ntooltip_css &lt;- \"background-color:white; #&lt;&lt;\nfont-style:bold; color:black;\" #&lt;&lt;\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = ID),                   \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(    #&lt;&lt;\n    opts_tooltip(    #&lt;&lt;\n      css = tooltip_css)) #&lt;&lt;\n)                                        \n\n\n\n\n\n\n\n\n\nTooltip aesthetic: Bold text with yellow background\nX axis: MATHS Score\nTooltip details: ID\n\n\n\nCode\ntooltip_css &lt;- \"background-color: yellow; \n                color: black; \n                font-weight: bold;\"\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = ID),                   \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(    #&lt;&lt;\n    opts_tooltip(    #&lt;&lt;\n      css = tooltip_css)) #&lt;&lt;\n)             \n\n\n\n\n\n\n\n\n\nTooltip aesthetic: Bold text with blue background\nX axis: ENGLISH Score\nTooltip details: Added “ID”, “CLASS”, “GENDER”, and “RACE” in tooltip\n\n\n\nCode\ntooltip_css &lt;- \"background-color: blue; \n                color: white; \n                font-weight: bold;\"\n\nexam_data$tooltip &lt;- c(paste0(     \n  \"ID = \", exam_data$ID,         \n  \"\\n Class = \", exam_data$CLASS,\n  \"\\n Gender = \", exam_data$GENDER,\n  \"\\n RACE = \", exam_data$RACE,\n  \"\\n English = \", exam_data$ENGLISH)) \n\np &lt;- ggplot(data=exam_data, \n       aes(x = ENGLISH)) +\n  geom_dotplot_interactive(\n    aes(tooltip = tooltip), \n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 8,\n  height_svg = 8*0.618,\n  options = list(\n    opts_tooltip(css = tooltip_css) # Pass the custom CSS for the tooltip\n  )\n)\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe paste0() function ensures that the column has no missing or has NA value, if not R raises the “argument is missing, with no default” error.\nAs we are using the same dataset as in Hands-on_Ex01 and Hands-on_Ex02, we have ensured that there are no NA values.\n\n\n\n\n\nRefer to “Customizing girafe objects” for instructions on customizing ggiraph visualizations.\n\n\n3.6.2 Displaying statistics on tooltip\nThe code chunk below shows an advanced method for customizing tooltips. It uses a function to calculate the 90% confidence interval of the mean, and the computed statistics are displayed in the tooltip.\n\nMaths score across racesMaths score across CLASSMaths score across GENDER\n\n\n\n\nCode\ntooltip &lt;- function(y, ymax, accuracy = .01) {\n  mean &lt;- scales::number(y, accuracy = accuracy)\n  sem &lt;- scales::number(ymax - y, accuracy = accuracy)\n  paste(\"Mean maths scores:\", mean, \"+/-\", sem)\n}\n\ngg_point &lt;- ggplot(data=exam_data, \n                   aes(x = RACE),\n) +\n  stat_summary(aes(y = MATHS, \n                   tooltip = after_stat(  \n                     tooltip(y, ymax))),  \n    fun.data = \"mean_se\", \n    geom = GeomInteractiveCol,  \n    fill = \"pink\"\n  ) +\n  stat_summary(aes(y = MATHS),\n    fun.data = mean_se,\n    geom = \"errorbar\", width = 0.2, linewidth = 0.2\n  )\n\ngirafe(ggobj = gg_point,\n       width_svg = 8,\n       height_svg = 8*0.618)\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nReplaced size=0.5 with linewidth-0.5 in the geom_smooth() function to align the code with the latest ggplot2 standards.\n\n\n\n\n\n\n\n\n\nConclusion\n\n\n\n\nThe Chinese group has the highest average Maths score compared to other groups.\nThe Malay group has the lowest average Maths score among the groups.\nNoticeable performance gap between the Chinese group (highest) and the Malay group (lowest), suggesting potential differences in educational performance across these groups.\n\n\n\n\n\n\n\nCode\nlibrary(ggplot2)\nlibrary(ggiraph)\nlibrary(scales)\n\ntooltip &lt;- function(y, ymax, accuracy = .01) {\n  mean &lt;- number(y, accuracy = accuracy)\n  sem &lt;- number(ymax - y, accuracy = accuracy)\n  paste(\"Mean maths scores:\", mean, \"+/-\", sem)\n}\n\ngg_point &lt;- ggplot(data = exam_data, \n                   aes(x = CLASS)) +  \n  stat_summary(aes(y = MATHS, \n                   tooltip = after_stat(\n                     tooltip(y, ymax))),  \n               fun.data = \"mean_se\", \n               geom = GeomInteractiveCol,  \n               fill = \"lightblue\") +  \n  stat_summary(aes(y = MATHS),\n               fun.data = mean_se,\n               geom = \"errorbar\", \n               width = 0.2, \n               linewidth = 0.2)\n\ngirafe(ggobj = gg_point,\n       width_svg = 8,\n       height_svg = 8 * 0.618)\n\n\n\n\n\n\n\n\n\n\n\n\nConclusion\n\n\n\n\nHighest Performance: Class 3A has the highest average Maths score among all classes.\nNoticeable decline in average Maths scores as you move from Class 3A to Class 3I.\nClass 3I has the lowest average Maths score, with a significant gap compared to Class 3A.\n\n\n\n\n\n\n\nCode\nlibrary(ggplot2)\nlibrary(ggiraph)\nlibrary(scales)\n\ntooltip &lt;- function(y, ymax, accuracy = .01) {\n  mean &lt;- number(y, accuracy = accuracy)\n  sem &lt;- number(ymax - y, accuracy = accuracy)\n  paste(\"Mean maths scores:\", mean, \"+/-\", sem)\n}\n\ngg_point &lt;- ggplot(data = exam_data, \n                   aes(x = GENDER)) +  \n  stat_summary(aes(y = MATHS, \n                   tooltip = after_stat(\n                     tooltip(y, ymax))),  \n               fun.data = \"mean_se\", \n               geom = GeomInteractiveCol,  \n               fill = \"lightgreen\") +  \n  stat_summary(aes(y = MATHS),\n               fun.data = mean_se,\n               geom = \"errorbar\", \n               width = 0.2, \n               linewidth = 0.2)\n\ngirafe(ggobj = gg_point,\n       width_svg = 8,\n       height_svg = 8 * 0.618)\n\n\n\n\n\n\n\n\n\n\n\n\nConclusion\n\n\n\n\nSimilar Performance: Both Female and Male groups have very similar average Maths scores, with minimal difference.\nNo Significant Gap: There is no significant performance gap between females and males in Maths scores.\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nThe same analysis can be applied to the “ENGLISH” and “SCIENCE” scores as well.\n\n\n\n\n\n\n\n\n3.6.3 Hover effect with data_id aesthetic\nThe code below shows another interactive feature of ggiraph, data_id.\n\n\nCode\np4 &lt;- ggplot(data=exam_data, \n       aes(x = SCIENCE)) +\n  geom_dotplot_interactive(           \n    aes(data_id = CLASS),             \n    stackgroups = TRUE,               \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p4,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618                      \n)                                        \n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nThe default value of the hover css is *hover_css = “fill:orange;”.\n\n\n\n\nAdded tooltip with more information: CLASS; SCIENCE score\nChanged histodots to lightgrey\nUsing opts_hover(css=\"fill:green;\"), changed the fill color of the dots to green when hovered over\n\n\n\n\n\n\n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over.\n\n\n3.6.4 Styling hover effect\nAnother highlighting effect: - Using opts_hover(css = \"fill: #202020;\"), changed the fill color of the dots to black when hovered over - Using opts_hover_inv(css = \"opacity:0.2;\") create the opacity of the dots\n\n\nCode\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n) \n\n\n\n\n\n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over.\n\n\n\n\n\n\nNote\n\n\n\n\nDifferent from previous example, in this example the ccs customisation request are encoded directly.\n\n\n\n\n\n3.6.5 Combining tooltip and hover effect\nBelow code will combine tooltip and hover effect on the interactive statistical graph:\n\n\nCode\n#| echo: true\n#| eval: false\n\np5 &lt;- ggplot(data=exam_data, \n       aes(x = SCIENCE)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = CLASS, \n        data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p5,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #E15841;\"),  \n    opts_hover_inv(css = \"opacity:0.1;\") \n  )                                      \n)\n\n\n\n\n\n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over. At the same time, the tooltip will show the CLASS.\n\n\n3.6.6 Click effect with onclick\nonclick argument of ggiraph provides hotlink interactivity on the web.\nThe code below shows an example of onclick.\nI have also incorprated both onclick and hover functionality together in an interactive plot using the ggiraph package.\n\n\nCode\nexam_data$onclick &lt;- sprintf(\n  \"window.open(\\\"%s%s\\\")\",\n  \"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school\",\n  as.character(exam_data$ID)\n)\n\np &lt;- ggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(\n      onclick = onclick,                 # Onclick functionality\n      tooltip = paste(\"ID:\", ID)         # Tooltip for hover functionality\n    ),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\",\n    fill = \"lightgreen\"                  # Default dot color\n  ) +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\n# Generate the interactive plot with hover and onclick\ngirafe(\n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6 * 0.618,\n  options = list(\n    opts_hover(css = \"fill: blue;\"),     # Change fill color on hover\n    opts_hover_inv(css = \"opacity:0.1;\") # Dim non-hovered elements\n  )\n)                                  \n\n\n\n\n\n\nInteractivity: Web document link with a data object will be displayed on the web browser upon mouse click.\nIn this case, upon clicking on the chart, it will bring user to the MOE SchoolFinder webpage.\n\n\n\n\n\n\nWarning\n\n\n\n\nNote that click actions must be a string column in the data set containing valid javascript instructions\n\n\n\n\n\n3.6.7 Coordinated multiple views with ggiraph\nThe data visualization below shows coordinated multiple views techniques.\nThe example demonstrates coordinated multiple views, where selecting a data point in one dotplot highlights the corresponding data point ID in the second visualization.\nTo implement this, the following strategy will be used: - Interactive functions from the ggiraph package will enable the creation of interative multiple views. - The patchwork function will be integrated within the girafe function to build the interactive coordinated multiple views.\n\n\nCode\np_1 &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +  \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\np_2 &lt;- ggplot(data=exam_data, \n       aes(x = SCIENCE)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") + \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\ngirafe(code = print(p_1 + p_2), \n       width_svg = 6,\n       height_svg = 3,\n       options = list(\n         opts_hover(css = \"fill: #800080;\"),\n         opts_hover_inv(css = \"opacity:0.2;\")\n         )\n       ) \n\n\n\n\n\n\nIn this case, the date_id is critical to link observations between plots and the tooltip aesthetic is optional but nice to have when we mouse over a point.\nAdded tooltip displaying the scores of MATHS and SCIENCE for each ID:\n\n\nCode\n# Plot 1: Maths Dotplot\np_1 &lt;- ggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID, \n        tooltip = paste(\"ID:\", ID, \"&lt;br&gt;Maths:\", MATHS)),  # Add tooltip for Maths\n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +  \n  coord_cartesian(xlim = c(0, 100)) + \n  scale_y_continuous(NULL, breaks = NULL)\n\n# Plot 2: Science Dotplot\np_2 &lt;- ggplot(data = exam_data, \n       aes(x = SCIENCE)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID, \n        tooltip = paste(\"ID:\", ID, \"&lt;br&gt;Science:\", SCIENCE)),  # Add tooltip for Science\n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") + \n  coord_cartesian(xlim = c(0, 100)) + \n  scale_y_continuous(NULL, breaks = NULL)\n\n# Combine plots and add interactivity\ngirafe(code = print(p_1 + p_2), \n       width_svg = 6,\n       height_svg = 3,\n       options = list(\n         opts_hover(css = \"fill: #800080;\"), \n         opts_hover_inv(css = \"opacity:0.2;\")\n       )\n)\n\n\n\n\n\n\n\n\n\n3.7 Interactive data visualization - plotly method\nPlotly’s R graphing library enables the creation of interactive web graphics using ggplot2 or a custom interface inspired by the grammar of graphics. Unlike other Plotly platforms, plotly for R is free and open-source, built on the MIT-licensed plotly.js JavaScript library.\nThere are two ways to create interactive graph by using plotly:\n\nplot_ly():A function in Plotly’s R library for building interactive visualizations from scratch.\nggplotly():A function that converts static ggplot2 visualizations into interactive Plotly graphics.\n\n\n3.7.1 Creating an interactive scatter plot: plot_ly() method\n\nPlot()Code()\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nplot_ly(data = exam_data, \n             x = ~MATHS, \n             y = ~ENGLISH)\n\n\n\n\n\n\n\n3.7.2 Working with visual variable: plot_ly() method\nThe color argument is added to a qualitative visual variable (e.g.: RACE)\n\nPlot()Code()\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nplot_ly(data = exam_data, \n        x = ~ENGLISH, \n        y = ~MATHS, \n        color = ~RACE)\n\n\n\n\n\n\n\n3.7.3 Creating an interactive scatter plot: ggplotly() method\nThe code plots an interactive scatter plot by using ggplotly().\n\nPlot()Code()\n\n\n\n\n\n\n\n\n\n\n\n\nCode\np &lt;- ggplot(data=exam_data, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nggplotly(p)\n\n\nThe only additional line required in the code chunk is ggplotly().\n\n\n\n\n\n3.7.4 Coordinated multiple views with plotly\nCreating a coordinated linked plot with plotly involves three key steps:\n\nShare Data: Use highlight_key]() from the Plotly package to create shared data.\nCreate Scatterplots: Generate two scatterplots using the ggplot2 functions.\nCombine Plots: Use subplot() from the Plotly package to arrange the plots side by side.\n\n\nPlot()Code()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nClick on a data point of one of the scatterplot and see how the corresponding point on the other scatterplot is selected.\n\n\n\n\n\n\n\nCode\nd &lt;- highlight_key(exam_data)\np1 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\np2 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = SCIENCE)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nsubplot(ggplotly(p1),\n        ggplotly(p2))\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nhighlight_key() creates an object of class crosstalk::SharedData\nVisit this link to learn more about crosstalk.\ncrosstalk::SharedData is a function provided by the Crosstalk package in R, which enables shared interactivity between multiple visualizations or widgets.\n\n\n\n\n\n\n\n\n\n3.8 Interactive data visualization - crosstalk methods!\nCrosstalk is an extension for the htmlwidgets package that provides classes, functions, and conventions to enable cross-widget interactions, such as linked brushing and filtering.\n\n3.8.1 Interactive data table: DT package\n\nDataTables is a wrapper for the JavaScript library DataTables, allowing R data objects to be displayed as interactive HTML tables.\nIt is commonly used in R Markdown or Shiny applications.\n\n\n\nCode\nDT::datatable(exam_data, class= \"compact\")\n\n\n\n\n\n\n\n\n3.8.2 Linked brushing: crosstalk method\n\nPlot()Code()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode below is used to implement the coordinated brushing shown:\n\n\nCode\nd &lt;- highlight_key(exam_data) \np &lt;- ggplot(d, \n            aes(ENGLISH, \n                MATHS)) + \n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\ngg &lt;- highlight(ggplotly(p),        \n                \"plotly_selected\")  \n\ncrosstalk::bscols(gg,               \n                  DT::datatable(d), \n                  widths = 5)        \n\n\n\n\n\n\n\n\nNote\n\n\n\nThings to learn: - [*highlight()]*(https://www.rdocumentation.org/packages/plotly/versions/4.10.4/topics/highlight) is a function of plotly package. It sets a variety of options for brushing (i.e., highlighting) multiple plots. These options are primarily designed for linking multiple plotly graphs, and may not behave as expected when linking plotly to another htmlwidget package via crosstalk. In some cases, other htmlwidgets will respect these options, such as persistent selection in leaflet.\n\nbscols() is a helper function of crosstalk package. It makes it easy to put HTML elements side by side. It can be called directly from the console but is especially designed to work in an R Markdown document. Warning: This will bring in all of Bootstrap!\n\n\n\n\n\n\n\n\n\n3.9 Reference\n\n3.9.1 ggiraph\nRefer here for the online version and useful articles of ggiraph. This link to download the pdf version of the reference guide.\n\nHow to Plot With Ggiraph\nInteractive map of France with ggiraph\nCustom interactive sunbursts with ggplot in R\nLink provides code example on how ggiraph is used to interactive graphs for Swiss Olympians - the solo specialists.\n\n\n\n3.9.2 plotly for R\n\nGetting Started with Plotly in R\nCollection of plotly R graphs are available via this link\nCarson Sievert (2020) Interactive web-based data visualization with R, plotly, and shiny, Chapman and Hall/CRC is the best resource to learn plotly for R. The online version is available via this link\nPlotly R Figure Reference provides a comprehensive discussion of each visual representations.\nPlotly R Library Fundamentals is a good place to learn the fundamental features of Plotly’s R API.\nGetting Started\nVisit this link for a very interesting implementation of gganimate by your senior.\nBuilding an animation step-by-step with gganimate.\nCreating a composite gif with multiple gganimate panels\n\n\n\n3.9.3 Overall reference\n\nKam, T.S. (2023).3 Programming Interactive Data Visualisation with R\n\n\n\n\n4.0 Takeaway\n\n\n\n\n\n\nKey takeaways\n\n\n\n\nKey packages used - ggiraph, plotly, DT,tidyverse,patchwork\nLearnt about interactive visualizations with ggiraph such as - Tooltip,Hover effects,Onclick actions, and coordinated views\nLearnt about interactive visualizations with plotly such as - using highlight_key()for shared data and subplot() to display coordinated views\nLearnt about crosstalk for cross-widget interaction such as - linked brushing and filtering\n\n\n\n\n\n5.0 Further exploration\n\nExploration of different types of interactive plots, apart from geom_dotplot_interative():\n\n\ngeom_bar_interactivegeom_density_interactive\n\n\nObservations:\n\nScore distribution:shows a right-skewed distribution, with a higher concentration of students scoring between 60 and 90 in MATHS.\nClass variability: With the tooltip tied to the CLASS variable, while hovering over the bars in the interactive chart, we can see that CLASS 3A dominate a high score ranges (i.e.: they excel in MATHS). Whereas, CLASS 3I students struggle in MATHS.\n\n\n\nCode\np &lt;- ggplot(data = exam_data, \n            aes(x = MATHS)) +\n  geom_bar_interactive(\n    aes(tooltip = CLASS, \n        data_id = CLASS), \n    width = 0.8\n  ) +\n  scale_y_continuous(NULL, breaks = NULL)\n\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6 * 0.618,\n  options = list(\n    opts_hover(css = \"fill: #202020;\"),\n    opts_hover_inv(css = \"opacity:0.2;\")\n  )\n)\n\n\n\n\n\n\n\n\nObservations:\n\nClass performance: Some classes, such as 3A and 3B, seem to have consistently higher scores compared to others like 3I and 3H.\nSpread of scores: Classes such as 3F and 3G show a broader spread of scores indicating a wider variation in student performance, as compared to 3B with a tighter range.\n\n\n\nCode\np &lt;- ggplot(data = exam_data, \n            aes(x = MATHS)) +\n  geom_density_interactive(\n    aes(tooltip = CLASS, \n        data_id = CLASS),\n    fill = \"#69b3a2\", \n    alpha = 0.5\n  ) +\n  scale_y_continuous(NULL, breaks = NULL)\n\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6 * 0.618,\n  options = list(\n    opts_hover(css = \"fill: #202020;\"),\n    opts_hover_inv(css = \"opacity:0.2;\")\n  )\n)\n\n\n\n\n\n\n\n\n\n\nUsing plot_ly method to explore setting of colors for interactive plot\n\n\nGraphCode\n\n\nObservations:\n\nPositive correlation: Positive relationship between MATHS and ENGLISH scores, as higher MATHS scores generally correspond to higher ENGLISH scores.\nClass grouping: Class 3A generally score higher in both subjects, Class 3I tend to have lower scores in both subjects.\nOutliers: A few students score relatively low in one subject while doing better in other.\n\n\n\n\n\n\n\n\n\n\n\nCode\nplot_ly(\n  data = exam_data,\n  x = ~MATHS,\n  y = ~ENGLISH,\n  type = 'scatter',\n  mode = 'markers',\n  color = ~CLASS,  # Dynamically color points based on CLASS\n  colors = colorRampPalette(c(\"blue\", \"green\", \"yellow\"))(length(unique(exam_data$CLASS))), \n  marker = list(\n    size = 10,  # Set marker size\n    opacity = 0.8  # Adjust transparency for better visual clarity\n  )\n) %&gt;%\n  layout(\n    title = \"Interactive Plot: MATHS vs ENGLISH Scores\",\n    xaxis = list(title = \"MATHS Scores\"),\n    yaxis = list(title = \"ENGLISH Scores\")\n  )\n\n\n\n\n\n\nUsing plot_ly method to explore setting of shapes for interactive plot\n\n\nGraphCode\n\n\nObservations:\n\nPositive Correlation: noticeable positive correlation between English and Math scores\nRacial Groups:\n\nChinese (green circles): Appears to be clustered among the top right corner, which suggests that most of the Chinese students performed well in both ENGLISH and MATHS scores\nMalay (blue squares): Appears to be concentrated around mid to lower ranges of ENGLISH and MATHS scores\nIndian (orange triangles): Appears less frequent, but appear in the middle range of scores\nOthers (pink crosses): Sparse, and distributed across the score ranges without clear clustering\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nTo assign different shapes for the points based on RACE variable in plot_ly, we used the symbol argument in addition to color.\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nplot_ly(data = exam_data, \n        x = ~ENGLISH, \n        y = ~MATHS, \n        color = ~RACE,       # Different colors for RACE\n        symbol = ~RACE)      # Different shapes for RACE\n\n\n\n\n\n\nUsing plot_ly method to explore coordinated multiple views with plotly - Maths score and Race\n\n\nGraphCode\n\n\nObservations:\nHistogram\n\nOverall distribution: Most students score between 60 to 80, indicating average performance\nRace-specific observations:\n\nChinese students dominate the higher score range\nMalay students fared broadly in score\nIndian students are concentrated in the middle range\nOthers contribute mostly in the mid-to-high ranges, and less frequent overall\n\n\nBox plot\n\nMedian score: Chinese students have the highest median, followed by Others, Malay, while Indian fared slightly lower.\nVariability in score: Malay students show the widest spread, while others have the most consistent performance.\n\n\n\n\n\n\n\n\n\n\n\nCode\n# Load required libraries\nlibrary(crosstalk)\nlibrary(plotly)\n\n# Ensure exam_data is a data frame\nexam_data &lt;- as.data.frame(exam_data)\n\n# Create a shared data object for interactivity\nshared_data &lt;- SharedData$new(exam_data)\n\n# Histogram for Overall Maths Scores (Colored by Race)\np1 &lt;- plot_ly(\n  data = shared_data,\n  x = ~MATHS,\n  color = ~RACE,\n  type = \"histogram\",\n  text = ~paste(\"Score:\", MATHS, \"&lt;br&gt;Race:\", RACE),  # Tooltip showing Maths Score and Race\n  hoverinfo = \"text\",  # Use the custom text for the tooltip\n  opacity = 0.7\n) %&gt;%\n  layout(\n    title = \"Overall Maths Scores Distribution\",\n    xaxis = list(\n      title = \"Maths Scores\",  # X-axis title\n      titlefont = list(size = 16),  # Larger font for better visibility\n      tickfont = list(size = 12)  # Tick label size\n    ),\n    yaxis = list(\n      title = \"Frequency\",  # Y-axis title\n      titlefont = list(size = 16),  # Larger font for better visibility\n      tickfont = list(size = 12)  # Tick label size\n    ),\n    barmode = \"stack\",  # Ensure legend is visible\n    showlegend = TRUE  # Enable legend\n  )\n\n# Box Plot for Maths Scores by Race\np2 &lt;- plot_ly(\n  data = shared_data,\n  x = ~RACE,\n  y = ~MATHS,\n  color = ~RACE,\n  type = \"box\",\n  text = ~paste(\"Race:\", RACE, \"&lt;br&gt;Score:\", MATHS),  # Tooltip showing Race and Score\n  hoverinfo = \"text\",  # Use the custom text for the tooltip\n  boxpoints = FALSE  # Removes points beside the boxplot\n) %&gt;%\n  layout(\n    title = \"Maths Scores Distribution by Race\",\n    xaxis = list(\n      title = \"Race\",  # X-axis title\n      titlefont = list(size = 16),  # Larger font for better visibility\n      tickfont = list(size = 12)  # Tick label size\n    ),\n    yaxis = list(\n      title = \"Maths Scores\",  # Y-axis title\n      titlefont = list(size = 16),  # Larger font for better visibility\n      tickfont = list(size = 12)  # Tick label size\n    ),\n    showlegend = FALSE  # Disable legend for the box plot\n  )\n\n# Combine the plots into a subplot with interactivity\nsubplot(p1, p2, nrows = 1, margin = 0.05) %&gt;%\n  highlight(on = \"plotly_click\", dynamic = TRUE)\n\n\n\n\n\ninstall.packages(“crosstalk”) library(crosstalk)\nlibrary(magrittr)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04a.html",
    "href": "Hands-on_Ex/Hands-on_Ex04a.html",
    "title": "Hands-on Exercise 04a",
    "section": "",
    "text": "With the assistance of ChatGPT"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04a.html#visualising-distribution",
    "href": "Hands-on_Ex/Hands-on_Ex04a.html#visualising-distribution",
    "title": "Hands-on Exercise 04a",
    "section": "4. Visualising Distribution",
    "text": "4. Visualising Distribution\n\n4.1 Learning outcome\nVisualizing distributions is a fundamental aspect of statistical analysis. In Chapter 1, we introduced common methods such as histograms, probability density curves (PDFs), boxplots, notch plots, and violin plots using ggplot2.\nIn this chapter, we explore two newer techniques\n\nridgeline plots: display multiple density plots stacked vertically to compare distributions across groups,\nraincloud plots: combine a density plot, boxplot, and scatter plot to provide a comprehensive view of data\n\nby utilizing ggplot2 and its extensions.\n\n\n4.2 Getting started\n\n4.2.1 Installing and loading the packages\nThe following R packages will be used,\n\nggridges:ggplot2 extension for creating ridgeline plots.\nggdist:ggplot2 extension for visualizing distribution and uncertainty.\ntidyverse:collection of R packages designed for modern data science and visual communication.\nggthemes:ggplot2 extension offering additional themes, scales, and geoms for enhanced visualizations.\ncolorspace:R package for selecting, manipulating, and applying color palettes in visualizations.\n\n\n\nCode\npacman::p_load(ggdist, ggridges, ggthemes,\n               colorspace, tidyverse)\n\n\n\n\n4.2.2 Importing data\nIn this exercise, Exam_data.csv will be used. The `read_csv() function from the readr package is used to import the dataset into R and store it as a tibble data frame.\n\n\nCode\nexam &lt;- read_csv(\"data/Exam_data.csv\", show_col_types = FALSE)\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nThis section data is the same dataset used in Hands-on_Ex01, Hands-on_Ex02 Hands-on_Ex03a\n\n\n\n\n\n\n4.3 Visualising distribution with ridgeline plot\nA ridgeline plot (also known as a Joyplot) visualizes the distribution of a numeric variable across multiple groups. It uses overlapping histograms or density plots aligned on the same horizontal scale.\nThe figure below illustrates the distribution of English scores by class using a ridgeline plot.\n\n\nCode\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS)) +\n  geom_density_ridges(\n    scale = 3,\n    rel_min_height = 0.01,\n    bandwidth = 3.4,\n    fill = lighten(\"pink\", .3),\n    color = \"blue\"\n  ) +\n  scale_x_continuous(\n    name = \"ENGLISH\",\n    expand = c(0, 0)\n    ) +\n  scale_y_discrete(name = \"CLASS\", expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWhen to use a ridgeline plot\n\n\n\n\nRidgeline plots are ideal for visualizing medium to large groups, as overlapping distributions help conserve space compared to separate plots. However, for fewer than five groups, other distribution plots may be more effective.\nThey work best when there is a clear pattern or ranking among groups; otherwise, excessive overlap can make the plot cluttered and less informative.\n\n\n\n\n4.3.1 Plotting ridgeline graph: ggridges method\nIn R, ridgeline plots can be created using the ggridges package, which provides two key functions:\n\ngeom_ridgeline(): Uses direct height values to draw ridgelines.\ngeom_density_ridges(): Estimates data densities before plotting ridgelines.\n\nThe example below demonstrates a ridgeline plot created with geom_density_ridges().\n\nPlot()Code()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS)) +\n  geom_density_ridges(\n    scale = 3,\n    rel_min_height = 0.01,\n    bandwidth = 3.4,\n    fill = lighten(\"white\", .3),\n    color = \"#7097BB\"\n  ) +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n    ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n\n\n\n\n\n\n\n4.3.2 Varying fill colors along the x axis\nTo add gradient fills to ridgeline plots, use geom_ridgeline_gradient() or geom_density_ridges_gradient(), which function similarly to their non-gradient counterparts - geom_ridgeline(), and geom_density_ridges() but allow varying colors along the x-axis.\nHowever, they do not support alpha transparency—only color variation or transparency can be applied, but not both.\n\nPlot()Code()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS,\n           fill = stat(x))) +\n  geom_density_ridges_gradient(\n    scale = 3,\n    rel_min_height = 0.01) +\n  scale_fill_viridis_c(name = \"Temp. [F]\",\n                       option = \"C\") +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n  ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n\n\n\n\n\n\n\n4.3.3 Mapping the probabilities directly onto color\nThe ggridges package extends ggplot2 by providing stat_density_ridges(), that replaces stat_density() for ridgeline plots.\nThe figure below uses stat(ecdf) to compute and visualize the empirical cumulative density function (ECDF) for the distribution of English scores.\n\nPlot()Code()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = 0.5 - abs(0.5-stat(ecdf)))) +\n  stat_density_ridges(geom = \"density_ridges_gradient\", \n                      calc_ecdf = TRUE) +\n  scale_fill_viridis_c(name = \"Tail probability\",\n                       direction = -1) +\n  theme_ridges()\n\n\n\n\n\n\n\n\n\n\n\nImportant\n\n\n\n\nIt is important to include the argument calc_ecdf = TRUE in stat_density_ridges()\n\n\n\n\n\n4.3.4 Ridgeline plots with quantile lines\nUsing geom_density_ridges_gradient(), ridgeline plots can be colored by quantiles through the stat(quantile) aesthetic, as shown in the figure below.\n\nPlot()Code()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot(exam,\n       aes(x = MATHS, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = 4,\n    quantile_lines = TRUE) +\n  scale_fill_viridis_d(name = \"Quartiles\") +\n  theme_ridges()\n\n\n\n\n\nInstead of using number to define the quantiles, we can use cut points (e.g., 2.5% and 97.5% tails), as shown in the figure below.\n\nPlot()Code()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot(exam,\n       aes(x = MATHS, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = c(0.025, 0.975)\n    ) +\n  scale_fill_manual(\n    name = \"Probability\",\n    values = c(\"#FF0000A0\", \"#A0A0A0A0\", \"#0000FFA0\"),\n    labels = c(\"(0, 0.025]\", \"(0.025, 0.975]\", \"(0.975, 1]\")\n  ) +\n  theme_ridges()\n\n\n\n\n\n\n\n\n4.4 Visualising distribution with Raincloud plot\nA Raincloud Plot is a visualization technique that combines a half-density plot with a boxplot, resembling a “raincloud” shape. It improves traditional boxplots by revealing multiple modes in the data, indicating potential group structures. Unlike boxplots, raincloud plots show where densities are clustered.\nIn this section, we will be learning how to create a raincloud plot to visualize English scores by race using functions from the ggdist and ggplot2 packages.\n\n4.4.1 Plotting a half eye graph\nFirst, by using stat_halfeye() from the ggdist package to create a Half-Eye plot, which combines a half-density plot with a slab-interval for visualizing distributions.\nThis produces a Half Eye visualization, which is contains a half-density and a slab-interval.\n\nGraphCode()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA)\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above:\n\n\n\n\nWe remove the slab interval by setting .width = 0 and point_colour = NA.\n\n\n\n\n\n\n\n\n4.4.2 Adding the boxplot with geom_boxplot()\nNext, the code will add a narrow boxplot using geom_boxplot() from ggplot2, reducing its width and adjusting opacity for better visualization.\n\nGraphCode()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA)\n\n\n\n\n\n\n\n4.4.3 Adding the dot plots with stat_dots()\nNext, we’ll use stat_dots() from ggdist to add a half-dot plot, similar to a histogram, showing sample counts with dots.\nSetting side = “left” positions it on the left-hand side.\n\nGraphCode()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 2)\n\n\n\n\n\n\n\n4.4.4 Finishing touch\nLastly, coord_flip() from ggplot2 flips the chart horizontally, creating the raincloud effect, while theme_economist() from ggthemes enhances its appearance.\n\nGraphCode()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 1.5) +\n  coord_flip() +\n  theme_economist()\n\n\n\n\n\n\n\n\n4.5 Reference\n\nIntroducing Ridgeline Plots (formerly Joyplots)\nClaus O. Wilke Fundamentals of Data Visualization especially Chapter 6, 7, 8, 9 and 10.\nAllen M, Poggiali D, Whitaker K et al. “Raincloud plots: a multi-platform tool for robust data. visualization” [version 2; peer review: 2 approved]. Welcome Open Res 2021, pp. 4:63.\nDots + interval stats and geoms\n\n\n\n4.6 Takeaways\n\n\n\n\n\n\nKey takeaways\n\n\n\n\nLearnt about the two distribution visualization methods\n\nRidgeline Plot ggridges and\nRaincloud Plot ggdist\n\nPackages and Tools used: ggridges, ggdist, tidyverse, ggthemes and colorspace\nRidgeline plots work best when there’s a clear ranking or pattern.\nRaincloud plots provide richer insights than boxplots by showing density clusters.\n\n\n\n\n\n4.7 Further exploration\n\nTo explore the different ways to change the gradient color in the ggplot2 ridgeline plot:\n\n\nChange Virdis Platte Option()Use scale_fill_distiller() for diverging or sequential colorsUse a custom color gradient\n\n\nModify the option argument in scale_fill_viridis_c(), which supports different palettes like “A”, “B”, “C”, “D”, and “E”.\n\n\nCode\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS,\n           fill = stat(x))) +\n  geom_density_ridges_gradient(\n    scale = 3,\n    rel_min_height = 0.01) +\n  scale_fill_viridis_c(name = \"English Score\",\n                       option = \"E\") +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n  ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n\n\n\n\n\n\n\n\n\n\n\nTo change palette argument to options to “Blues”, “Reds”, “PuBu”, or “RdYlGn” etc.\n\nRed refer to low score\nGreen refer to high score\n\n\n\nCode\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS,\n           fill = stat(x))) +\n  geom_density_ridges_gradient(\n    scale = 3,\n    rel_min_height = 0.01) +\n  scale_fill_distiller(name = \"English Score\",\n                       palette = \"RdYlGn\",\n                       direction = 1) +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n  ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n\n\n\n\n\n\n\n\n\n\n\nUse scale_fill_gradient() or scale_fill_gradientn() to define custom colors. scale_fill_gradient(): Using two colors to define colors. scale_fill_gradientn(): Using multiple colors, creates a multi-color gradient.\n\nRed refer to low score\nGreen refer to high score\n\n\n\nCode\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS,\n           fill = stat(x))) +\n  geom_density_ridges_gradient(\n    scale = 3,\n    rel_min_height = 0.01) +\n  scale_fill_gradient(name = \"English Score\", low = \"red\", high = \"green\")+\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n  ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n\n\n\n\n\n\n\n\n\n\n\n\n\nTo explore the creation of two ridgeline plot side by side\n\nObservations:\n\nEnglish scores show wider distributions, indicating more variation, while Maths scores have sharper peaks, suggesting consistent performance.\nHigher-level classes (3I, 3H, 3G) have more spread-out distributions, while lower-level classes (3A, 3B, 3C) are more concentrated at higher scores.\n\n\nGraphCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot(exam_long, \n       aes(x = Score, \n           y = CLASS, \n           fill = Subject)) +  \n  geom_density_ridges(\n    scale = 3,\n    rel_min_height = 0.01,\n    bandwidth = 3.4,\n    fill = lighten(\"#7097BB\", .3),  # Adjust color\n    color = \"white\"\n  ) +\n  scale_x_continuous(\n    name = \"Grades\",\n    expand = c(0, 0)\n  ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges() +\n  facet_wrap(~ Subject, scales = \"free_x\")  # Facet by Subject (English vs Maths)\n\n\n\n\n\n\nTo explore the creation of raincloud plot - GENDER against MATHS\n\nObservations:\n\nMales show a slight right-skewed distribution with more students scoring higher.\nFemales have a more balanced and evenly spread distribution across score levels.\nMedian scores are comparable, but Females show more variation.\n\n\nGraphCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot(exam, \n       aes(x = MATHS, \n           y = GENDER, \n           fill = GENDER)) +  \n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA,\n               alpha = 0.6) +  \n  geom_boxplot(width = 0.2,\n               outlier.shape = NA,\n               alpha = 0.7, \n               color = \"black\") +  \n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = 0.5,\n            dotsize = 1.5) +\n  scale_fill_manual(values = c(\"Male\" = \"blue\", \"Female\" = \"pink\")) + \n  coord_flip() +\n  labs(title = \"Raincloud Plot of MATHS Scores by Gender\",\n       x = \"MATHS Scores\",\n       y = \"Gender\") +\n  theme_classic() +\n  theme(legend.position = \"none\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04c.html",
    "href": "Hands-on_Ex/Hands-on_Ex04c.html",
    "title": "Hands-on Exercise 04c",
    "section": "",
    "text": "With the assistance of ChatGPT"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04c.html#visualising-uncertainty",
    "href": "Hands-on_Ex/Hands-on_Ex04c.html#visualising-uncertainty",
    "title": "Hands-on Exercise 04c",
    "section": "4. Visualising uncertainty",
    "text": "4. Visualising uncertainty\n\n4.1 Learning outcome\nIn this chapter, we will be learning how to create statistical graphics to visualize uncertainty. By the end of the chapter, we will be able to:\n\nCreate statistical error bar plots using ggplot2.\nDevelop interactive error bar plots by integrating ggplot2, plotly, and DT.\nDesign advanced visualizations with the ggdist package.\nGenerate Hypothetical Outcome Plots (HOPs) using the ungeviz package.\n\n\n\n4.2 Getting started\n\n4.2.1 Installing and loading the packages\nFor this exercise the following R packages will be used:\n\ntidyverse: A collection of R packages for data science workflows\nplotly: Used for creating interactive plots.\ngganimate:Enables the creation of animated plots.\nDT:Displays interactive HTML tables.\ncrosstalk:Facilitates cross-widget interactions, including linked brushing and filtering.\nggdist:Helps visualize distributions and uncertainty.\n\n\n\nCode\ndevtools::install_github(\"wilkelab/ungeviz\")\n\n\n\n\nCode\npacman::p_load(ungeviz, plotly, crosstalk,\n               DT, ggdist, ggridges,\n               colorspace, gganimate, tidyverse)\n\n\n\n\n4.2.2 Data import\n\n\nCode\nexam &lt;- read_csv(\"data/Exam_data.csv\", show_col_types = FALSE)\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nThis section data is the same dataset used in Hands-on_Ex01, Hands-on_Ex02, Hands-on_Ex03a, Hands-on_Ex04a, and Hands-on_Ex04b\n\n\n\n\n\n\n4.3 Visualizing the uncertainty of point estimates: ggplot2 methods\nA point estimate is a single number, such as a mean. Uncertainty is expressed as standard error, confidence interval, or credible interval\n\n\n\n\n\n\nImportant\n\n\n\nWe should not confuse the uncertainty of a point estimate with the variation in the sample.\n\n\nIn this section, we will be plotting error bars for MATHS scores based on race using the exam tibble data frame.\nThe following functions from the dplyr package and code will be used to calculate the required summary statistics.\n\ngroup_by():Groups the observations by RACE.\nsummarise(): Calculates the count of observations, along with the mean and standard deviation of MATHS scores.\nmutate(): Computes the standard error of MATHS scores for each race.\nThe output is stored as a tibble data frame named my_sum.\n\n\n\nCode\nmy_sum &lt;- exam %&gt;%\n  group_by(RACE) %&gt;%\n  summarise(\n    n=n(),\n    mean=mean(MATHS),\n    sd=sd(MATHS)\n    ) %&gt;%\n  mutate(se=sd/sqrt(n-1))\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nTo refer to Slide 20 of Lesson 4 for the mathematical explanation\n\n\n\nThe code below will be used to display my_sum tibble data frame in a html table format.\n\nCode()Table()\n\n\n\n\nCode\nknitr::kable(head(my_sum), format = 'html')\n\n\n\n\n\n\n\n\n\nRACE\nn\nmean\nsd\nse\n\n\n\n\nChinese\n193\n76.50777\n15.69040\n1.132357\n\n\nIndian\n12\n60.66667\n23.35237\n7.041005\n\n\nMalay\n108\n57.44444\n21.13478\n2.043177\n\n\nOthers\n9\n69.66667\n10.72381\n3.791438\n\n\n\n\n\n\n\n\n\n\n\n4.3.1 Plotting standard error bars of point estimates\nNow, we will plot the standard error bars for the mean MATHS scores by race, as shown below.\n\nThe error bars are computed by using the formula mean+/-se.\nFor geom_point(), it is important to indicate stat=“identity”\n\n\nCode()Graph()\n\n\n\n\nCode\nggplot(my_sum) +\n  geom_errorbar(\n    aes(x=RACE, \n        ymin=mean-se, \n        ymax=mean+se), \n    width=0.2, \n    colour=\"blue\", \n    alpha=0.9, \n    size=0.5) +\n  geom_point(aes\n           (x=RACE, \n            y=mean), \n           stat=\"identity\", \n           color=\"red\",\n           size = 1.5,\n           alpha=1) +\n  ggtitle(\"Standard error of mean maths score by rac\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n4.3.2 Plotting confidence interval of point estimates\nIn addition to plotting standard error bars for point estimates, we can also visualize the confidence intervals of the mean MATHS scores by race.\n\nThe confidence intervals are calculated using the formula: mean ± 1.96 × standard error (SE).\nThe error bars are arranged based on the average MATHS scores.\nThe labs() function from ggplot2 is used to modify the x-axis label.\n\n\nCode()Graph()\n\n\n\n\nCode\nggplot(my_sum) +\n  geom_errorbar(\n    aes(x=reorder(RACE, -mean), \n        ymin=mean-1.96*se, \n        ymax=mean+1.96*se), \n    width=0.2, \n    colour=\"blue\", \n    alpha=0.9, \n    size=0.5) +\n  geom_point(aes\n           (x=RACE, \n            y=mean), \n           stat=\"identity\", \n           color=\"red\",\n           size = 1.5,\n           alpha=1) +\n  labs(x = \"Maths score\",\n       title = \"95% confidence interval of mean maths score by race\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n4.3.3 Visualizing the uncertainty of point estimates with interactive error bars\nWe will learn how to create interactive error bar plots to display the 99% confidence intervals of the mean MATHS scores by race, as shown in the figure below.\n\nCode()Graph()\n\n\n\n\nCode\nshared_df = SharedData$new(my_sum)\n\nbscols(widths = c(4,8),\n       ggplotly((ggplot(shared_df) +\n                   geom_errorbar(aes(\n                     x=reorder(RACE, -mean),\n                     ymin=mean-2.58*se, \n                     ymax=mean+2.58*se), \n                     width=0.2, \n                     colour=\"blue\", \n                     alpha=0.9, \n                     size=0.5) +\n                   geom_point(aes(\n                     x=RACE, \n                     y=mean, \n                     text = paste(\"Race:\", `RACE`, \n                                  \"&lt;br&gt;N:\", `n`,\n                                  \"&lt;br&gt;Avg. Scores:\", round(mean, digits = 2),\n                                  \"&lt;br&gt;95% CI:[\", \n                                  round((mean-2.58*se), digits = 2), \",\",\n                                  round((mean+2.58*se), digits = 2),\"]\")),\n                     stat=\"identity\", \n                     color=\"red\", \n                     size = 1.5, \n                     alpha=1) + \n                   xlab(\"Race\") + \n                   ylab(\"Average Scores\") + \n                   theme_minimal() + \n                   theme(axis.text.x = element_text(\n                     angle = 45, vjust = 0.5, hjust=1)) +\n                   ggtitle(\"99% Confidence interval of average /&lt;br&gt;maths scores by race\")), \n                tooltip = \"text\"), \n       DT::datatable(shared_df, \n                     rownames = FALSE, \n                     class=\"compact\", \n                     width=\"100%\", \n                     options = list(pageLength = 10,\n                                    scrollX=T), \n                     colnames = c(\"No. of pupils\", \n                                  \"Avg Scores\",\n                                  \"Std Dev\",\n                                  \"Std Error\")) %&gt;%\n         formatRound(columns=c('mean', 'sd', 'se'),\n                     digits=2))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n4.4 Visualizing uncertainty: ggdist methods\n\nggdist is an R package that offers flexible ggplot2 geoms and stats specifically designed for visualizing distributions and uncertainty.\nIt supports both frequentist and Bayesian uncertainty visualization by focusing on distribution-based approaches:\n\nFor frequentist models, it visualizes confidence or bootstrap distributions (see vignette(“freq-uncertainty-vis”)).\nFor Bayesian models, it visualizes probability distributions, with extended functionality available through the tidybayes package.\n\n\n\n4.4.1 Visualizing the uncertainty of point estimates: ggdist methods\nstat_pointinterval() of ggdist is used to build a visual for displaying distribution of maths scores by race.\n\nCode()Graph()\n\n\n\n\nCode\nexam %&gt;%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_pointinterval() +\n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Mean Point + Multiple-interval plot\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThis function comes with many arguments. In the code below, the following arguments are used:\n\nwidth = 0.95\npoint = median\ninterval = qi\n\nFor more information on the arguments available, please refer to this link.\n\nCode()Graph()\n\n\n\n\nCode\nexam %&gt;%\n  ggplot(aes(x = RACE, y = MATHS)) +\n  stat_pointinterval(.width = 0.95,\n  .point = median,\n  .interval = qi) +\n  labs(\n    title = \"Visualising confidence intervals of median math score\",\n    subtitle = \"Median Point + Multiple-interval plot\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n4.4.2 Visualizing the uncertainty of point estimates: ggdist methods\nWe will makeover the previous plot by showing 95% and 99% confidence intervals.\n\n.width = 0.95 and 0.99\n\n\n\n\n\n\n\nNote\n\n\n\n\nThe .width argument in the stat_pointinterval function defines the coverage probability of the confidence interval around the summary statistic, such as the median.\nIt controls the visual width of the confidence interval displayed in the plot.\n\n\n\n\nCode()Graph()\n\n\n\n\nCode\nexam %&gt;%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_pointinterval(\n    .width = c(0.95, 0.99), \n    show.legend = FALSE) +   \n  labs(\n    title = \"Visualising confidence intervals of mean Math score\",\n    subtitle = \"Mean Point + Multiple-interval plot\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n4.4.3 Visualizing the uncertainty of point estimates: ggdist methods\nstat_gradientinterval() of ggdist is used to build a visual for displaying distribution of maths scores by race.\n\nCode()Graph()\n\n\n\n\nCode\nexam %&gt;%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_gradientinterval(   \n    fill = \"#E1B941\",      \n    show.legend = TRUE     \n  ) +                        \n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Gradient + interval plot\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n4.5 Visualizing uncertainity with hypothetical outcome plots (HOPs)\nWhat are HOPs and when are they used?\n\nHOPs are visualizations that display multiple simulated outcomes to help users understand uncertainty in data or predictions. Instead of showing a static confidence interval, HOPs animate or present a series of possible outcomes to illustrate the variability in the data.\nUsed to help audiences intuitively understand variability and potential results in decision-making and forecasting.\n\n\nCode()Graph()\n\n\n\n\nCode\ndevtools::install_github(\"wilkelab/ungeviz\")\nlibrary(ungeviz)\n\nggplot(data = exam, \n       (aes(x = factor(RACE), y = MATHS))) +\n  geom_point(position = position_jitter(\n    height = 0.3, width = 0.05), \n    size = 0.4, color = \"#E1B941\", alpha = 1/2) +\n  geom_hpline(data = sampler(25, group = RACE), height = 0.6, color = \"#4169E1\") +\n  theme_bw() + \n  # `.draw` is a generated column indicating the sample draw\n  transition_states(.draw, 1, 3)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n4.7 References\n\nKam, T.S(2024). Visualising Uncertainty\n\n\n\n4.8 Takeaway\n\n\n\n\n\n\nKey takeaways\n\n\n\n\nUnderstand uncertainty in statistical graphics: uncertainty is expressed using standard errors/ confidence intervals.\nLearnt about plotting error bars with ggplot2: use geom_errorbar to represent standard errors around point estimates\nLearnt about creating interactive error bars with plotly and DT\nLearnt about visualizing uncertainty with Hypothetical Outcome Plots (HOPs): displaying multiple stimulated outcomes to show data variability.\nLearnt the difference about the uncertainty of point estimates with same variation, where uncertainty reflects estimation confidence, while variation shows data spread.\n\n\n\n\n\n4.9 Further exploration\n\nTo further explore Hypothetical Outcome Plots (HOPs) using exam dataset - By increasing the number of stimulated outcomes\n\n\nIncrease the number of samples from 25 to 150.\n\n\n\n\n\n\n\nNote\n\n\n\n\nBy increasing the number of samples, it shows more potential outcomes, providing a richer picture of uncertainty.\n\n\n\n\nCode()Graph()\n\n\n\n\nCode\ndevtools::install_github(\"wilkelab/ungeviz\")\nlibrary(ungeviz)\n\nggplot(data = exam, \n       aes(x = factor(RACE), y = MATHS)) +\n  geom_point(position = position_jitter(height = 0.3, width = 0.05), \n             size = 0.4, color = \"#E1B941\", alpha = 1/2) +\n  geom_hpline(data = sampler(150, group = RACE), height = 0.6, color = \"#4169E1\") +  # Increased from 25 to 150\n  theme_minimal() + \n  transition_states(.draw, transition_length = 2, state_length = 1)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTo further visualize how confidence intervals for average MATHS scores shift across class (using `ggdist)\n\n\n\n\n\n\n\nNote\n\n\n\n\nHelps to track how uncertainty (confidence intervals) widens or narrows across different classes\n\n\n\n\nCode()Animated Graph()Static Graph()\n\n\n\n\nCode\nlibrary(ggdist)\nlibrary(gganimate)\nlibrary(ggplot2)\nlibrary(dplyr)\n\n# Clean data to remove any missing CLASS values\nexam_clean &lt;- exam %&gt;% filter(!is.na(CLASS))\n\n# Animated plot\nggplot(exam_clean, aes(x = factor(CLASS), y = MATHS)) +\n  stat_pointinterval(aes(color = RACE), \n                      .width = c(0.66, 0.95), \n                      position = position_dodge(width = 0.5)) +\n  labs(title = \"Confidence Intervals of Maths Scores Across Classes\",\n       subtitle = \"Class: {closest_state}\",  # Dynamic subtitle reflecting the current class\n       y = \"Maths Score\") +\n  theme_minimal() +\n  transition_states(CLASS, transition_length = 2, state_length = 1) +  # Handles categorical data\n  ease_aes('cubic-in-out')  # Smooth animation transitions"
  },
  {
    "objectID": "In-class_Ex/In-class_Outline.html",
    "href": "In-class_Ex/In-class_Outline.html",
    "title": "In-class Exercise 01",
    "section": "",
    "text": "Welcome to my Tableau-tastic adventure!🚀, where raw data meets creativity and transforms into stunning dashboards! From bar charts to pie charts, we will be exploring the colorful world of Tableau, turning numbers into insights and dashboards into works of art.\nLeveraging on VizQL, the proprietary query language behind the Tableau product, with a few clicks, and simple drag-and-drop features, we can translates raw data into powerful visuals in just a few clicks!\nJoin me in the journey of turning data into art and numbers into stories worth sharing!"
  },
  {
    "objectID": "In-class_Ex/In-class_Outline.html#welcome-to-my-tableau-page",
    "href": "In-class_Ex/In-class_Outline.html#welcome-to-my-tableau-page",
    "title": "In-class Exercise 01",
    "section": "",
    "text": "Welcome to my Tableau-tastic adventure!🚀, where raw data meets creativity and transforms into stunning dashboards! From bar charts to pie charts, we will be exploring the colorful world of Tableau, turning numbers into insights and dashboards into works of art.\nLeveraging on VizQL, the proprietary query language behind the Tableau product, with a few clicks, and simple drag-and-drop features, we can translates raw data into powerful visuals in just a few clicks!\nJoin me in the journey of turning data into art and numbers into stories worth sharing!"
  },
  {
    "objectID": "New.html",
    "href": "New.html",
    "title": "New",
    "section": "",
    "text": "Data science hoepfully is easy"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01.html#getting-started",
    "href": "Take-home_Ex/Take-home_Ex01.html#getting-started",
    "title": "Take-home Exercise 01",
    "section": "",
    "text": "The following R packages will be loaded for this exercise using pacman::p_load():\n\nreadr: Part of a tidyverse package for fast and efficient reading of rectangular data (CSV, TSV, and other delimited files) into R\ndplyr: Part of a tidyverse package for efficient data manipulation, including filtering, selecting, mutating, summarizing, and grouping data in R\nggplot2: Part of a tidyverse package allowing for flexible and layered creation of complex plots\ntidyverse: A collection of R packages for data manipulation, visualization, and analysis\nknitr: Enables dynamic report generation with R Markdown\npatchwork: Combines multiple ggplot2 plots into a single layout\nggthemes: Provides additional themes and scales for ggplot2\nscales: Enhances visualization by formatting axes and legends in ggplot2\nggridges: Creates ridge plots for density visualization\nggpubr: Simplifies publication-ready ggplot2 visualizations\ngganimate: Adds animation capabilities to ggplot2 graphics\nggdist: Visualizes uncertainty and statistical distributions in ggplot2\nggtext: Enhances text rendering and formatting in ggplot2\nggalt: Provides additional geoms, including dumbbell plots and lollipop charts\ncowplot: Enhances ggplot2-based layouts and plot annotations\nggnewscale: Allows multiple color and fill scales in a single ggplot2 plot\nggrepel: Prevents overlapping text labels in ggplot2 plots\n\n\n\nCode\npacman::p_load(tidyverse, haven, knitr,\n               patchwork, ggthemes, scales,\n               ggridges, ggpubr, gganimate,\n               ggdist, ggtext, ggalt,\n               cowplot, ggnewscale)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01.html#data-wrangling",
    "href": "Take-home_Ex/Take-home_Ex01.html#data-wrangling",
    "title": "Take-home Exercise 01",
    "section": "",
    "text": "The code chunk below imports the Heart Attack in Japan: Youth vs. Adult dataset, downloaded from Kaggle, using the read_csv() function from the readr package.\n\n\nCode\nheart_attack &lt;- read_csv(\"data/japan_heart_attack_dataset.csv\", show_col_types = FALSE)\n\nheart_attack\n\n\n# A tibble: 30,000 × 32\n     Age Gender Region Smoking_History Diabetes_History Hypertension_History\n   &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt;  &lt;chr&gt;           &lt;chr&gt;            &lt;chr&gt;               \n 1    56 Male   Urban  Yes             No               No                  \n 2    69 Male   Urban  No              No               No                  \n 3    46 Male   Rural  Yes             No               No                  \n 4    32 Female Urban  No              No               No                  \n 5    60 Female Rural  No              No               No                  \n 6    25 Female Rural  No              No               No                  \n 7    78 Male   Urban  No              Yes              Yes                 \n 8    38 Female Urban  Yes             No               No                  \n 9    56 Male   Rural  No              No               Yes                 \n10    75 Male   Urban  No              No               No                  \n# ℹ 29,990 more rows\n# ℹ 26 more variables: Cholesterol_Level &lt;dbl&gt;, Physical_Activity &lt;chr&gt;,\n#   Diet_Quality &lt;chr&gt;, Alcohol_Consumption &lt;chr&gt;, Stress_Levels &lt;dbl&gt;,\n#   BMI &lt;dbl&gt;, Heart_Rate &lt;dbl&gt;, Systolic_BP &lt;dbl&gt;, Diastolic_BP &lt;dbl&gt;,\n#   Family_History &lt;chr&gt;, Heart_Attack_Occurrence &lt;chr&gt;, Extra_Column_1 &lt;dbl&gt;,\n#   Extra_Column_2 &lt;dbl&gt;, Extra_Column_3 &lt;dbl&gt;, Extra_Column_4 &lt;dbl&gt;,\n#   Extra_Column_5 &lt;dbl&gt;, Extra_Column_6 &lt;dbl&gt;, Extra_Column_7 &lt;dbl&gt;, …\n\n\nThe dataset is structured as a tibble dataframe, containing 30,000 rows and 32 columns. Each observation represents an individual case, and the variables capture key medical and demographic information relevant to heart attack incidents across different age groups in Japan.\n\n\n\nWe will check the dataset using below\n\nglimpse(): provides a transposed overview of a dataset, showing variables and their types in a concise format.\nhead(): displays the first few rows of a dataset (default is 6 rows) to give a quick preview of the data.\nsummary(): generates a statistical summary of each variable, including measures like mean, median, and range for numeric data.\nduplicated():returns a logical vector indicating which elements or rows in a vector or data frame are duplicates.\ncolSums(is.na()): counts the number of missing values (NA) in each column of the data frame.\nspec(): use spec() to quickly inspect the column\n\n\nglimpse()head()summary()duplicated()colSum(is.na())spec())\n\n\n\n\nCode\nglimpse(heart_attack)\n\n\nRows: 30,000\nColumns: 32\n$ Age                     &lt;dbl&gt; 56, 69, 46, 32, 60, 25, 78, 38, 56, 75, 36, 40…\n$ Gender                  &lt;chr&gt; \"Male\", \"Male\", \"Male\", \"Female\", \"Female\", \"F…\n$ Region                  &lt;chr&gt; \"Urban\", \"Urban\", \"Rural\", \"Urban\", \"Rural\", \"…\n$ Smoking_History         &lt;chr&gt; \"Yes\", \"No\", \"Yes\", \"No\", \"No\", \"No\", \"No\", \"Y…\n$ Diabetes_History        &lt;chr&gt; \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"Yes\", \"No…\n$ Hypertension_History    &lt;chr&gt; \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"Yes\", \"No…\n$ Cholesterol_Level       &lt;dbl&gt; 186.4002, 185.1367, 210.6966, 211.1655, 223.81…\n$ Physical_Activity       &lt;chr&gt; \"Moderate\", \"Low\", \"Low\", \"Moderate\", \"High\", …\n$ Diet_Quality            &lt;chr&gt; \"Poor\", \"Good\", \"Average\", \"Good\", \"Good\", \"Go…\n$ Alcohol_Consumption     &lt;chr&gt; \"Low\", \"Low\", \"Moderate\", \"High\", \"High\", \"Hig…\n$ Stress_Levels           &lt;dbl&gt; 3.644786, 3.384056, 3.810911, 6.014878, 6.8068…\n$ BMI                     &lt;dbl&gt; 33.96135, 28.24287, 27.60121, 23.71729, 19.771…\n$ Heart_Rate              &lt;dbl&gt; 72.30153, 57.45764, 64.65870, 55.13147, 76.667…\n$ Systolic_BP             &lt;dbl&gt; 123.90209, 129.89331, 145.65490, 131.78522, 10…\n$ Diastolic_BP            &lt;dbl&gt; 85.68281, 73.52426, 71.99481, 68.21133, 92.902…\n$ Family_History          &lt;chr&gt; \"No\", \"Yes\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No…\n$ Heart_Attack_Occurrence &lt;chr&gt; \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\"…\n$ Extra_Column_1          &lt;dbl&gt; 0.40498852, 0.03627815, 0.85297888, 0.39085280…\n$ Extra_Column_2          &lt;dbl&gt; 0.43330004, 0.51256694, 0.21959083, 0.29684675…\n$ Extra_Column_3          &lt;dbl&gt; 0.62871236, 0.66839275, 0.61343656, 0.15572404…\n$ Extra_Column_4          &lt;dbl&gt; 0.70160955, 0.11552874, 0.50800995, 0.87025144…\n$ Extra_Column_5          &lt;dbl&gt; 0.49814235, 0.42381938, 0.90066981, 0.39035591…\n$ Extra_Column_6          &lt;dbl&gt; 0.007901312, 0.083932768, 0.227205241, 0.40318…\n$ Extra_Column_7          &lt;dbl&gt; 0.79458257, 0.68895108, 0.49634358, 0.74140891…\n$ Extra_Column_8          &lt;dbl&gt; 0.29077922, 0.83016364, 0.75210679, 0.22396813…\n$ Extra_Column_9          &lt;dbl&gt; 0.49719307, 0.63449028, 0.18150125, 0.32931387…\n$ Extra_Column_10         &lt;dbl&gt; 0.52199452, 0.30204337, 0.62918031, 0.14319054…\n$ Extra_Column_11         &lt;dbl&gt; 0.79965663, 0.04368285, 0.01827617, 0.90778075…\n$ Extra_Column_12         &lt;dbl&gt; 0.72239788, 0.45166789, 0.06322702, 0.54232201…\n$ Extra_Column_13         &lt;dbl&gt; 0.1487387, 0.8786714, 0.1465122, 0.9224606, 0.…\n$ Extra_Column_14         &lt;dbl&gt; 0.8340099, 0.5356022, 0.9972962, 0.6262165, 0.…\n$ Extra_Column_15         &lt;dbl&gt; 0.061632229, 0.617825340, 0.974455410, 0.22860…\n\n\n\n\n\n\nCode\nhead(heart_attack)\n\n\n# A tibble: 6 × 32\n    Age Gender Region Smoking_History Diabetes_History Hypertension_History\n  &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt;  &lt;chr&gt;           &lt;chr&gt;            &lt;chr&gt;               \n1    56 Male   Urban  Yes             No               No                  \n2    69 Male   Urban  No              No               No                  \n3    46 Male   Rural  Yes             No               No                  \n4    32 Female Urban  No              No               No                  \n5    60 Female Rural  No              No               No                  \n6    25 Female Rural  No              No               No                  \n# ℹ 26 more variables: Cholesterol_Level &lt;dbl&gt;, Physical_Activity &lt;chr&gt;,\n#   Diet_Quality &lt;chr&gt;, Alcohol_Consumption &lt;chr&gt;, Stress_Levels &lt;dbl&gt;,\n#   BMI &lt;dbl&gt;, Heart_Rate &lt;dbl&gt;, Systolic_BP &lt;dbl&gt;, Diastolic_BP &lt;dbl&gt;,\n#   Family_History &lt;chr&gt;, Heart_Attack_Occurrence &lt;chr&gt;, Extra_Column_1 &lt;dbl&gt;,\n#   Extra_Column_2 &lt;dbl&gt;, Extra_Column_3 &lt;dbl&gt;, Extra_Column_4 &lt;dbl&gt;,\n#   Extra_Column_5 &lt;dbl&gt;, Extra_Column_6 &lt;dbl&gt;, Extra_Column_7 &lt;dbl&gt;,\n#   Extra_Column_8 &lt;dbl&gt;, Extra_Column_9 &lt;dbl&gt;, Extra_Column_10 &lt;dbl&gt;, …\n\n\n\n\n\n\nCode\nsummary(heart_attack)\n\n\n      Age           Gender             Region          Smoking_History   \n Min.   :18.00   Length:30000       Length:30000       Length:30000      \n 1st Qu.:33.00   Class :character   Class :character   Class :character  \n Median :48.00   Mode  :character   Mode  :character   Mode  :character  \n Mean   :48.49                                                           \n 3rd Qu.:64.00                                                           \n Max.   :79.00                                                           \n Diabetes_History   Hypertension_History Cholesterol_Level Physical_Activity \n Length:30000       Length:30000         Min.   : 80.02    Length:30000      \n Class :character   Class :character     1st Qu.:179.55    Class :character  \n Mode  :character   Mode  :character     Median :199.77    Mode  :character  \n                                         Mean   :199.90                      \n                                         3rd Qu.:220.16                      \n                                         Max.   :336.86                      \n Diet_Quality       Alcohol_Consumption Stress_Levels         BMI       \n Length:30000       Length:30000        Min.   : 0.000   Min.   : 5.58  \n Class :character   Class :character    1st Qu.: 3.644   1st Qu.:21.63  \n Mode  :character   Mode  :character    Median : 4.993   Median :24.96  \n                                        Mean   : 5.002   Mean   :25.00  \n                                        3rd Qu.: 6.353   3rd Qu.:28.36  \n                                        Max.   :10.000   Max.   :46.10  \n   Heart_Rate      Systolic_BP      Diastolic_BP    Family_History    \n Min.   : 30.03   Min.   : 56.23   Min.   : 39.95   Length:30000      \n 1st Qu.: 63.25   1st Qu.:109.79   1st Qu.: 73.26   Class :character  \n Median : 69.95   Median :119.90   Median : 80.12   Mode  :character  \n Mean   : 69.98   Mean   :119.91   Mean   : 80.03                     \n 3rd Qu.: 76.66   3rd Qu.:130.02   3rd Qu.: 86.76                     \n Max.   :108.78   Max.   :178.77   Max.   :117.67                     \n Heart_Attack_Occurrence Extra_Column_1     Extra_Column_2     \n Length:30000            Min.   :0.000007   Min.   :0.0000052  \n Class :character        1st Qu.:0.253308   1st Qu.:0.2473606  \n Mode  :character        Median :0.500820   Median :0.4961980  \n                         Mean   :0.501939   Mean   :0.4978940  \n                         3rd Qu.:0.750529   3rd Qu.:0.7473954  \n                         Max.   :0.999965   Max.   :0.9999894  \n Extra_Column_3      Extra_Column_4      Extra_Column_5     Extra_Column_6     \n Min.   :0.0000227   Min.   :0.0000934   Min.   :0.000105   Min.   :0.0000531  \n 1st Qu.:0.2483093   1st Qu.:0.2522110   1st Qu.:0.251803   1st Qu.:0.2559989  \n Median :0.4976104   Median :0.4976175   Median :0.501987   Median :0.5017726  \n Mean   :0.4981949   Mean   :0.5005952   Mean   :0.501410   Mean   :0.5027631  \n 3rd Qu.:0.7476807   3rd Qu.:0.7505662   3rd Qu.:0.753657   3rd Qu.:0.7511886  \n Max.   :0.9999694   Max.   :0.9999869   Max.   :0.999995   Max.   :0.9998892  \n Extra_Column_7      Extra_Column_8      Extra_Column_9     \n Min.   :0.0000678   Min.   :0.0000449   Min.   :0.0000305  \n 1st Qu.:0.2482839   1st Qu.:0.2509790   1st Qu.:0.2502452  \n Median :0.4988157   Median :0.4985698   Median :0.4984491  \n Mean   :0.4980753   Mean   :0.5003557   Mean   :0.5002292  \n 3rd Qu.:0.7456378   3rd Qu.:0.7507293   3rd Qu.:0.7512186  \n Max.   :0.9999900   Max.   :0.9999300   Max.   :0.9999852  \n Extra_Column_10     Extra_Column_11     Extra_Column_12    \n Min.   :0.0000133   Min.   :0.0000008   Min.   :0.0000713  \n 1st Qu.:0.2484256   1st Qu.:0.2538092   1st Qu.:0.2505341  \n Median :0.5031040   Median :0.5067589   Median :0.5038609  \n Mean   :0.5010694   Mean   :0.5044949   Mean   :0.5008624  \n 3rd Qu.:0.7522686   3rd Qu.:0.7556257   3rd Qu.:0.7511780  \n Max.   :0.9999928   Max.   :0.9999578   Max.   :0.9999484  \n Extra_Column_13     Extra_Column_14     Extra_Column_15    \n Min.   :0.0000204   Min.   :0.0000025   Min.   :0.0000241  \n 1st Qu.:0.2473108   1st Qu.:0.2482152   1st Qu.:0.2482573  \n Median :0.5041162   Median :0.4943841   Median :0.5009406  \n Mean   :0.5004557   Mean   :0.4976507   Mean   :0.4999634  \n 3rd Qu.:0.7497094   3rd Qu.:0.7456212   3rd Qu.:0.7487379  \n Max.   :0.9999451   Max.   :0.9999779   Max.   :0.9999913  \n\n\n\n\n\n\nCode\nheart_attack[duplicated(heart_attack),]\n\n\n# A tibble: 0 × 32\n# ℹ 32 variables: Age &lt;dbl&gt;, Gender &lt;chr&gt;, Region &lt;chr&gt;, Smoking_History &lt;chr&gt;,\n#   Diabetes_History &lt;chr&gt;, Hypertension_History &lt;chr&gt;,\n#   Cholesterol_Level &lt;dbl&gt;, Physical_Activity &lt;chr&gt;, Diet_Quality &lt;chr&gt;,\n#   Alcohol_Consumption &lt;chr&gt;, Stress_Levels &lt;dbl&gt;, BMI &lt;dbl&gt;,\n#   Heart_Rate &lt;dbl&gt;, Systolic_BP &lt;dbl&gt;, Diastolic_BP &lt;dbl&gt;,\n#   Family_History &lt;chr&gt;, Heart_Attack_Occurrence &lt;chr&gt;, Extra_Column_1 &lt;dbl&gt;,\n#   Extra_Column_2 &lt;dbl&gt;, Extra_Column_3 &lt;dbl&gt;, Extra_Column_4 &lt;dbl&gt;, …\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nEnsure that there are no duplicated columns, if not will have to investigate further.\n\n\n\n\n\n\n\nCode\ncolSums(is.na(heart_attack))\n\n\n                    Age                  Gender                  Region \n                      0                       0                       0 \n        Smoking_History        Diabetes_History    Hypertension_History \n                      0                       0                       0 \n      Cholesterol_Level       Physical_Activity            Diet_Quality \n                      0                       0                       0 \n    Alcohol_Consumption           Stress_Levels                     BMI \n                      0                       0                       0 \n             Heart_Rate             Systolic_BP            Diastolic_BP \n                      0                       0                       0 \n         Family_History Heart_Attack_Occurrence          Extra_Column_1 \n                      0                       0                       0 \n         Extra_Column_2          Extra_Column_3          Extra_Column_4 \n                      0                       0                       0 \n         Extra_Column_5          Extra_Column_6          Extra_Column_7 \n                      0                       0                       0 \n         Extra_Column_8          Extra_Column_9         Extra_Column_10 \n                      0                       0                       0 \n        Extra_Column_11         Extra_Column_12         Extra_Column_13 \n                      0                       0                       0 \n        Extra_Column_14         Extra_Column_15 \n                      0                       0 \n\n\n\n\n\n\n\n\nNote\n\n\n\n\nEnsure that there are no NA values, if not will have to investigate further.\nPossibility to use drop_na() function to drop rows where any column specified contains a missing value.\n\n\n\n\n\n\n\nCode\nspec(heart_attack)\n\n\ncols(\n  Age = col_double(),\n  Gender = col_character(),\n  Region = col_character(),\n  Smoking_History = col_character(),\n  Diabetes_History = col_character(),\n  Hypertension_History = col_character(),\n  Cholesterol_Level = col_double(),\n  Physical_Activity = col_character(),\n  Diet_Quality = col_character(),\n  Alcohol_Consumption = col_character(),\n  Stress_Levels = col_double(),\n  BMI = col_double(),\n  Heart_Rate = col_double(),\n  Systolic_BP = col_double(),\n  Diastolic_BP = col_double(),\n  Family_History = col_character(),\n  Heart_Attack_Occurrence = col_character(),\n  Extra_Column_1 = col_double(),\n  Extra_Column_2 = col_double(),\n  Extra_Column_3 = col_double(),\n  Extra_Column_4 = col_double(),\n  Extra_Column_5 = col_double(),\n  Extra_Column_6 = col_double(),\n  Extra_Column_7 = col_double(),\n  Extra_Column_8 = col_double(),\n  Extra_Column_9 = col_double(),\n  Extra_Column_10 = col_double(),\n  Extra_Column_11 = col_double(),\n  Extra_Column_12 = col_double(),\n  Extra_Column_13 = col_double(),\n  Extra_Column_14 = col_double(),\n  Extra_Column_15 = col_double()\n)\n\n\n\n\n\nThe heart_attack tibble contains 32 attributes, as shown above.\n\n\n\nThe table below presents the metadata for the dataset, classifying each variable as either categorical or continuous based on its nature and data type.\n\nCategorical attributes:\n\n\n\n\n\n\n\n\nVariable Names\nType\nDescription\n\n\n\n\nGender\nCHAR\nBiological sex of the individual (e.g., Male, Female)\n\n\nRegion\nCHAR\nGeographic location where the individual resides (e.g., Urban, Rural)\n\n\nSmoking_History\nCHAR\nPast or current smoking habits (e.g., Yes, No)\n\n\nDiabetes_History\nCHAR\nHistory of diabetes diagnosis (Yes/No)\n\n\nHypertension_History\nCHAR\nHistory of high blood pressure diagnosis (Yes/No)\n\n\nPhysical_Activity\nCHAR\nLevel of physical activity (e.g., Low, Moderate, High)\n\n\nDiet_Quality\nCHAR\nDietary habits and nutritional intake assessment (e.g., Poor, Average, Good)\n\n\nAlcohol_Consumption\nCHAR\nFrequency or amount of alcohol intake (e.g., Low, Moderate, High, None)\n\n\nFamily_History\nCHAR\nPresence of heart disease in close relatives (Yes/No)\n\n\nHeart_Attack_Occurrence\nCHAR\nWhether the individual has experienced a heart attack (Yes/No)\n\n\n\nContinuous attributes:\n\n\n\n\n\n\n\n\nVariable Names\nType\nDescription\n\n\n\n\nAge\nNUM\nAge of the individual in years\n\n\nCholesterol_Level\nNUM\nMeasured cholesterol level in the blood\n\n\nStress_Levels\nNUM\nMeasured or self-reported stress level\n\n\nBMI\nNUM\nBody Mass Index, calculated from height and weight\n\n\nHeart_Rate\nNUM\nResting heart rate in beats per minute (bpm)\n\n\nSystolic_BP\nNUM\nSystolic blood pressure measurement (mmHg)\n\n\nDiastolic_BP\nNUM\nDiastolic blood pressure measurement (mmHg)\n\n\nExtra_Column_1\nNUM\n\n\n\nExtra_Column_2\nNUM\n\n\n\nExtra_Column_3\nNUM\n\n\n\nExtra_Column_4\nNUM\n\n\n\nExtra_Column_5\nNUM\n\n\n\nExtra_Column_6\nNUM\n\n\n\nExtra_Column_7\nNUM\n\n\n\nExtra_Column_8\nNUM\n\n\n\nExtra_Column_9\nNUM\n\n\n\nExtra_Column_10\nNUM\n\n\n\nExtra_Column_11\nNUM\n\n\n\nExtra_Column_12\nNUM\n\n\n\nExtra_Column_13\nNUM\n\n\n\nExtra_Column_14\nNUM\n\n\n\nExtra_Column_15\nNUM\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nNotice that Extra_Column_1 to Extra_Column_15 are additional numeric figures without clear definition.\nThey are most likely derived calculations from the variables."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01.html#data-wrangling-data-prepration",
    "href": "Take-home_Ex/Take-home_Ex01.html#data-wrangling-data-prepration",
    "title": "Take-home Exercise 01",
    "section": "",
    "text": "The code chunk below imports the Heart Attack in Japan: Youth vs. Adult dataset, downloaded from Kaggle, using the read_csv() function from the readr package.\n\n\nCode\nheart_attack &lt;- read_csv(\"data/japan_heart_attack_dataset.csv\", show_col_types = FALSE)\n\nheart_attack\n\n\n# A tibble: 30,000 × 32\n     Age Gender Region Smoking_History Diabetes_History Hypertension_History\n   &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt;  &lt;chr&gt;           &lt;chr&gt;            &lt;chr&gt;               \n 1    56 Male   Urban  Yes             No               No                  \n 2    69 Male   Urban  No              No               No                  \n 3    46 Male   Rural  Yes             No               No                  \n 4    32 Female Urban  No              No               No                  \n 5    60 Female Rural  No              No               No                  \n 6    25 Female Rural  No              No               No                  \n 7    78 Male   Urban  No              Yes              Yes                 \n 8    38 Female Urban  Yes             No               No                  \n 9    56 Male   Rural  No              No               Yes                 \n10    75 Male   Urban  No              No               No                  \n# ℹ 29,990 more rows\n# ℹ 26 more variables: Cholesterol_Level &lt;dbl&gt;, Physical_Activity &lt;chr&gt;,\n#   Diet_Quality &lt;chr&gt;, Alcohol_Consumption &lt;chr&gt;, Stress_Levels &lt;dbl&gt;,\n#   BMI &lt;dbl&gt;, Heart_Rate &lt;dbl&gt;, Systolic_BP &lt;dbl&gt;, Diastolic_BP &lt;dbl&gt;,\n#   Family_History &lt;chr&gt;, Heart_Attack_Occurrence &lt;chr&gt;, Extra_Column_1 &lt;dbl&gt;,\n#   Extra_Column_2 &lt;dbl&gt;, Extra_Column_3 &lt;dbl&gt;, Extra_Column_4 &lt;dbl&gt;,\n#   Extra_Column_5 &lt;dbl&gt;, Extra_Column_6 &lt;dbl&gt;, Extra_Column_7 &lt;dbl&gt;, …\n\n\nThe dataset is structured as a tibble dataframe, containing 30,000 rows and 32 columns. Each observation represents an individual case, and the variables capture key medical and demographic information relevant to heart attack incidents across different age groups in Japan.\n\n\n\nWe will check the dataset using below\n\nglimpse(): provides a transposed overview of a dataset, showing variables and their types in a concise format.\nhead(): displays the first few rows of a dataset (default is 6 rows) to give a quick preview of the data.\nsummary(): generates a statistical summary of each variable, including measures like mean, median, and range for numeric data.\nduplicated():returns a logical vector indicating which elements or rows in a vector or data frame are duplicates.\ncolSums(is.na()): counts the number of missing values (NA) in each column of the data frame.\nspec(): use spec() to quickly inspect the column\n\n\nglimpse()head()summary()duplicated()colSum(is.na())spec())\n\n\n\n\nCode\nglimpse(heart_attack)\n\n\nRows: 30,000\nColumns: 32\n$ Age                     &lt;dbl&gt; 56, 69, 46, 32, 60, 25, 78, 38, 56, 75, 36, 40…\n$ Gender                  &lt;chr&gt; \"Male\", \"Male\", \"Male\", \"Female\", \"Female\", \"F…\n$ Region                  &lt;chr&gt; \"Urban\", \"Urban\", \"Rural\", \"Urban\", \"Rural\", \"…\n$ Smoking_History         &lt;chr&gt; \"Yes\", \"No\", \"Yes\", \"No\", \"No\", \"No\", \"No\", \"Y…\n$ Diabetes_History        &lt;chr&gt; \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"Yes\", \"No…\n$ Hypertension_History    &lt;chr&gt; \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"Yes\", \"No…\n$ Cholesterol_Level       &lt;dbl&gt; 186.4002, 185.1367, 210.6966, 211.1655, 223.81…\n$ Physical_Activity       &lt;chr&gt; \"Moderate\", \"Low\", \"Low\", \"Moderate\", \"High\", …\n$ Diet_Quality            &lt;chr&gt; \"Poor\", \"Good\", \"Average\", \"Good\", \"Good\", \"Go…\n$ Alcohol_Consumption     &lt;chr&gt; \"Low\", \"Low\", \"Moderate\", \"High\", \"High\", \"Hig…\n$ Stress_Levels           &lt;dbl&gt; 3.644786, 3.384056, 3.810911, 6.014878, 6.8068…\n$ BMI                     &lt;dbl&gt; 33.96135, 28.24287, 27.60121, 23.71729, 19.771…\n$ Heart_Rate              &lt;dbl&gt; 72.30153, 57.45764, 64.65870, 55.13147, 76.667…\n$ Systolic_BP             &lt;dbl&gt; 123.90209, 129.89331, 145.65490, 131.78522, 10…\n$ Diastolic_BP            &lt;dbl&gt; 85.68281, 73.52426, 71.99481, 68.21133, 92.902…\n$ Family_History          &lt;chr&gt; \"No\", \"Yes\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No…\n$ Heart_Attack_Occurrence &lt;chr&gt; \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\"…\n$ Extra_Column_1          &lt;dbl&gt; 0.40498852, 0.03627815, 0.85297888, 0.39085280…\n$ Extra_Column_2          &lt;dbl&gt; 0.43330004, 0.51256694, 0.21959083, 0.29684675…\n$ Extra_Column_3          &lt;dbl&gt; 0.62871236, 0.66839275, 0.61343656, 0.15572404…\n$ Extra_Column_4          &lt;dbl&gt; 0.70160955, 0.11552874, 0.50800995, 0.87025144…\n$ Extra_Column_5          &lt;dbl&gt; 0.49814235, 0.42381938, 0.90066981, 0.39035591…\n$ Extra_Column_6          &lt;dbl&gt; 0.007901312, 0.083932768, 0.227205241, 0.40318…\n$ Extra_Column_7          &lt;dbl&gt; 0.79458257, 0.68895108, 0.49634358, 0.74140891…\n$ Extra_Column_8          &lt;dbl&gt; 0.29077922, 0.83016364, 0.75210679, 0.22396813…\n$ Extra_Column_9          &lt;dbl&gt; 0.49719307, 0.63449028, 0.18150125, 0.32931387…\n$ Extra_Column_10         &lt;dbl&gt; 0.52199452, 0.30204337, 0.62918031, 0.14319054…\n$ Extra_Column_11         &lt;dbl&gt; 0.79965663, 0.04368285, 0.01827617, 0.90778075…\n$ Extra_Column_12         &lt;dbl&gt; 0.72239788, 0.45166789, 0.06322702, 0.54232201…\n$ Extra_Column_13         &lt;dbl&gt; 0.1487387, 0.8786714, 0.1465122, 0.9224606, 0.…\n$ Extra_Column_14         &lt;dbl&gt; 0.8340099, 0.5356022, 0.9972962, 0.6262165, 0.…\n$ Extra_Column_15         &lt;dbl&gt; 0.061632229, 0.617825340, 0.974455410, 0.22860…\n\n\n\n\n\n\nCode\nhead(heart_attack)\n\n\n# A tibble: 6 × 32\n    Age Gender Region Smoking_History Diabetes_History Hypertension_History\n  &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt;  &lt;chr&gt;           &lt;chr&gt;            &lt;chr&gt;               \n1    56 Male   Urban  Yes             No               No                  \n2    69 Male   Urban  No              No               No                  \n3    46 Male   Rural  Yes             No               No                  \n4    32 Female Urban  No              No               No                  \n5    60 Female Rural  No              No               No                  \n6    25 Female Rural  No              No               No                  \n# ℹ 26 more variables: Cholesterol_Level &lt;dbl&gt;, Physical_Activity &lt;chr&gt;,\n#   Diet_Quality &lt;chr&gt;, Alcohol_Consumption &lt;chr&gt;, Stress_Levels &lt;dbl&gt;,\n#   BMI &lt;dbl&gt;, Heart_Rate &lt;dbl&gt;, Systolic_BP &lt;dbl&gt;, Diastolic_BP &lt;dbl&gt;,\n#   Family_History &lt;chr&gt;, Heart_Attack_Occurrence &lt;chr&gt;, Extra_Column_1 &lt;dbl&gt;,\n#   Extra_Column_2 &lt;dbl&gt;, Extra_Column_3 &lt;dbl&gt;, Extra_Column_4 &lt;dbl&gt;,\n#   Extra_Column_5 &lt;dbl&gt;, Extra_Column_6 &lt;dbl&gt;, Extra_Column_7 &lt;dbl&gt;,\n#   Extra_Column_8 &lt;dbl&gt;, Extra_Column_9 &lt;dbl&gt;, Extra_Column_10 &lt;dbl&gt;, …\n\n\n\n\n\n\nCode\nsummary(heart_attack)\n\n\n      Age           Gender             Region          Smoking_History   \n Min.   :18.00   Length:30000       Length:30000       Length:30000      \n 1st Qu.:33.00   Class :character   Class :character   Class :character  \n Median :48.00   Mode  :character   Mode  :character   Mode  :character  \n Mean   :48.49                                                           \n 3rd Qu.:64.00                                                           \n Max.   :79.00                                                           \n Diabetes_History   Hypertension_History Cholesterol_Level Physical_Activity \n Length:30000       Length:30000         Min.   : 80.02    Length:30000      \n Class :character   Class :character     1st Qu.:179.55    Class :character  \n Mode  :character   Mode  :character     Median :199.77    Mode  :character  \n                                         Mean   :199.90                      \n                                         3rd Qu.:220.16                      \n                                         Max.   :336.86                      \n Diet_Quality       Alcohol_Consumption Stress_Levels         BMI       \n Length:30000       Length:30000        Min.   : 0.000   Min.   : 5.58  \n Class :character   Class :character    1st Qu.: 3.644   1st Qu.:21.63  \n Mode  :character   Mode  :character    Median : 4.993   Median :24.96  \n                                        Mean   : 5.002   Mean   :25.00  \n                                        3rd Qu.: 6.353   3rd Qu.:28.36  \n                                        Max.   :10.000   Max.   :46.10  \n   Heart_Rate      Systolic_BP      Diastolic_BP    Family_History    \n Min.   : 30.03   Min.   : 56.23   Min.   : 39.95   Length:30000      \n 1st Qu.: 63.25   1st Qu.:109.79   1st Qu.: 73.26   Class :character  \n Median : 69.95   Median :119.90   Median : 80.12   Mode  :character  \n Mean   : 69.98   Mean   :119.91   Mean   : 80.03                     \n 3rd Qu.: 76.66   3rd Qu.:130.02   3rd Qu.: 86.76                     \n Max.   :108.78   Max.   :178.77   Max.   :117.67                     \n Heart_Attack_Occurrence Extra_Column_1      Extra_Column_2     \n Length:30000            Min.   :0.0000071   Min.   :0.0000052  \n Class :character        1st Qu.:0.2533084   1st Qu.:0.2473606  \n Mode  :character        Median :0.5008204   Median :0.4961980  \n                         Mean   :0.5019388   Mean   :0.4978940  \n                         3rd Qu.:0.7505286   3rd Qu.:0.7473954  \n                         Max.   :0.9999654   Max.   :0.9999894  \n Extra_Column_3      Extra_Column_4      Extra_Column_5     \n Min.   :0.0000227   Min.   :0.0000934   Min.   :0.0001051  \n 1st Qu.:0.2483093   1st Qu.:0.2522110   1st Qu.:0.2518029  \n Median :0.4976104   Median :0.4976175   Median :0.5019871  \n Mean   :0.4981949   Mean   :0.5005952   Mean   :0.5014100  \n 3rd Qu.:0.7476807   3rd Qu.:0.7505662   3rd Qu.:0.7536569  \n Max.   :0.9999694   Max.   :0.9999869   Max.   :0.9999949  \n Extra_Column_6      Extra_Column_7      Extra_Column_8     \n Min.   :0.0000531   Min.   :0.0000678   Min.   :0.0000449  \n 1st Qu.:0.2559989   1st Qu.:0.2482839   1st Qu.:0.2509790  \n Median :0.5017726   Median :0.4988157   Median :0.4985698  \n Mean   :0.5027631   Mean   :0.4980753   Mean   :0.5003557  \n 3rd Qu.:0.7511886   3rd Qu.:0.7456378   3rd Qu.:0.7507293  \n Max.   :0.9998892   Max.   :0.9999900   Max.   :0.9999300  \n Extra_Column_9      Extra_Column_10     Extra_Column_11    \n Min.   :0.0000305   Min.   :0.0000133   Min.   :0.0000008  \n 1st Qu.:0.2502452   1st Qu.:0.2484256   1st Qu.:0.2538092  \n Median :0.4984491   Median :0.5031040   Median :0.5067589  \n Mean   :0.5002292   Mean   :0.5010694   Mean   :0.5044949  \n 3rd Qu.:0.7512186   3rd Qu.:0.7522686   3rd Qu.:0.7556257  \n Max.   :0.9999852   Max.   :0.9999928   Max.   :0.9999578  \n Extra_Column_12     Extra_Column_13     Extra_Column_14    \n Min.   :0.0000713   Min.   :0.0000204   Min.   :0.0000025  \n 1st Qu.:0.2505341   1st Qu.:0.2473108   1st Qu.:0.2482152  \n Median :0.5038609   Median :0.5041162   Median :0.4943841  \n Mean   :0.5008624   Mean   :0.5004557   Mean   :0.4976507  \n 3rd Qu.:0.7511780   3rd Qu.:0.7497094   3rd Qu.:0.7456212  \n Max.   :0.9999484   Max.   :0.9999451   Max.   :0.9999779  \n Extra_Column_15    \n Min.   :0.0000241  \n 1st Qu.:0.2482573  \n Median :0.5009406  \n Mean   :0.4999634  \n 3rd Qu.:0.7487379  \n Max.   :0.9999913  \n\n\n\n\n\n\nCode\nheart_attack[duplicated(heart_attack),]\n\n\n# A tibble: 0 × 32\n# ℹ 32 variables: Age &lt;dbl&gt;, Gender &lt;chr&gt;, Region &lt;chr&gt;, Smoking_History &lt;chr&gt;,\n#   Diabetes_History &lt;chr&gt;, Hypertension_History &lt;chr&gt;,\n#   Cholesterol_Level &lt;dbl&gt;, Physical_Activity &lt;chr&gt;, Diet_Quality &lt;chr&gt;,\n#   Alcohol_Consumption &lt;chr&gt;, Stress_Levels &lt;dbl&gt;, BMI &lt;dbl&gt;,\n#   Heart_Rate &lt;dbl&gt;, Systolic_BP &lt;dbl&gt;, Diastolic_BP &lt;dbl&gt;,\n#   Family_History &lt;chr&gt;, Heart_Attack_Occurrence &lt;chr&gt;, Extra_Column_1 &lt;dbl&gt;,\n#   Extra_Column_2 &lt;dbl&gt;, Extra_Column_3 &lt;dbl&gt;, Extra_Column_4 &lt;dbl&gt;, …\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nEnsure that there are no duplicated columns, if not will have to investigate further.\n\n\n\n\n\n\n\nCode\ncolSums(is.na(heart_attack))\n\n\n                    Age                  Gender                  Region \n                      0                       0                       0 \n        Smoking_History        Diabetes_History    Hypertension_History \n                      0                       0                       0 \n      Cholesterol_Level       Physical_Activity            Diet_Quality \n                      0                       0                       0 \n    Alcohol_Consumption           Stress_Levels                     BMI \n                      0                       0                       0 \n             Heart_Rate             Systolic_BP            Diastolic_BP \n                      0                       0                       0 \n         Family_History Heart_Attack_Occurrence          Extra_Column_1 \n                      0                       0                       0 \n         Extra_Column_2          Extra_Column_3          Extra_Column_4 \n                      0                       0                       0 \n         Extra_Column_5          Extra_Column_6          Extra_Column_7 \n                      0                       0                       0 \n         Extra_Column_8          Extra_Column_9         Extra_Column_10 \n                      0                       0                       0 \n        Extra_Column_11         Extra_Column_12         Extra_Column_13 \n                      0                       0                       0 \n        Extra_Column_14         Extra_Column_15 \n                      0                       0 \n\n\n\n\n\n\n\n\nNote\n\n\n\n\nEnsure that there are no NA values, if not will have to investigate further.\nPossibility to use drop_na() function to drop rows where any specified column contains a missing value.\n\n\n\n\n\n\n\nCode\nspec(heart_attack)\n\n\ncols(\n  Age = col_double(),\n  Gender = col_character(),\n  Region = col_character(),\n  Smoking_History = col_character(),\n  Diabetes_History = col_character(),\n  Hypertension_History = col_character(),\n  Cholesterol_Level = col_double(),\n  Physical_Activity = col_character(),\n  Diet_Quality = col_character(),\n  Alcohol_Consumption = col_character(),\n  Stress_Levels = col_double(),\n  BMI = col_double(),\n  Heart_Rate = col_double(),\n  Systolic_BP = col_double(),\n  Diastolic_BP = col_double(),\n  Family_History = col_character(),\n  Heart_Attack_Occurrence = col_character(),\n  Extra_Column_1 = col_double(),\n  Extra_Column_2 = col_double(),\n  Extra_Column_3 = col_double(),\n  Extra_Column_4 = col_double(),\n  Extra_Column_5 = col_double(),\n  Extra_Column_6 = col_double(),\n  Extra_Column_7 = col_double(),\n  Extra_Column_8 = col_double(),\n  Extra_Column_9 = col_double(),\n  Extra_Column_10 = col_double(),\n  Extra_Column_11 = col_double(),\n  Extra_Column_12 = col_double(),\n  Extra_Column_13 = col_double(),\n  Extra_Column_14 = col_double(),\n  Extra_Column_15 = col_double()\n)\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nEnsure that all variables are correctly classified by data type; recast variable types if needed.\nVariables are correctly classified - where categorical variables are classified as character, while continuous variables are classified as double.\n\n\n\n\n\n\nThe heart_attack tibble contains 32 attributes, as shown above.\nThe following preprocessing checks were conducted as part of data preparation:\n\n\n\n\n\n\nPreprocessing Checks\n\n\n\n\nVerified that the correct data types were loaded in the heart_attack dataset using glimpse() and spec()\nEnsured there were no duplicate variable names using duplicated() in the dataset\nChecked for missing values using colSums(is.na())\n\n\n\n\n\n\nThe table below presents the metadata for the dataset, classifying each variable as either categorical or continuous based on its nature and data type.\n\nCategorical attributes:\n\n\n\n\n\n\n\n\nVariable Names\nType\nDescription\n\n\n\n\nGender\nCHAR\nBiological sex of the individual (e.g., Male, Female)\n\n\nRegion\nCHAR\nGeographic location where the individual resides (e.g., Urban, Rural)\n\n\nSmoking_History\nCHAR\nPast or current smoking habits (e.g., Yes, No)\n\n\nDiabetes_History\nCHAR\nHistory of diabetes diagnosis (Yes/No)\n\n\nHypertension_History\nCHAR\nHistory of high blood pressure diagnosis (Yes/No)\n\n\nPhysical_Activity\nCHAR\nLevel of physical activity (e.g., Low, Moderate, High)\n\n\nDiet_Quality\nCHAR\nDietary habits and nutritional intake assessment (e.g., Poor, Average, Good)\n\n\nAlcohol_Consumption\nCHAR\nFrequency or amount of alcohol intake (e.g., Low, Moderate, High, None)\n\n\nFamily_History\nCHAR\nPresence of heart disease in close relatives (Yes/No)\n\n\nHeart_Attack_Occurrence\nCHAR\nWhether the individual has experienced a heart attack (Yes/No)\n\n\n\nContinuous attributes:\n\n\n\n\n\n\n\n\nVariable Names\nType\nDescription\n\n\n\n\nAge\nNUM\nAge of the individual in years\n\n\nCholesterol_Level\nNUM\nMeasured cholesterol level in the blood\n\n\nStress_Levels\nNUM\nMeasured or self-reported stress level\n\n\nBMI\nNUM\nBody Mass Index, calculated from height and weight\n\n\nHeart_Rate\nNUM\nResting heart rate in beats per minute (bpm)\n\n\nSystolic_BP\nNUM\nSystolic blood pressure measurement (mmHg)\n\n\nDiastolic_BP\nNUM\nDiastolic blood pressure measurement (mmHg)\n\n\nExtra_Column_1\nNUM\n\n\n\nExtra_Column_2\nNUM\n\n\n\nExtra_Column_3\nNUM\n\n\n\nExtra_Column_4\nNUM\n\n\n\nExtra_Column_5\nNUM\n\n\n\nExtra_Column_6\nNUM\n\n\n\nExtra_Column_7\nNUM\n\n\n\nExtra_Column_8\nNUM\n\n\n\nExtra_Column_9\nNUM\n\n\n\nExtra_Column_10\nNUM\n\n\n\nExtra_Column_11\nNUM\n\n\n\nExtra_Column_12\nNUM\n\n\n\nExtra_Column_13\nNUM\n\n\n\nExtra_Column_14\nNUM\n\n\n\nExtra_Column_15\nNUM\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nNotice that Extra_Column_1 to Extra_Column_15 are additional numeric figures without clear definition.\nThey are most likely derived calculations from the variables.\n\n\n\n\n\n\nOf the 32 variables (columns), only 17 variables(columns) are selected for analysis\n\nAll columns are selected except for Extra_Column_1 to Extra_Column_15\n\nThe select() function in the dplyr package is used to obtain these rows, and stored as the R object, heart_attack_1.\n\n\nCode\nheart_attack_1 &lt;- heart_attack %&gt;% \n  select(\"Age\", \"Gender\", \"Region\", \"Smoking_History\", \"Diabetes_History\", \n         \"Hypertension_History\", \"Cholesterol_Level\", \"Physical_Activity\", \n         \"Diet_Quality\", \"Alcohol_Consumption\", \"Stress_Levels\", \"BMI\", \n         \"Heart_Rate\", \"Systolic_BP\", \"Diastolic_BP\", \"Family_History\", \n         \"Heart_Attack_Occurrence\")\n\nheart_attack_1\n\n\n# A tibble: 30,000 × 17\n     Age Gender Region Smoking_History Diabetes_History Hypertension_History\n   &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt;  &lt;chr&gt;           &lt;chr&gt;            &lt;chr&gt;               \n 1    56 Male   Urban  Yes             No               No                  \n 2    69 Male   Urban  No              No               No                  \n 3    46 Male   Rural  Yes             No               No                  \n 4    32 Female Urban  No              No               No                  \n 5    60 Female Rural  No              No               No                  \n 6    25 Female Rural  No              No               No                  \n 7    78 Male   Urban  No              Yes              Yes                 \n 8    38 Female Urban  Yes             No               No                  \n 9    56 Male   Rural  No              No               Yes                 \n10    75 Male   Urban  No              No               No                  \n# ℹ 29,990 more rows\n# ℹ 11 more variables: Cholesterol_Level &lt;dbl&gt;, Physical_Activity &lt;chr&gt;,\n#   Diet_Quality &lt;chr&gt;, Alcohol_Consumption &lt;chr&gt;, Stress_Levels &lt;dbl&gt;,\n#   BMI &lt;dbl&gt;, Heart_Rate &lt;dbl&gt;, Systolic_BP &lt;dbl&gt;, Diastolic_BP &lt;dbl&gt;,\n#   Family_History &lt;chr&gt;, Heart_Attack_Occurrence &lt;chr&gt;\n\n\nThe output shows a tibble dataframe with 30,000 rows and 17 columns.\n\n\n\n\n\nIn the following section, we will recode specific continuous variables into categorical groups for better interpretability. While variables like Cholesterol_Level, Stress_Levels, BMI, Heart_Rate, Systolic_BP, and Diastolic_BP provide valuable insights in their continuous form, categorizing them into meaningful groups will enhance our ability to analyze trends and risk factors more effectively.\n\n\n\n\n\n\n\n\nVariable Names\nMeasurement\nCategorical ranges Approximated classification based on best effort\n\n\n\n\nCholesterol_Level\nmg/dL\n\nLow: ≤ 150\nModerate: 151–200\nHigh: &gt; 200\n\n\n\nStress_Levels\nSelf-reported scale\n\nMiniminal Stress: 0 |\nLow Stress: 1–3\nModerate Stress: 4–7\nHigh Stress: 8–10\n\n\n\nBMI\nBody Mass Index\n\nUnderweight: &lt; 18.5\nNormal Weight: 18.5–24.9\nOverweight: 25–29.9\nObese: ≥ 30\n\n\n\nHeart_Rate\nbeats per minute\n\nBradycardia (Low): &lt; 60\nNormal: 60–100\nTachycardia (High): &gt; 100\n\n\n\nSystolic_BP\nmmHg\n\nNormal: &lt; 120\nElevated: 120–129\nHypertension Stage 1: 130–139\nHypertension Stage 2: ≥ 140\n\n\n\nDiastolic_BP\nmmHg\n\nNormal: &lt; 80\nElevated: 80–89\nHypertension Stage 1: 90–99\nHypertension Stage 2: ≥ 100\n\n\n\n\n\n\nCode\nlibrary(dplyr)\n\nheart_attack_1 &lt;- heart_attack %&gt;%\n  select(\"Age\", \"Gender\", \"Region\", \"Smoking_History\", \"Diabetes_History\", \n         \"Hypertension_History\", \"Cholesterol_Level\", \"Physical_Activity\", \n         \"Diet_Quality\", \"Alcohol_Consumption\", \"Stress_Levels\", \"BMI\", \n         \"Heart_Rate\", \"Systolic_BP\", \"Diastolic_BP\", \"Family_History\", \n         \"Heart_Attack_Occurrence\") %&gt;%\n  mutate(\n    Cholesterol_Level_Category = case_when(\n      Cholesterol_Level &lt;= 150 ~ \"Low\",\n      Cholesterol_Level &lt;= 200 ~ \"Moderate\",\n      TRUE ~ \"High\"\n    ),\n    \n    # **ROUND Stress_Levels before categorization**\n    Rounded_Stress_Levels = round(Stress_Levels), \n    \n    Stress_Levels_Category = case_when(\n      is.na(Rounded_Stress_Levels) ~ \"Unknown\",  # Handle missing values\n      Rounded_Stress_Levels == 0 ~ \"Minimal Stress\",\n      Rounded_Stress_Levels %in% 1:3 ~ \"Low Stress\",\n      Rounded_Stress_Levels %in% 4:7 ~ \"Moderate Stress\",\n      Rounded_Stress_Levels %in% 8:10 ~ \"High Stress\",\n      TRUE ~ \"Unknown\"\n    ),\n    \n    BMI_Category = case_when(\n      BMI &lt; 18.5 ~ \"Underweight\",\n      BMI &gt;= 18.5 & BMI &lt; 25 ~ \"Normal Weight\",\n      BMI &gt;= 25 & BMI &lt; 30 ~ \"Overweight\",\n      BMI &gt;= 30 ~ \"Obese\",\n      TRUE ~ \"Unknown\"\n    ),\n    \n    Heart_Rate_Category = case_when(\n      Heart_Rate &lt; 60 ~ \"Bradycardia (Low)\",\n      Heart_Rate &gt;= 60 & Heart_Rate &lt;= 100 ~ \"Normal\",\n      Heart_Rate &gt; 100 ~ \"Tachycardia (High)\",\n      TRUE ~ \"Unknown\"\n    ),\n    \n    Systolic_BP_Category = case_when(\n      Systolic_BP &lt; 120 ~ \"Normal\",\n      Systolic_BP &gt;= 120 & Systolic_BP &lt; 130 ~ \"Elevated\",\n      Systolic_BP &gt;= 130 & Systolic_BP &lt; 140 ~ \"Hypertension Stage 1\",\n      Systolic_BP &gt;= 140 ~ \"Hypertension Stage 2\",\n      TRUE ~ \"Unknown\"\n    ),\n    \n    Diastolic_BP_Category = case_when(\n      Diastolic_BP &lt; 80 ~ \"Normal\",\n      Diastolic_BP &gt;= 80 & Diastolic_BP &lt; 90 ~ \"Elevated\",\n      Diastolic_BP &gt;= 90 & Diastolic_BP &lt; 100 ~ \"Hypertension Stage 1\",\n      Diastolic_BP &gt;= 100 ~ \"Hypertension Stage 2\",\n      TRUE ~ \"Unknown\"\n    )\n  )\n\n# View the modified dataframe with new categorical variables\nheart_attack_1\n\n\n# A tibble: 30,000 × 24\n     Age Gender Region Smoking_History Diabetes_History Hypertension_History\n   &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt;  &lt;chr&gt;           &lt;chr&gt;            &lt;chr&gt;               \n 1    56 Male   Urban  Yes             No               No                  \n 2    69 Male   Urban  No              No               No                  \n 3    46 Male   Rural  Yes             No               No                  \n 4    32 Female Urban  No              No               No                  \n 5    60 Female Rural  No              No               No                  \n 6    25 Female Rural  No              No               No                  \n 7    78 Male   Urban  No              Yes              Yes                 \n 8    38 Female Urban  Yes             No               No                  \n 9    56 Male   Rural  No              No               Yes                 \n10    75 Male   Urban  No              No               No                  \n# ℹ 29,990 more rows\n# ℹ 18 more variables: Cholesterol_Level &lt;dbl&gt;, Physical_Activity &lt;chr&gt;,\n#   Diet_Quality &lt;chr&gt;, Alcohol_Consumption &lt;chr&gt;, Stress_Levels &lt;dbl&gt;,\n#   BMI &lt;dbl&gt;, Heart_Rate &lt;dbl&gt;, Systolic_BP &lt;dbl&gt;, Diastolic_BP &lt;dbl&gt;,\n#   Family_History &lt;chr&gt;, Heart_Attack_Occurrence &lt;chr&gt;,\n#   Cholesterol_Level_Category &lt;chr&gt;, Rounded_Stress_Levels &lt;dbl&gt;,\n#   Stress_Levels_Category &lt;chr&gt;, BMI_Category &lt;chr&gt;, …\n\n\n\n\n\nWhile analyzing age as a continuous variable provides detailed insights, categorizing the Age variable into distinct age groups allows us to explore how age influences the likelihood of heart attack incidents.\nThe table below are the proposed age categories for this analysis:\n\n\n\nCategories\nAge\n\n\n\n\nYouth\n≤25 years\n\n\nYoung adults\n26–40 years\n\n\nMiddle-aged adults\n41–55 years\n\n\nOlder adults\n56–70 years\n\n\nElderly\n≥71 years\n\n\n\n\n\nCode\nheart_attack_2 &lt;- heart_attack_1 %&gt;%\n  mutate(\n    Age_Category = case_when(\n      Age &lt;= 25 ~ \"Youth\",\n      Age &gt;= 26 & Age &lt;= 40 ~ \"Young Adult\",\n      Age &gt;= 41 & Age &lt;= 55 ~ \"Middle-Aged Adult\",\n      Age &gt;= 56 & Age &lt;= 70 ~ \"Older Adult\",\n      Age &gt;= 71 ~ \"Elderly\",\n      TRUE ~ \"Unknown\"\n    )\n  )\n\n# View the updated dataset\nheart_attack_2\n\n\n# A tibble: 30,000 × 25\n     Age Gender Region Smoking_History Diabetes_History Hypertension_History\n   &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt;  &lt;chr&gt;           &lt;chr&gt;            &lt;chr&gt;               \n 1    56 Male   Urban  Yes             No               No                  \n 2    69 Male   Urban  No              No               No                  \n 3    46 Male   Rural  Yes             No               No                  \n 4    32 Female Urban  No              No               No                  \n 5    60 Female Rural  No              No               No                  \n 6    25 Female Rural  No              No               No                  \n 7    78 Male   Urban  No              Yes              Yes                 \n 8    38 Female Urban  Yes             No               No                  \n 9    56 Male   Rural  No              No               Yes                 \n10    75 Male   Urban  No              No               No                  \n# ℹ 29,990 more rows\n# ℹ 19 more variables: Cholesterol_Level &lt;dbl&gt;, Physical_Activity &lt;chr&gt;,\n#   Diet_Quality &lt;chr&gt;, Alcohol_Consumption &lt;chr&gt;, Stress_Levels &lt;dbl&gt;,\n#   BMI &lt;dbl&gt;, Heart_Rate &lt;dbl&gt;, Systolic_BP &lt;dbl&gt;, Diastolic_BP &lt;dbl&gt;,\n#   Family_History &lt;chr&gt;, Heart_Attack_Occurrence &lt;chr&gt;,\n#   Cholesterol_Level_Category &lt;chr&gt;, Rounded_Stress_Levels &lt;dbl&gt;,\n#   Stress_Levels_Category &lt;chr&gt;, BMI_Category &lt;chr&gt;, …\n\n\n\n\n\nWe will re-check the dataset after filtering and recoding of continuous variables using below:\n\nglimpse()head()summary()duplicated()colSum(is.na())spec())\n\n\n\n\nCode\nglimpse(heart_attack_2)\n\n\nRows: 30,000\nColumns: 25\n$ Age                        &lt;dbl&gt; 56, 69, 46, 32, 60, 25, 78, 38, 56, 75, 36,…\n$ Gender                     &lt;chr&gt; \"Male\", \"Male\", \"Male\", \"Female\", \"Female\",…\n$ Region                     &lt;chr&gt; \"Urban\", \"Urban\", \"Rural\", \"Urban\", \"Rural\"…\n$ Smoking_History            &lt;chr&gt; \"Yes\", \"No\", \"Yes\", \"No\", \"No\", \"No\", \"No\",…\n$ Diabetes_History           &lt;chr&gt; \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"Yes\", …\n$ Hypertension_History       &lt;chr&gt; \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"Yes\", …\n$ Cholesterol_Level          &lt;dbl&gt; 186.4002, 185.1367, 210.6966, 211.1655, 223…\n$ Physical_Activity          &lt;chr&gt; \"Moderate\", \"Low\", \"Low\", \"Moderate\", \"High…\n$ Diet_Quality               &lt;chr&gt; \"Poor\", \"Good\", \"Average\", \"Good\", \"Good\", …\n$ Alcohol_Consumption        &lt;chr&gt; \"Low\", \"Low\", \"Moderate\", \"High\", \"High\", \"…\n$ Stress_Levels              &lt;dbl&gt; 3.644786, 3.384056, 3.810911, 6.014878, 6.8…\n$ BMI                        &lt;dbl&gt; 33.96135, 28.24287, 27.60121, 23.71729, 19.…\n$ Heart_Rate                 &lt;dbl&gt; 72.30153, 57.45764, 64.65870, 55.13147, 76.…\n$ Systolic_BP                &lt;dbl&gt; 123.90209, 129.89331, 145.65490, 131.78522,…\n$ Diastolic_BP               &lt;dbl&gt; 85.68281, 73.52426, 71.99481, 68.21133, 92.…\n$ Family_History             &lt;chr&gt; \"No\", \"Yes\", \"No\", \"No\", \"No\", \"No\", \"No\", …\n$ Heart_Attack_Occurrence    &lt;chr&gt; \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"…\n$ Cholesterol_Level_Category &lt;chr&gt; \"Moderate\", \"Moderate\", \"High\", \"High\", \"Hi…\n$ Rounded_Stress_Levels      &lt;dbl&gt; 4, 3, 4, 6, 7, 8, 5, 5, 7, 4, 3, 2, 2, 3, 8…\n$ Stress_Levels_Category     &lt;chr&gt; \"Moderate Stress\", \"Low Stress\", \"Moderate …\n$ BMI_Category               &lt;chr&gt; \"Obese\", \"Overweight\", \"Overweight\", \"Norma…\n$ Heart_Rate_Category        &lt;chr&gt; \"Normal\", \"Bradycardia (Low)\", \"Normal\", \"B…\n$ Systolic_BP_Category       &lt;chr&gt; \"Elevated\", \"Elevated\", \"Hypertension Stage…\n$ Diastolic_BP_Category      &lt;chr&gt; \"Elevated\", \"Normal\", \"Normal\", \"Normal\", \"…\n$ Age_Category               &lt;chr&gt; \"Older Adult\", \"Older Adult\", \"Middle-Aged …\n\n\n\n\n\n\nCode\nhead(heart_attack_2)\n\n\n# A tibble: 6 × 25\n    Age Gender Region Smoking_History Diabetes_History Hypertension_History\n  &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt;  &lt;chr&gt;           &lt;chr&gt;            &lt;chr&gt;               \n1    56 Male   Urban  Yes             No               No                  \n2    69 Male   Urban  No              No               No                  \n3    46 Male   Rural  Yes             No               No                  \n4    32 Female Urban  No              No               No                  \n5    60 Female Rural  No              No               No                  \n6    25 Female Rural  No              No               No                  \n# ℹ 19 more variables: Cholesterol_Level &lt;dbl&gt;, Physical_Activity &lt;chr&gt;,\n#   Diet_Quality &lt;chr&gt;, Alcohol_Consumption &lt;chr&gt;, Stress_Levels &lt;dbl&gt;,\n#   BMI &lt;dbl&gt;, Heart_Rate &lt;dbl&gt;, Systolic_BP &lt;dbl&gt;, Diastolic_BP &lt;dbl&gt;,\n#   Family_History &lt;chr&gt;, Heart_Attack_Occurrence &lt;chr&gt;,\n#   Cholesterol_Level_Category &lt;chr&gt;, Rounded_Stress_Levels &lt;dbl&gt;,\n#   Stress_Levels_Category &lt;chr&gt;, BMI_Category &lt;chr&gt;,\n#   Heart_Rate_Category &lt;chr&gt;, Systolic_BP_Category &lt;chr&gt;, …\n\n\n\n\n\n\nCode\nsummary(heart_attack_2)\n\n\n      Age           Gender             Region          Smoking_History   \n Min.   :18.00   Length:30000       Length:30000       Length:30000      \n 1st Qu.:33.00   Class :character   Class :character   Class :character  \n Median :48.00   Mode  :character   Mode  :character   Mode  :character  \n Mean   :48.49                                                           \n 3rd Qu.:64.00                                                           \n Max.   :79.00                                                           \n Diabetes_History   Hypertension_History Cholesterol_Level Physical_Activity \n Length:30000       Length:30000         Min.   : 80.02    Length:30000      \n Class :character   Class :character     1st Qu.:179.55    Class :character  \n Mode  :character   Mode  :character     Median :199.77    Mode  :character  \n                                         Mean   :199.90                      \n                                         3rd Qu.:220.16                      \n                                         Max.   :336.86                      \n Diet_Quality       Alcohol_Consumption Stress_Levels         BMI       \n Length:30000       Length:30000        Min.   : 0.000   Min.   : 5.58  \n Class :character   Class :character    1st Qu.: 3.644   1st Qu.:21.63  \n Mode  :character   Mode  :character    Median : 4.993   Median :24.96  \n                                        Mean   : 5.002   Mean   :25.00  \n                                        3rd Qu.: 6.353   3rd Qu.:28.36  \n                                        Max.   :10.000   Max.   :46.10  \n   Heart_Rate      Systolic_BP      Diastolic_BP    Family_History    \n Min.   : 30.03   Min.   : 56.23   Min.   : 39.95   Length:30000      \n 1st Qu.: 63.25   1st Qu.:109.79   1st Qu.: 73.26   Class :character  \n Median : 69.95   Median :119.90   Median : 80.12   Mode  :character  \n Mean   : 69.98   Mean   :119.91   Mean   : 80.03                     \n 3rd Qu.: 76.66   3rd Qu.:130.02   3rd Qu.: 86.76                     \n Max.   :108.78   Max.   :178.77   Max.   :117.67                     \n Heart_Attack_Occurrence Cholesterol_Level_Category Rounded_Stress_Levels\n Length:30000            Length:30000               Min.   : 0.000       \n Class :character        Class :character           1st Qu.: 4.000       \n Mode  :character        Mode  :character           Median : 5.000       \n                                                    Mean   : 4.998       \n                                                    3rd Qu.: 6.000       \n                                                    Max.   :10.000       \n Stress_Levels_Category BMI_Category       Heart_Rate_Category\n Length:30000           Length:30000       Length:30000       \n Class :character       Class :character   Class :character   \n Mode  :character       Mode  :character   Mode  :character   \n                                                              \n                                                              \n                                                              \n Systolic_BP_Category Diastolic_BP_Category Age_Category      \n Length:30000         Length:30000          Length:30000      \n Class :character     Class :character      Class :character  \n Mode  :character     Mode  :character      Mode  :character  \n                                                              \n                                                              \n                                                              \n\n\n\n\n\n\nCode\nheart_attack_2[duplicated(heart_attack_2),]\n\n\n# A tibble: 0 × 25\n# ℹ 25 variables: Age &lt;dbl&gt;, Gender &lt;chr&gt;, Region &lt;chr&gt;, Smoking_History &lt;chr&gt;,\n#   Diabetes_History &lt;chr&gt;, Hypertension_History &lt;chr&gt;,\n#   Cholesterol_Level &lt;dbl&gt;, Physical_Activity &lt;chr&gt;, Diet_Quality &lt;chr&gt;,\n#   Alcohol_Consumption &lt;chr&gt;, Stress_Levels &lt;dbl&gt;, BMI &lt;dbl&gt;,\n#   Heart_Rate &lt;dbl&gt;, Systolic_BP &lt;dbl&gt;, Diastolic_BP &lt;dbl&gt;,\n#   Family_History &lt;chr&gt;, Heart_Attack_Occurrence &lt;chr&gt;,\n#   Cholesterol_Level_Category &lt;chr&gt;, Rounded_Stress_Levels &lt;dbl&gt;, …\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nEnsure that there are no duplicated columns, if not will have to investigate further.\n\n\n\n\n\n\n\nCode\ncolSums(is.na(heart_attack_2))\n\n\n                       Age                     Gender \n                         0                          0 \n                    Region            Smoking_History \n                         0                          0 \n          Diabetes_History       Hypertension_History \n                         0                          0 \n         Cholesterol_Level          Physical_Activity \n                         0                          0 \n              Diet_Quality        Alcohol_Consumption \n                         0                          0 \n             Stress_Levels                        BMI \n                         0                          0 \n                Heart_Rate                Systolic_BP \n                         0                          0 \n              Diastolic_BP             Family_History \n                         0                          0 \n   Heart_Attack_Occurrence Cholesterol_Level_Category \n                         0                          0 \n     Rounded_Stress_Levels     Stress_Levels_Category \n                         0                          0 \n              BMI_Category        Heart_Rate_Category \n                         0                          0 \n      Systolic_BP_Category      Diastolic_BP_Category \n                         0                          0 \n              Age_Category \n                         0 \n\n\n\n\n\n\n\n\nNote\n\n\n\n\nEnsure that there are no NA values, if not will have to investigate further.\nPossibility to use drop_na() function to drop rows where any specified column contains a missing value.\n\n\n\n\n\n\n\nCode\nspec(heart_attack_2)\n\n\nNULL\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nEnsure that all variables are correctly classified by data type; recast variable types if needed.\nVariables are correctly classified - where categorical variables are classified as character, while continuous variables are classified as double.\n\n\n\n\n\n\n\n\n\n\n\n\nPreprocessing Checks\n\n\n\n\nVerified that the correct data types were loaded in the heart_attack dataset using glimpse() and spec()\nEnsured there were no duplicate variable names using duplicated() in the dataset\nChecked for missing values using colSums(is.na())\n\n\n\nThe final output - heart_attack_2 shows a tibble dataframe with 30,000 rows and 17 columns.\n\n\n\n\n\n\n\n\n\n\n\n\nImportant\n\n\n\nKey observations\n\nUneven representation of age groups\n\nNoticeably lower number of Youth (≤25 years) and Elderly (≥71 years) compared to the middle age groups\nYoung adults (26–40 years), middle-aged adults (41–55 years), and older adults (56–70 years) make up the majority of the dataset\n\nPotential bias in data collection\n\nUnderrepresentation of elderly individuals might inflate their heart attack rate in percentage-based analyses\nLow count of youth suggests they may be under-sampled\n\n\nWhat can we do:\n\nIn the future, ensure that the data collected are proportionally across all age groups\nCheck for potential sampling bias\nNormalize the heart attack rates based on the total population for each age group\n\n\n\n\nAbsolute age count()Visualization: Absolute age count()Count by Age_Category()Visualization: Age_Category()\n\n\n\n\nCode\n# Count the number of individuals by exact age\nage_distribution &lt;- heart_attack_2 %&gt;%\n  group_by(Age) %&gt;%\n  summarise(Count = n()) %&gt;%\n  arrange(Age)\n\n# Print age count\nprint(age_distribution)\n\n\n# A tibble: 62 × 2\n     Age Count\n   &lt;dbl&gt; &lt;int&gt;\n 1    18   478\n 2    19   480\n 3    20   483\n 4    21   483\n 5    22   468\n 6    23   462\n 7    24   466\n 8    25   493\n 9    26   480\n10    27   493\n# ℹ 52 more rows\n\n\n\n\n\n\nCode\nggplot(age_distribution, aes(x = Age, y = Count)) +\n  geom_bar(stat = \"identity\", fill = \"#78B3EA\", color = \"black\", alpha = 0.7) +\n  labs(title = \"Age Distribution of Individuals in Dataset\",\n       x = \"Age\",\n       y = \"Number of Individuals\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\n# Define age category levels in the required order\nage_levels &lt;- c(\n  \"Youth (≤25 years)\",\n  \"Young adults (26–40 years)\",\n  \"Older adults (56–70 years)\",\n  \"Middle-aged adults (41–55 years)\",\n  \"Elderly (≥71 years)\"\n)\n\n# Count individuals by Age Category with ordered factor levels\nage_category_distribution &lt;- heart_attack_2 %&gt;%\n  mutate(Age_Category = case_when(\n    Age &lt;= 25 ~ \"Youth (≤25 years)\",\n    Age &gt;= 26 & Age &lt;= 40 ~ \"Young adults (26–40 years)\",\n    Age &gt;= 41 & Age &lt;= 55 ~ \"Middle-aged adults (41–55 years)\",\n    Age &gt;= 56 & Age &lt;= 70 ~ \"Older adults (56–70 years)\",\n    Age &gt;= 71 ~ \"Elderly (≥71 years)\",\n    TRUE ~ \"Unknown\"\n  )) %&gt;%\n  group_by(Age_Category) %&gt;%\n  summarise(Count = n()) %&gt;%\n  mutate(Age_Category = factor(Age_Category, levels = age_levels)) %&gt;%  # Apply custom sorting\n  arrange(Age_Category)\n\n# Print age category count\nprint(age_category_distribution)\n\n\n# A tibble: 5 × 2\n  Age_Category                     Count\n  &lt;fct&gt;                            &lt;int&gt;\n1 Youth (≤25 years)                 3813\n2 Young adults (26–40 years)        7432\n3 Older adults (56–70 years)        7201\n4 Middle-aged adults (41–55 years)  7153\n5 Elderly (≥71 years)               4401\n\n\n\n\n\n\nCode\n# Visualization: Age Category Distribution\nggplot(age_category_distribution, aes(x = Age_Category, y = Count, fill = Age_Category)) +\n  geom_bar(stat = \"identity\", color = \"black\", alpha = 0.7) +\n  \n  # Add text labels above bars\n  geom_text(aes(label = Count), vjust = -0.5, color = \"black\", size = 2.5) +\n  \n  labs(title = \"Age Category Distribution in Dataset\",\n       x = \"Age Category\",\n       y = \"Number of Individuals\") +\n  \n  theme_minimal() +\n  scale_fill_brewer(palette = \"Set2\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nObservations:\n\nHeart Attacks Occur Across All Ages:\n\nHistogram shows a wide distribution of heart attack patients across various age groups\n\nAge Group Variation in Heart Attack Rates:\n\nHeart attack rate appears to be relatively stable across most age bins, ranging between 8.6% to 11.3%.\nHighest normalized heart attack rate is in the [73,78] age bin (~11.3%).\n\nSlight Increase in Middle-Aged & Elderly Groups:\n\nGradual increase in heart attack rates from younger groups to middle-aged adults - [43,48] (10.8%) and [48,53] (11.0%).\nHeart attack remains high in the older and elderly groups, suggesting that heart attack risk increases with age.\n\n\n\nCode()Graph()\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nThe cut()function was used to divide a continuous variable (like Age) into discrete intervals such as bins.\ncut() function is part of Base R, which does not require any additional packages to use.\n\n\n\n\n\nCode\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(tidyr)\n\n# Step 1: Remove any NA values in Age before binning\nheart_attack_2 &lt;- heart_attack_2 %&gt;%\n  filter(!is.na(Age)) %&gt;%  # Remove missing Age values\n  mutate(Age_Bin = cut(Age, \n                       breaks = seq(floor(min(Age, na.rm = TRUE)), \n                                    ceiling(max(Age, na.rm = TRUE)) + 5,  \n                                    by = 5), \n                       right = FALSE))  \n\n# Step 2: Count total individuals per age bin\ntotal_population &lt;- heart_attack_2 %&gt;%\n  group_by(Age_Bin) %&gt;%\n  summarise(Total_Count = n(), .groups = \"drop\")\n\n# Step 3: Count heart attack occurrences per age bin\nheart_attack_counts &lt;- heart_attack_2 %&gt;%\n  filter(Heart_Attack_Occurrence == \"Yes\") %&gt;%\n  group_by(Age_Bin) %&gt;%\n  summarise(Heart_Attack_Count = n(), .groups = \"drop\")\n\n# Step 4: Merge the two tables and replace NA values with 0\nnormalized_data &lt;- left_join(total_population, heart_attack_counts, by = \"Age_Bin\") %&gt;%\n  mutate(Heart_Attack_Count = replace_na(Heart_Attack_Count, 0),  # Replace NA counts with 0\n         Normalized_Heart_Attack_Rate = (Heart_Attack_Count / Total_Count) * 100) %&gt;%\n  filter(!is.na(Age_Bin))  # Ensure Age_Bin does not contain NA values\n\n# Step 5: Create the normalized histogram\nggplot(normalized_data, aes(x = Age_Bin, y = Normalized_Heart_Attack_Rate, fill = Age_Bin)) +\n  geom_bar(stat = \"identity\", color = \"black\", alpha = 0.7) +\n  \n  # Add text labels showing the percentage per bin\n  geom_text(aes(label = sprintf(\"%.1f%%\", Normalized_Heart_Attack_Rate)), vjust = -0.5, color = \"black\") +\n  \n  labs(title = \"Normalized Age Distribution of Heart Attack Patients\",\n       x = \"Age Groups (Binned by 5 Years)\",\n       y = \"Heart Attack Rate (Normalized, % of total in group)\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAnother point of view, categorizing ages into groups and calculating the heart attack rate for each group.\n\nCode()Graph()\n\n\n\n\nCode\n# Define Age Category Labels with Age Ranges\nage_labels &lt;- c(\n  \"Youth (≤25 years)\", \n  \"Young adults (26–40 years)\", \n  \"Middle-aged adults (41–55 years)\", \n  \"Older adults (56–70 years)\", \n  \"Elderly (≥71 years)\"\n)\n\n# Count total individuals per age category\ntotal_population &lt;- heart_attack_2 %&gt;%\n  group_by(Age_Category) %&gt;%\n  summarise(Total_Count = n())\n\n# Count heart attack occurrences per age category\nheart_attack_counts &lt;- heart_attack_2 %&gt;%\n  filter(Heart_Attack_Occurrence == \"Yes\") %&gt;%\n  group_by(Age_Category) %&gt;%\n  summarise(Heart_Attack_Count = n())\n\n# Merge both datasets and calculate the normalized heart attack rate\nnormalized_data &lt;- left_join(heart_attack_counts, total_population, by = \"Age_Category\") %&gt;%\n  mutate(Normalized_Heart_Attack_Rate = (Heart_Attack_Count / Total_Count) * 100) %&gt;%\n  \n  # Convert Age_Category into a factor with labels\n  mutate(Age_Category = factor(Age_Category, \n                               levels = c(\"Youth\", \"Young Adult\", \"Middle-Aged Adult\", \"Older Adult\", \"Elderly\"), \n                               labels = age_labels))\n\n# Create bar plot with normalized rates\nggplot(normalized_data, aes(x = Age_Category, y = Normalized_Heart_Attack_Rate, fill = Age_Category)) +\n  geom_bar(stat = \"identity\", color = \"black\", alpha = 0.7) +\n  \n  # Add data labels to show percentages\n  geom_text(aes(label = sprintf(\"%.1f%%\", Normalized_Heart_Attack_Rate)), vjust = -0.5, color = \"black\",size = 2.5) +\n  \n  labs(title = \"Normalized Heart Attack Rate by Age Group\",\n       x = \"Age Group\",\n       y = \"Heart Attack Rate (% of total in group)\",\n       fill = \"Age Categories (with Ranges)\") +  # Updated legend title\n  theme_minimal() +\n  scale_fill_brewer(palette = \"Set2\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1),\n        axis.text.y = element_text(size = 8))  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCh :::::"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex04.html",
    "href": "In-class_Ex/In-class_Ex04.html",
    "title": "In-class Exercise 04",
    "section": "",
    "text": "Code\npacman::p_load(haven, SmartEDA,tidyverse, tidymodels,ggridges, colorspace)\n\n\n\n\n\n\nCode\nexam &lt;- read_csv(\"data/Exam_data.csv\", show_col_types = FALSE)\n\n\n\n\n\n\n\n\nCode\nggplot(data = exam,\n       aes(x = ENGLISH,\n           y = CLASS)) +\n  geom_boxplot()\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot(data = exam, aes(x = ENGLISH, y = CLASS)) +\n  geom_density_ridges(\n    scale = 3,\n    rel_min_height = 0.01,\n    bandwidth = 3.4,\n    fill = lighten(\"#7097BB\", .3),\n    color = \"white\"\n  ) +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n  ) +\n  scale_y_discrete(\n    name = NULL, \n    expand = expansion(add = c(0.2, 2.6))\n  ) +\n  theme_ridges()"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex04.html#getting-started",
    "href": "In-class_Ex/In-class_Ex04.html#getting-started",
    "title": "In-class Exercise 04",
    "section": "",
    "text": "Code\npacman::p_load(haven, SmartEDA,tidyverse, tidymodels,ggridges, colorspace)\n\n\n\n\n\n\nCode\nexam &lt;- read_csv(\"data/Exam_data.csv\", show_col_types = FALSE)\n\n\n\n\n\n\n\n\nCode\nggplot(data = exam,\n       aes(x = ENGLISH,\n           y = CLASS)) +\n  geom_boxplot()\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot(data = exam, aes(x = ENGLISH, y = CLASS)) +\n  geom_density_ridges(\n    scale = 3,\n    rel_min_height = 0.01,\n    bandwidth = 3.4,\n    fill = lighten(\"#7097BB\", .3),\n    color = \"white\"\n  ) +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n  ) +\n  scale_y_discrete(\n    name = NULL, \n    expand = expansion(add = c(0.2, 2.6))\n  ) +\n  theme_ridges()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05a.html",
    "href": "Hands-on_Ex/Hands-on_Ex05a.html",
    "title": "Hands-on Exercise 05a",
    "section": "",
    "text": "With the assistance of ChatGPT"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05a.html#creating-ternary-plot-with-r",
    "href": "Hands-on_Ex/Hands-on_Ex05a.html#creating-ternary-plot-with-r",
    "title": "Hands-on Exercise 05a",
    "section": "5. Creating Ternary Plot with R",
    "text": "5. Creating Ternary Plot with R\n\n5.1 Overview\nTernary plots visualize three-part compositional data, such as population age groups or soil composition. Displayed as a triangle with sides scaled from 0 to 1, each side represents a component. Points are plotted based on their proportions, with perpendicular lines indicating their values.\nThis hands-on exercise teaches you how to create a ternary plot in R to visualize and analyze Singapore’s population structure. The steps include:\nInstalling and loading tidyverse and ggtern packages. Using mutate() from dplyr to derive three new measures. Creating a static ternary plot with ggtern(). Building an interactive ternary plot using plot_ly() from Plotly.\n\n\n5.2 Installing and launching R packages"
  }
]